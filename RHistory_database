(base) [deuner@seneca rstudio]$ cat history_database
1679405106130:geom_bar(position = "dodge", stat = "identity") +
1679405106137:theme_classic() +
1679405106142:scale_fill_manual(palette(c("purple", "orange")))
1679405113107:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679405113113:geom_bar(position = "dodge", stat = "identity") +
1679405113118:theme_classic() +
1679405113124:scale_fill_manual(palette = c("purple", "orange"))
1679405116243:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679405116249:geom_bar(position = "dodge", stat = "identity") +
1679405116255:theme_classic() +
1679405116260:scale_fill_manual(palette = c("purple", "orange"))
1679405136271:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679405136276:geom_bar(position = "dodge", stat = "identity") +
1679405136281:theme_classic() +
1679405136286:scale_fill_manual(values = c("purple", "orange"))
1679405200751:# barplots of TP vs FP
1679405200756:TPFP.df <- data.frame(TPFP = c(TP.vec, FP.vec), cat = c(rep("TP", 19), rep("FP", 19)), res = c(resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2)), resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))))
1679405206184:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679405206190:geom_bar(position = "dodge", stat = "identity") +
1679405206194:theme_classic() +
1679405206199:scale_fill_manual(values = c("#00203FFF", "#ADEFD1FF"))
1679405231048:TPFP.df
1679405310129:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679405310137:geom_bar(position = "dodge", stat = "identity") +
1679405310142:theme_classic() +
1679405310148:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679405509963:TPFP.df
1679405524472:TP.vec
1679405541273:TP.all
1679405707930:# Check if the TPs are shared
1679405707935:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene"))
1679405710237:TP.peak.gene
1679405762533:duplicated(TP.peak.gene)
1679405807868:# Check if the TPs are shared
1679405807876:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene"))
1679405808387:TP.peak.gene$duplicated <- duplicated(TP.peak.gene)
1679405809198:TP.peak.gene$unique <- unique(TP.peak.gene)
1679405821504:unique(TP.peak.gene)
1679405835929:unique(TP.peak.gene)
1679405868892:# Check if the TPs are shared
1679405868896:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene"))
1679405869558:TP.peak.gene$duplicated <- TP.peak.gene %>% duplicated(TP.peak.gene)
1679405875650:# Check if the TPs are shared
1679405875655:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene"))
1679405878140:TP.peak.gene
1679405930604:duplicated(TP.peak.gene
1679405934408:duplicated(TP.peak.gene)
1679405948197:unique(TP.peak.gene)
1679406038456:ggplot(TF.peak.gene, aes(duplicated, fill = duplicated)) +
1679406038461:geom_bar(stat = "count") +
1679406038466:theme_classic() +
1679406038471:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679406044336:# Check if the TPs are shared
1679406044341:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene"))
1679406045270:TP.peak.gene$duplicated <- TP.peak.gene %>% duplicated(TP.peak.gene)
1679406046148:ggplot(TF.peak.gene, aes(duplicated, fill = duplicated)) +
1679406046158:geom_bar(stat = "count") +
1679406046183:theme_classic() +
1679406046188:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679406050208:ggplot(TP.peak.gene, aes(duplicated, fill = duplicated)) +
1679406050217:geom_bar(stat = "count") +
1679406050229:theme_classic() +
1679406050237:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679406056623:# Check if the TPs are shared
1679406056629:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene"))
1679406057204:TP.peak.gene$duplicated <- TP.peak.gene %>% duplicated(TP.peak.gene)
1679406061801:# Check if the TPs are shared
1679406061806:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene"))
1679406062584:TP.peak.gene$duplicated <- TP.peak.gene %>% duplicated(TP.peak.gene)
1679406067998:TP.peak.gene
1679406084036:TP.peak.gene$duplicated <- duplicated(TP.peak.gene)
1679406085672:ggplot(TP.peak.gene, aes(duplicated, fill = duplicated)) +
1679406085677:geom_bar(stat = "count") +
1679406085682:theme_classic() +
1679406085686:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679406148833:ggplot(TP.peak.gene, aes(duplicated, fill = duplicated)) +
1679406148839:geom_bar(stat = "count") +
1679406148843:theme_classic() +
1679406148848:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406148853:labs(title = "Are the links shared?")
1679406261699:TP.all
1679406309760:ggplot(TP.peak.gene, aes(duplicated, fill = duplicated)) +
1679406309766:geom_bar(stat = "count") +
1679406309772:theme_classic() +
1679406309777:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406309782:labs(title = "Are the links shared?") +
1679406309788:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679406320488:ggplot(TP.peak.gene, aes(duplicated, fill = duplicated)) +
1679406320493:geom_bar(stat = "count") +
1679406320497:theme_classic() +
1679406320502:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406320507:labs(title = "Are the links shared?") +
1679406320511:geom_text(after_stat='count', aes(label=..count..), vjust=-1)
1679406326253:ggplot(TP.peak.gene, aes(duplicated, fill = duplicated)) +
1679406326258:geom_bar(stat = "count") +
1679406326264:theme_classic() +
1679406326270:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406326276:labs(title = "Are the links shared?") +
1679406326282:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679406468701:# Check if the TPs are shared
1679406468707:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679406469585:TP.peak.gene$duplicated <- TP.all %>% dplyr::select(c("peak", "gene")) %>% duplicated()
1679406470698:ggplot(TP.peak.gene, aes(duplicated, fill = duplicated)) +
1679406470704:geom_bar(stat = "count") +
1679406470709:theme_classic() +
1679406470715:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406470721:labs(title = "Are the links shared?") +
1679406470727:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679406511703:ggplot(TP.peak.gene, aes(duplicated, fill = res)) +
1679406511709:geom_bar(stat = "count", position = "dodge") +
1679406511714:theme_classic() +
1679406511719:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406511724:labs(title = "Are the links shared?") +
1679406511730:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679406522005:ggplot(TP.peak.gene, aes(duplicated, fill = as.factor(res))) +
1679406522011:geom_bar(stat = "count", position = "dodge") +
1679406522018:theme_classic() +
1679406522026:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406522034:labs(title = "Are the links shared?") +
1679406522041:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679406529692:ggplot(TP.peak.gene, aes(duplicated, fill = as.factor(res))) +
1679406529698:geom_bar(stat = "count", position = "dodge") +
1679406529704:theme_classic()
1679406545561:ggplot(TP.peak.gene, aes(duplicated, fill = as.factor(res))) +
1679406545575:geom_bar(stat = "count", position = "dodge") +
1679406545590:theme_classic()
1679406555726:scale_fill_brewer(palette = "magma") +
1679406555740:labs(title = "Are the links shared?") +
1679406555752:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679406605570:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406605575:geom_bar(stat = "count", position = "dodge") +
1679406605579:theme_classic() +
1679406605584:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406605589:labs(title = "Are the links shared?") +
1679406605594:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679406622197:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406622203:geom_bar(stat = "count", position = "dodge") +
1679406622209:theme_classic() +
1679406622214:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406622220:labs(title = "Are the links shared?") +
1679406622226:geom_text(stat='count', aes(label=..count..), size = 1)
1679406630083:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406630088:geom_bar(stat = "count", position = "dodge") +
1679406630093:theme_classic() +
1679406630097:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406630102:labs(title = "Are the links shared?") +
1679406630107:geom_text(stat='count', aes(label=..count..), size = 5)
1679406640441:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406640446:geom_bar(stat = "count", position = "dodge") +
1679406640450:theme_classic() +
1679406640455:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406640460:labs(title = "Are the links shared?") +
1679406640465:geom_text(stat='count', aes(label=..count..), size = 3)
1679406650246:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406650251:geom_bar(stat = "count", position = "dodge") +
1679406650256:theme_classic() +
1679406650263:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406650268:labs(title = "Are the links shared?") +
1679406650273:geom_text(stat='count', aes(label=..count..), size = 3, vjust = 1)
1679406655560:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406655572:geom_bar(stat = "count", position = "dodge") +
1679406655581:theme_classic() +
1679406655589:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406655598:labs(title = "Are the links shared?") +
1679406655606:geom_text(stat='count', aes(label=..count..), size = 3, vjust = 2)
1679406659353:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406659362:geom_bar(stat = "count", position = "dodge") +
1679406659372:theme_classic() +
1679406659381:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406659391:labs(title = "Are the links shared?") +
1679406659400:geom_text(stat='count', aes(label=..count..), size = 3, vjust = -2)
1679406662650:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406662658:geom_bar(stat = "count", position = "dodge") +
1679406662668:theme_classic() +
1679406662676:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406662686:labs(title = "Are the links shared?") +
1679406662696:geom_text(stat='count', aes(label=..count..), size = 3, vjust = -1)
1679406674794:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406674800:geom_bar(stat = "count", position = "dodge") +
1679406674805:theme_classic() +
1679406674810:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406674815:labs(title = "Are the links shared?") +
1679406674820:geom_text(stat='count', aes(label=..count..), size = 3, vjust = -1, hjust = 1)
1679406681159:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406681165:geom_bar(stat = "count", position = "dodge") +
1679406681170:theme_classic() +
1679406681175:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406681180:labs(title = "Are the links shared?") +
1679406681186:geom_text(stat='count', aes(label=..count..), size = 3, vjust = -1, hjust =- 1)
1679406685763:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406685770:geom_bar(stat = "count", position = "dodge") +
1679406685778:theme_classic() +
1679406685785:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406685792:labs(title = "Are the links shared?") +
1679406685798:geom_text(stat='count', aes(label=..count..), size = 3, vjust = -1, hjust = 0)
1679406690700:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406690705:geom_bar(stat = "count", position = "dodge") +
1679406690710:theme_classic() +
1679406690714:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406690719:labs(title = "Are the links shared?") +
1679406690724:geom_text(stat='count', aes(label=..count..), size = 3, vjust = -1, hjust = 0.25)
1679406711860:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406711866:geom_bar(stat = "count", position = "dodge") +
1679406711871:theme_classic() +
1679406711877:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406711883:labs(title = "Are the links shared?")
1679406756218:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679406756224:geom_bar(stat = "count", position = "dodge") +
1679406756229:theme_classic() +
1679406756235:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679406756241:labs(title = "Are the links shared?", x = "Cluster Resolutions")
1679407053531:TP.peak.gene
1679407674465:TP.peak.gene %>% dplyr::select(c("peak", "gene")) %>% group_by_all() %>% count
1679407753437:# count how many times each link is found in the eGRNs
1679407753444:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene")) %>% group_by_all() %>% count
1679408134597:# create a column for the pasted peak-gene info
1679408134907:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep "_")
1679408141274:# create a column for the pasted peak-gene info
1679408141280:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679408167921:# plot most frequent links across resolutions
1679408167926:ggplot(TP.peak.gene.counts, aes(link, count)) +
1679408167931:geom_bar()
1679408178169:# plot most frequent links across resolutions
1679408178175:ggplot(TP.peak.gene.counts, aes(link, count)) +
1679408178183:geom_point()
1679408181757:# plot most frequent links across resolutions
1679408181764:ggplot(TP.peak.gene.counts, aes(link, count)) +
1679408181772:geom_point()
1679408190941:# plot most frequent links across resolutions
1679408190948:ggplot(TP.peak.gene.counts, aes(x = link, y = count)) +
1679408190955:geom_point()
1679408198769:# plot most frequent links across resolutions
1679408198775:ggplot(TP.peak.gene.counts, aes(x = link, y = n)) +
1679408198781:geom_point()
1679408209589:# plot most frequent links across resolutions
1679408209596:ggplot(TP.peak.gene.counts, aes(x = link, y = n)) +
1679408209604:geom_bar()
1679408211819:# plot most frequent links across resolutions
1679408211827:ggplot(TP.peak.gene.counts, aes(x = link, y = n)) +
1679408211836:geom_bar()
1679408221120:# plot most frequent links across resolutions
1679408221126:ggplot(TP.peak.gene.counts, aes(x = link, y = n)) +
1679408221134:geom_histogram()
1679408237786:# plot most frequent links across resolutions
1679408237792:ggplot(TP.peak.gene.counts, aes(x = link, y = n)) +
1679408237800:geom_bar(stat = "identity")
1679408272890:# plot most frequent links across resolutions
1679408272895:ggplot(TP.peak.gene.counts %>% top_n(20, n), aes(x = link, y = n)) +
1679408272899:geom_bar(stat = "identity")
1679408281780:TP.peak.gene.counts %>% top_n(20, n)
1679408287824:TP.peak.gene.counts %>% top_n(20, "n")
1679408317526:# plot most frequent links across resolutions
1679408317531:ggplot(TP.peak.gene.counts %>% top_n(5, n), aes(x = link, y = n)) +
1679408317536:geom_bar(stat = "identity")
1679408364872:# plot most frequent links across resolutions
1679408364877:ggplot(TP.peak.gene.counts %>% top_n(5, n), aes(x = link, y = n)) +
1679408364882:geom_bar(stat = "identity")
1679408392856:TP.peak.gene.counts %>% top_n(5, n)
1679408468624:# plot most frequent links across resolutions
1679408468631:ggplot(TP.peak.gene.counts %>% arrange(n), aes(x = link, y = n)) +
1679408468636:geom_bar(stat = "identity")
1679408483211:TP.peak.gene.counts %>% arrange(n)
1679408527353:# plot most frequent links across resolutions
1679408527358:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% slice(1:5), aes(x = link, y = n)) +
1679408527362:geom_bar(stat = "identity")
1679408557797:TP.peak.gene.counts %>% arrange(desc(n
1679408562942:TP.peak.gene.counts %>% arrange(desc(n))
1679408564098:TP.peak.gene.counts %>% arrange(desc(n))
1679408577782:TP.peak.gene.counts %>% arrange(desc(n)) %>% slice(1:5)
1679408600938:# plot most frequent links across resolutions
1679408600943:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% dplyr::slice(1:5), aes(x = link, y = n)) +
1679408600948:geom_bar(stat = "identity")
1679408638000:# plot most frequent links across resolutions
1679408638004:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% dplyr::slice(1:5), aes(x = link, y = n)) +
1679408638009:geom_bar(stat = "identity")
1679408653708:TP.peak.gene.counts %>% arrange(desc(n)) %>% dplyr::slice(1:5)
1679408671198:TP.peak.gene.counts %>% arrange(desc(n)) %>% dplyr::slice(5)
1679408710274:# plot most frequent links across resolutions
1679408710279:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% dplyr::slice(1:5), aes(x = link, y = n)) +
1679408710284:geom_bar(stat = "identity")
1679408725017:TP.peak.gene.counts %>% arrange(desc(n)) %>% dplyr::slice(1:2)
1679408735034:TP.peak.gene.counts %>% arrange(desc(n))
1679408748851:TP.peak.gene.counts %>% arrange(desc(n)) %>% slice_head()
1679408794238:TP.peak.gene.counts %>% arrange(desc(n)) %>% head(5)
1679408798791:TP.peak.gene.counts %>% arrange(desc(n)) %>% head(20)
1679408808657:TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10)
1679408818912:# plot most frequent links across resolutions
1679408818917:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n)) +
1679408818921:geom_bar(stat = "identity")
1679408871933:# plot most frequent links across resolutions
1679408871939:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n)) +
1679408871944:geom_bar(stat = "identity") +
1679408871948:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679408888342:# plot most frequent links across resolutions
1679408888346:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n)) +
1679408888351:geom_bar(stat = "identity") +
1679408888356:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679408888361:theme_classic2()
1679408896775:# plot most frequent links across resolutions
1679408896780:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n)) +
1679408896785:geom_bar(stat = "identity") +
1679408896790:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679408896795:theme_bw()
1679408912702:# plot most frequent links across resolutions
1679408912707:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n)) +
1679408912713:geom_bar(stat = "identity") +
1679408912719:theme_classic() +
1679408912724:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679408929909:# plot most frequent links across resolutions
1679408929914:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n)) +
1679408929919:geom_bar(stat = "identity") +
1679408929924:theme_bw() +
1679408929929:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679408997029:# plot most frequent links across resolutions
1679408997035:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679408997040:geom_bar(stat = "identity") +
1679408997045:theme_bw() +
1679408997051:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679409043780:# plot most frequent links across resolutions
1679409043786:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679409043791:geom_bar(stat = "identity") +
1679409043796:theme_bw() +
1679409043802:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679409043809:scale_fill_viridis_b()
1679409050026:# plot most frequent links across resolutions
1679409050032:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679409050037:geom_bar(stat = "identity") +
1679409050042:theme_bw() +
1679409050047:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679409050053:scale_fill_viridis_c()
1679409052139:# plot most frequent links across resolutions
1679409052144:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679409052149:geom_bar(stat = "identity") +
1679409052154:theme_bw() +
1679409052159:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679409052165:scale_fill_viridis_d()
1679409089585:# plot most frequent links across resolutions
1679409089602:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679409089617:geom_bar(stat = "identity") +
1679409089630:theme_bw() +
1679409089645:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679409089658:scale_fill_viridis_d() +
1679409089674:labs(x = count, title = "Most frequent links across resolutions")
1679409113805:# plot most frequent links across resolutions
1679409113810:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679409113816:geom_bar(stat = "identity") +
1679409113821:theme_bw() +
1679409113826:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679409113833:scale_fill_viridis_d() +
1679409113838:labs(x = "count", title = "Most frequent links across resolutions")
1679409123285:# plot most frequent links across resolutions
1679409123290:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679409123294:geom_bar(stat = "identity") +
1679409123299:theme_bw() +
1679409123304:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679409123310:scale_fill_viridis_d() +
1679409123315:labs(y = "count", title = "Most frequent links across resolutions")
1679409380682:# plot only duplicated links and their corresponding cluster resolutions
1679409380687:head(TP.peak.gene.counts)
1679409382421:head(TP.peak.gene)
1679409385443:# plot only duplicated links and their corresponding cluster resolutions
1679409385448:head(TP.peak.gene.counts)
1679409386608:head(TP.peak.gene)
1679409393145:# plot only duplicated links and their corresponding cluster resolutions
1679409393161:head(TP.peak.gene.counts)
1679409397190:head(TP.peak.gene)
1679409400457:# plot only duplicated links and their corresponding cluster resolutions
1679409400474:head(TP.peak.gene.counts)
1679409427812:head(TP.peak.gene) %>% inner_join(TP.peak.gene.counts, by = c("peak", "gene"))
1679409452281:head(TP.peak.gene)
1679409469838:duplicated(TP.peak.gene)
1679409476811:duplicated(TP.peak.gene)
1679409481269:TP.peak.gene
1679409496086:# Check if the TPs are shared
1679409496092:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679409497229:TP.peak.gene$duplicated <- TP.all %>% dplyr::select(c("peak", "gene")) %>% duplicated()
1679409500066:TP.peak.gene
1679409675167:TP.peak.gene$duplicated <- TP.all %>% dplyr::select(c("peak", "gene")) %>% ifelse(group_by_all() %>% count == 1, FALSE, TRUE)
1679409903156:# Check if the TPs are shared
1679409903224:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679409904955:TP.peak.gene
1679409912791:# count occurrence of each link
1679409912853:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene")) %>% group_by_all() %>% count
1679409914263:TP.peak.gene.counts
1679409920217:# create a column for the pasted peak-gene info
1679409920222:TP.peak.gene$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679409929902:# create a column for the pasted peak-gene info
1679409929909:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679409933170:TP.peak.gene
1679409940857:# join counts info to the dataframe
1679409940865:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene"))
1679409942219:TP.peak.gene
1679409996106:# check whether the link is shared or not
1679409996110:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679409997735:TP.peak.gene
1679410099615:# plot count of shared links vs non-shared links
1679410099620:ggplot(TP.peak.gene %>% distinct(peak, gene, .keep_all = TRUE), aes(shared, fill = shared)) +
1679410099625:geom_bar(stat = "count") +
1679410099631:theme_classic() +
1679410099636:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410099642:labs(title = "Are the links shared?") +
1679410099647:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679410164512:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679410164517:geom_bar(stat = "count") +
1679410164522:theme_classic() +
1679410164526:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410164532:labs(title = "Are the links shared? (all links)") +
1679410164537:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679410167473:p1 + p2
1679410176889:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679410176894:geom_bar(stat = "count") +
1679410176899:theme_classic() +
1679410176905:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410176910:labs(title = "Are the links shared? (all links)") +
1679410176914:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679410177591:p1 + p2
1679410180526:# plot count of shared links vs non-shared links
1679410180530:p1 <- ggplot(TP.peak.gene %>% distinct(peak, gene, .keep_all = TRUE), aes(shared, fill = shared)) +
1679410180535:geom_bar(stat = "count") +
1679410180540:theme_classic() +
1679410180546:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410180551:labs(title = "Are the links shared? (unique links)") +
1679410180556:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679410182281:p1 + p2
1679410206460:# plot count of shared links vs non-shared links
1679410206700:p1 <- ggplot(TP.peak.gene %>% distinct(peak, gene, .keep_all = TRUE), aes(shared, fill = shared)) +
1679410206975:geom_bar(stat = "count") +
1679410207238:theme_classic() +
1679410207372:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410207378:labs(title = "Are the links shared? (unique links)") +
1679410207384:geom_text(stat='count', aes(label=..count..), vjust=-1) +
1679410207391:theme(legend.position = "none")
1679410207717:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679410207721:geom_bar(stat = "count") +
1679410207726:theme_classic() +
1679410207732:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410207737:labs(title = "Are the links shared? (all links)") +
1679410207741:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679410208333:p1 + p2
1679410345755:# plot duplicated vs unique links per cluster resolution
1679410345760:ggplot(TP.peak.gene, aes(as.factor(res), fill = duplicated)) +
1679410345764:geom_bar(stat = "count", position = "dodge") +
1679410345769:theme_classic() +
1679410345773:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410345778:labs(title = "Are the links shared?", x = "Cluster Resolutions")
1679410354264:# plot duplicated vs unique links per cluster resolution
1679410354276:ggplot(TP.peak.gene, aes(as.factor(res), fill = shared)) +
1679410354287:geom_bar(stat = "count", position = "dodge") +
1679410354298:theme_classic() +
1679410354311:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410354325:labs(title = "Are the links shared?", x = "Cluster Resolutions")
1679410397454:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679410397458:geom_bar(stat = "count") +
1679410397463:theme_classic() +
1679410397468:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410397472:labs(title = "Are the links shared? (all links)") +
1679410397478:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679410403545:# plot duplicated vs unique links per cluster resolution
1679410403549:ggplot(TP.peak.gene, aes(as.factor(res), fill = shared)) +
1679410403555:geom_bar(stat = "count", position = "dodge") +
1679410403559:theme_classic() +
1679410403564:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679410403568:labs(title = "Are the links shared?", x = "Cluster Resolutions")
1679410523804:# plot most frequent links across resolutions
1679410523809:ggplot(TP.peak.genes %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679410523814:geom_bar(stat = "identity") +
1679410523820:theme_bw() +
1679410523825:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679410523830:scale_fill_viridis_d() +
1679410523835:labs(y = "count", title = "Most frequent links across resolutions")
1679410528990:# plot most frequent links across resolutions
1679410528996:ggplot(TP.peak.genes %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679410529002:geom_bar(stat = "identity") +
1679410529008:theme_bw() +
1679410529014:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679410529020:scale_fill_viridis_d() +
1679410529025:labs(y = "count", title = "Most frequent links across resolutions")
1679410546250:# plot most frequent links across resolutions
1679410546256:ggplot(TP.peak.gene %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679410546263:geom_bar(stat = "identity") +
1679410546270:theme_bw() +
1679410546277:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679410546283:scale_fill_viridis_d() +
1679410546289:labs(y = "count", title = "Most frequent links across resolutions")
1679410563533:TP.peak.gene %>% arrange(desc(n)) %>% head(10)
1679410575215:# plot most frequent links across resolutions
1679410575221:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679410575226:geom_bar(stat = "identity") +
1679410575231:theme_bw() +
1679410575236:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679410575242:scale_fill_viridis_d() +
1679410575247:labs(y = "count", title = "Most frequent links across resolutions")
1679410602229:# plot most frequent links across resolutions
1679410602234:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679410603145:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679410603152:geom_bar(stat = "identity") +
1679410603157:theme_bw() +
1679410603163:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679410603168:scale_fill_viridis_d() +
1679410603174:labs(y = "count", title = "Most frequent links across resolutions")
1679410971693:# plot only duplicated links and their corresponding cluster resolutions
1679410971699:ggplot(TP.peak.gene %>% filter(shared = TRUE), aes(link, n)) +
1679410971705:geom_bar(stat = "identity")
1679410976796:# plot only duplicated links and their corresponding cluster resolutions
1679410976801:ggplot(TP.peak.gene %>% filter(shared == TRUE), aes(link, n)) +
1679410976806:geom_bar(stat = "identity")
1679410985821:# plot only duplicated links and their corresponding cluster resolutions
1679410985826:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE), aes(link, n)) +
1679410985831:geom_bar(stat = "identity")
1679411045750:TP.peak.gene %>% dplyr::filter(shared == TRUE)
1679411102637:# plot most frequent links across resolutions
1679411102643:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679411497766:# plot only duplicated links and their corresponding cluster resolutions
1679411497775:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = res)) +
1679411497784:geom_bar(stat = "identity")
1679411513944:# plot only duplicated links and their corresponding cluster resolutions
1679411513958:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(30), aes(x = link, y = n, fill = res)) +
1679411513981:geom_bar(stat = "identity")
1679411522682:# plot only duplicated links and their corresponding cluster resolutions
1679411522690:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(200), aes(x = link, y = n, fill = res)) +
1679411522697:geom_bar(stat = "identity")
1679411531086:# plot only duplicated links and their corresponding cluster resolutions
1679411531093:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = res)) +
1679411531099:geom_bar(stat = "identity")
1679411543381:# plot only duplicated links and their corresponding cluster resolutions
1679411543389:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411543397:geom_bar(stat = "identity")
1679411592406:# plot only duplicated links and their corresponding cluster resolutions
1679411592414:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411592424:geom_bar(stat = "identity") +
1679411592431:theme_bw() +
1679411592438:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411592449:labs(y = "count", title = "Most frequent links across resolutions")
1679411667415:# plot only duplicated links and their corresponding cluster resolutions
1679411667431:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411667445:geom_bar(stat = "identity") +
1679411667453:theme_bw() +
1679411667460:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411667467:labs(y = "count", title = "Most frequent links across resolutions") +
1679411667478:scale_fill_brewer(palette = "paired")
1679411675754:# plot only duplicated links and their corresponding cluster resolutions
1679411675769:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411675784:geom_bar(stat = "identity") +
1679411675800:theme_bw() +
1679411675818:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411675829:labs(y = "count", title = "Most frequent links across resolutions") +
1679411675844:scale_fill_brewer(palette = paired)
1679411679001:# plot only duplicated links and their corresponding cluster resolutions
1679411679008:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411679016:geom_bar(stat = "identity") +
1679411679024:theme_bw() +
1679411679030:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411679040:labs(y = "count", title = "Most frequent links across resolutions") +
1679411679047:scale_fill_brewer(palette = paired)
1679411698937:# plot only duplicated links and their corresponding cluster resolutions
1679411698946:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411698958:geom_bar(stat = "identity") +
1679411698966:theme_bw() +
1679411698977:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411698986:labs(y = "count", title = "Most frequent links across resolutions") +
1679411698993:scale_fill_brewer(palette = "Set3")
1679411730131:# plot only duplicated links and their corresponding cluster resolutions
1679411730136:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411730141:geom_bar(stat = "identity") +
1679411730146:theme_bw() +
1679411730151:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411730156:labs(y = "count", title = "Most frequent links across resolutions") +
1679411730161:scale_fill_brewer(palette = "YlGn")
1679411750143:# plot only duplicated links and their corresponding cluster resolutions
1679411750148:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411750154:geom_bar(stat = "identity") +
1679411750159:theme_bw() +
1679411750164:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411750169:labs(y = "count", title = "Most frequent links across resolutions") +
1679411750174:scale_fill_brewer("YlGn")
1679411754458:# plot only duplicated links and their corresponding cluster resolutions
1679411754469:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411754479:geom_bar(stat = "identity") +
1679411754490:theme_bw() +
1679411754502:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411754513:labs(y = "count", title = "Most frequent links across resolutions") +
1679411754523:scale_fill_brewer()
1679411875477:# plot only duplicated links and their corresponding cluster resolutions
1679411875484:colourCount = length(unique(TP.peak.gene$res))
1679411877453:getPalette = colorRampPalette(brewer.pal(15, "Set1"))
1679411910957:# plot only duplicated links and their corresponding cluster resolutions
1679411910962:library(RColorBrewer)
1679411912481:colourCount = length(unique(TP.peak.gene$res))
1679411913051:getPalette = colorRampPalette(brewer.pal(15, "Set1"))
1679411921290:getPalette = colorRampPalette(brewer.pal(9, "Set1"))
1679411977962:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = getPalette(colourCount))) +
1679411977967:geom_bar(stat = "identity") +
1679411977972:theme_bw() +
1679411977977:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411977981:labs(y = "count", title = "Most frequent links across resolutions") +
1679411977985:scale_fill_brewer()
1679411985779:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411985784:geom_bar(stat = "identity") +
1679411985789:theme_bw() +
1679411985794:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411985799:labs(y = "count", title = "Most frequent links across resolutions") +
1679411985804:scale_fill_brewer()
1679411994623:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679411994627:geom_bar(stat = "identity") +
1679411994632:theme_bw() +
1679411994636:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679411994641:labs(y = "count", title = "Most frequent links across resolutions") +
1679411994657:TP.peak.gene
1679412000631:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412000635:geom_bar(stat = "identity") +
1679412000640:theme_bw() +
1679412000645:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412000650:labs(y = "count", title = "Most frequent links across resolutions")
1679412030305:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = res)) +
1679412030311:geom_bar(stat = "identity") +
1679412030316:theme_bw() +
1679412030321:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412030326:labs(y = "count", title = "Most frequent links across resolutions") +
1679412030331:scale_color_brewer(palette = "magma")
1679412050679:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = res)) +
1679412050697:geom_bar(stat = "identity") +
1679412050702:theme_bw() +
1679412050707:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412050716:labs(y = "count", title = "Most frequent links across resolutions") +
1679412050726:scale_color_brewer(palette = "YlGn")
1679412061802:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = res)) +
1679412061807:geom_bar(stat = "identity") +
1679412061812:theme_bw() +
1679412061817:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412061821:labs(y = "count", title = "Most frequent links across resolutions") +
1679412061826:scale_fill_brewer(palette = "YlGn")
1679412088499:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = res)) +
1679412088504:geom_bar(stat = "identity") +
1679412088509:theme_bw() +
1679412088514:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412088519:labs(y = "count", title = "Most frequent links across resolutions")
1679412103134:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412103140:geom_bar(stat = "identity") +
1679412103145:theme_bw() +
1679412103150:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412103156:labs(y = "count", title = "Most frequent links across resolutions")
1679412169227:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412169238:geom_bar(stat = "identity") +
1679412169243:theme_bw() +
1679412169248:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412169254:labs(y = "count", title = "Most frequent links across resolutions") +
1679412169259:scale_fill_viridis_d()
1679412261302:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412261309:geom_bar(stat = "identity") +
1679412261315:theme_bw() +
1679412261322:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412261327:labs(y = "count", title = "Most frequent links across resolutions") +
1679412261334:scale_fill_binned()
1679412271077:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412271082:geom_bar(stat = "identity") +
1679412271086:theme_bw() +
1679412271092:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412271097:labs(y = "count", title = "Most frequent links across resolutions") +
1679412271102:scale_fill_discrete()
1679412291811:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412291816:geom_bar(stat = "identity") +
1679412291821:theme_bw() +
1679412291826:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412291831:labs(y = "count", title = "Most frequent links across resolutions") +
1679412291835:scale_fill_()
1679412297916:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412297921:geom_bar(stat = "identity") +
1679412297926:theme_bw() +
1679412297931:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412297935:labs(y = "count", title = "Most frequent links across resolutions") +
1679412297940:scale_fill_()
1679412302867:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412302872:geom_bar(stat = "identity") +
1679412302878:theme_bw() +
1679412302884:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412302892:labs(y = "count", title = "Most frequent links across resolutions") +
1679412302897:scale_fill_distiller()
1679412314246:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412314251:geom_bar(stat = "identity") +
1679412314256:theme_bw() +
1679412314260:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412314265:labs(y = "count", title = "Most frequent links across resolutions") +
1679412314270:scale_fill_fermenter()
1679412322547:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412322553:geom_bar(stat = "identity") +
1679412322559:theme_bw() +
1679412322565:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412322570:labs(y = "count", title = "Most frequent links across resolutions") +
1679412322576:scale_fill_hue()
1679412336412:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412336418:geom_bar(stat = "identity") +
1679412336424:theme_bw() +
1679412336430:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412336436:labs(y = "count", title = "Most frequent links across resolutions") +
1679412336442:scale_fill_steps()
1679412340733:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412340738:geom_bar(stat = "identity") +
1679412340743:theme_bw() +
1679412340747:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412340752:labs(y = "count", title = "Most frequent links across resolutions") +
1679412340756:scale_fill_steps2()
1679412348030:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412348042:geom_bar(stat = "identity") +
1679412348047:theme_bw() +
1679412348052:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412348057:labs(y = "count", title = "Most frequent links across resolutions") +
1679412348061:scale_fill_manual()
1679412460518:# plot only duplicated links and their corresponding cluster resolutions
1679412460523:library(RColorBrewer)
1679412461310:palette3_info <- brewer.pal.info[brewer.pal.info$category == "qual", ]  # Extract color info
1679412462085:palette3_all <- unlist(mapply(brewer.pal,                     # Create vector with all colors
1679412462090:palette3_info$maxcolors,
1679412462104:rownames(palette3_info)))
1679412463311:palette3_all
1679412464762:palette3 <- sample(palette3_all, n_colors)                    # Sample colors
1679412470970:palette3 <- sample(palette3_all, 15)                    # Sample colors
1679412472276:palette3
1679412474010:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412474015:geom_bar(stat = "identity") +
1679412474020:theme_bw() +
1679412474025:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412474030:labs(y = "count", title = "Most frequent links across resolutions") +
1679412474035:scale_fill_manual(palette3)
1679412479709:palette3
1679412486562:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412486567:geom_bar(stat = "identity") +
1679412486572:theme_bw() +
1679412486576:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412486581:labs(y = "count", title = "Most frequent links across resolutions") +
1679412486586:scale_fill_manual(palette3)
1679412491360:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412491365:geom_bar(stat = "identity") +
1679412491370:theme_bw() +
1679412491375:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412491380:labs(y = "count", title = "Most frequent links across resolutions") +
1679412491384:scale_fill_manual(values = palette3)
1679412520385:palette3 <- sample(palette3_all, 15)                    # Sample colors
1679412520938:palette3
1679412521729:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412521733:geom_bar(stat = "identity") +
1679412521738:theme_bw() +
1679412521742:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412521747:labs(y = "count", title = "Most frequent links across resolutions") +
1679412521753:scale_fill_manual(values = palette3)
1679412571255:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412571262:geom_bar(stat = "identity") +
1679412571272:theme_bw() +
1679412571284:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412571290:labs(y = "count", title = "Most frequent links across resolutions") +
1679412571300:scale_fill_brewer(palette = "Spectral")
1679412611818:# plot only duplicated links and their corresponding cluster resolutions
1679412611824:library(RColorBrewer)
1679412612198:palette3_info <- brewer.pal.info[brewer.pal.info$category == "qual", ]  # Extract color info
1679412612554:palette3_all <- unlist(mapply(brewer.pal,                     # Create vector with all colors
1679412612561:palette3_info$maxcolors,
1679412612567:rownames(palette3_info)))
1679412613036:palette3_all
1679412613494:palette3 <- sample(palette3_all, 15)                    # Sample colors
1679412613992:palette3
1679412614734:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(100), aes(x = link, y = n, fill = as.factor(res))) +
1679412614739:geom_bar(stat = "identity") +
1679412614744:theme_bw() +
1679412614749:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412614754:labs(y = "count", title = "Most frequent links across resolutions") +
1679412614759:scale_fill_manual(values = palette3)
1679412764144:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = as.factor(res))) +
1679412764149:geom_bar(stat = "identity") +
1679412764154:theme_bw() +
1679412764159:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679412764164:labs(y = "count", title = "Most frequent links across resolutions") +
1679412764169:scale_fill_manual(values = palette3)
1679412981732:View(TP.peak.gene)
1679413033984:TP.peak.gene$res
1679413043693:as.factor(TP.peak.gene$res)
1679413087701:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = as.character(res))) +
1679413087708:geom_bar(stat = "identity") +
1679413087714:theme_bw() +
1679413087720:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679413087727:labs(y = "count", title = "Most frequent links across resolutions") +
1679413087733:scale_fill_manual(values = palette3)
1679413094036:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = as.character(res))) +
1679413094042:geom_bar(stat = "identity") +
1679413094047:theme_bw() +
1679413094052:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679413094058:labs(y = "count", title = "Most frequent links across resolutions") +
1679413094064:scale_fill_manual(values = palette3)
1679413108747:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)), aes(x = link, y = n, fill = as.character(res))) +
1679413108752:geom_bar(stat = "identity") +
1679413108757:theme_bw() +
1679413108762:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679413108767:labs(y = "count", title = "Most frequent links across resolutions") +
1679413108771:scale_fill_manual(values = palette3)
1679413117319:palette3 <- sample(palette3_all, 16)                    # Sample colors
1679413117875:palette3
1679413118582:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% arrange(desc(n)), aes(x = link, y = n, fill = as.character(res))) +
1679413118587:geom_bar(stat = "identity") +
1679413118591:theme_bw() +
1679413118596:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679413118600:labs(y = "count", title = "Most frequent links across resolutions") +
1679413118605:scale_fill_manual(values = palette3)
1679414712719:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679414712725:geom_bar(stat = "identity") +
1679414712730:theme_bw() +
1679414712735:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679414712739:labs(y = "count", title = "Most frequent links across resolutions") +
1679414712744:scale_fill_manual(values = palette3)
1679414727100:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679414727110:geom_point() +
1679414727116:theme_bw() +
1679414727121:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679414727126:labs(y = "count", title = "Most frequent links across resolutions") +
1679414727132:scale_fill_manual(values = palette3)
1679414756375:TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% unique()
1679414825479:TP.peak.gene
1679414855460:TP.peak.gene %>% dplyr::filter(shared == TRUE)
1679414909387:TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% select(link)
1679414914860:TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% select("link")
1679414930908:TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% dplyr::select(select)
1679414936410:TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% dplyr::select(link)
1679414943454:TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% dplyr::select(link) %>% unique
1679414946860:TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% dplyr::select(link) %>% unique()
1679415020193:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679415020199:geom_bar(stat = "identity") +
1679415020204:theme_bw() +
1679415020209:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415020216:labs(y = "count", title = "Most frequent links across resolutions") +
1679415020221:scale_fill_manual(values = palette3)
1679415030184:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679415030190:geom_bar(stat = "count") +
1679415030197:theme_bw() +
1679415030204:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415030210:labs(y = "count", title = "Most frequent links across resolutions") +
1679415030217:scale_fill_manual(values = palette3)
1679415063096:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679415063102:geom_col +
1679415063110:theme_bw() +
1679415063116:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415063122:labs(y = "count", title = "Most frequent links across resolutions") +
1679415063127:scale_fill_manual(values = palette3)
1679415066476:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679415066483:geom_col() +
1679415066491:theme_bw() +
1679415066500:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415066506:labs(y = "count", title = "Most frequent links across resolutions") +
1679415066512:scale_fill_manual(values = palette3)
1679415112236:# plot most frequent links across resolutions
1679415112243:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679415114047:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679415114063:geom_bar(stat = "identity") +
1679415114070:theme_bw() +
1679415114075:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679415114083:scale_fill_viridis_d() +
1679415114088:labs(y = "count", title = "Most frequent links across resolutions")
1679415124579:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679415124584:geom_col() +
1679415124590:theme_bw() +
1679415124595:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415124601:labs(y = "count", title = "Most frequent links across resolutions") +
1679415124608:scale_fill_manual(values = palette3)
1679415364512:TP.peak.gene.counts$shared <- ifelse(TP.peak.gene.counts$n > 1, TRUE, FALSE)
1679415369501:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679415369508:geom_col() +
1679415369515:theme_bw() +
1679415369524:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415369532:labs(y = "count", title = "Most frequent links across resolutions") +
1679415369540:scale_fill_manual(values = palette3)
1679415386685:TP.peak.gene.counts
1679415475118:# count occurrence of each link
1679415475123:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(c("peak", "gene")) %>% count
1679415557330:# count occurrence of each link
1679415557335:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by("peak", "gene") %>% count
1679415561063:# Check if the TPs are shared
1679415561067:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679415561749:# count occurrence of each link
1679415561754:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by("peak", "gene") %>% count
1679415562829:# create a column for the pasted peak-gene info
1679415562834:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679415563410:# join counts info to the dataframe
1679415563415:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene"))
1679415576014:TP.peak.gene
1679415589016:TP.peak.gene.counts
1679415601922:# count occurrence of each link
1679415601927:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679415604383:TP.peak.gene.counts
1679415610062:# join counts info to the dataframe
1679415610067:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene"))
1679415611685:# check whether the link is shared or not
1679415611690:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679415613829:# plot count of shared links vs non-shared links
1679415613835:p1 <- ggplot(TP.peak.gene %>% distinct(peak, gene, .keep_all = TRUE), aes(shared, fill = shared)) +
1679415613840:geom_bar(stat = "count") +
1679415613844:theme_classic() +
1679415613849:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679415613854:labs(title = "Are the links shared? (unique links)") +
1679415613859:geom_text(stat='count', aes(label=..count..), vjust=-1) +
1679415613864:theme(legend.position = "none")
1679415616744:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679415616749:geom_bar(stat = "count") +
1679415616755:theme_classic() +
1679415616760:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679415616765:labs(title = "Are the links shared? (all links)") +
1679415616771:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679415617847:p1 + p2
1679415631658:# plot duplicated vs unique links per cluster resolution
1679415631662:ggplot(TP.peak.gene, aes(as.factor(res), fill = shared)) +
1679415631667:geom_bar(stat = "count", position = "dodge") +
1679415631672:theme_classic() +
1679415631677:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679415631684:labs(title = "Are the links shared?", x = "Cluster Resolutions")
1679415649689:# plot most frequent links across resolutions
1679415649694:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679415650252:TP.peak.gene.counts$shared <- ifelse(TP.peak.gene.counts$n > 1, TRUE, FALSE)
1679415650930:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679415650935:geom_bar(stat = "identity") +
1679415650940:theme_bw() +
1679415650945:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679415650950:scale_fill_viridis_d() +
1679415650954:labs(y = "count", title = "Most frequent links across resolutions")
1679415652105:# plot only duplicated links and their corresponding cluster resolutions
1679415652110:library(RColorBrewer)
1679415652287:palette3_info <- brewer.pal.info[brewer.pal.info$category == "qual", ]  # Extract color info
1679415652445:palette3_all <- unlist(mapply(brewer.pal,                     # Create vector with all colors
1679415652449:palette3_info$maxcolors,
1679415652453:rownames(palette3_info)))
1679415652985:palette3_all
1679415653308:palette3 <- sample(palette3_all, 16)                    # Sample colors
1679415653649:palette3
1679415655199:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.character(res))) +
1679415655204:geom_col() +
1679415655210:theme_bw() +
1679415655216:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415655221:labs(y = "count", title = "Most frequent links across resolutions") +
1679415655225:scale_fill_manual(values = palette3)
1679415663634:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = res)) +
1679415663639:geom_col() +
1679415663644:theme_bw() +
1679415663649:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415663655:labs(y = "count", title = "Most frequent links across resolutions") +
1679415663660:scale_fill_manual(values = palette3)
1679415672127:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.factor(res))) +
1679415672132:geom_col() +
1679415672137:theme_bw() +
1679415672142:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415672147:labs(y = "count", title = "Most frequent links across resolutions") +
1679415672151:scale_fill_manual(values = palette3)
1679415677476:TP.peak.gene.counts
1679415695413:# check whether the link is shared or not
1679415695417:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679415697775:TP.peak.gene
1679415778696:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.factor(res))) +
1679415778701:geom_col() +
1679415778707:theme_bw() +
1679415778712:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415778717:labs(y = "count", title = "Most frequent links across resolutions") +
1679415778722:scale_fill_manual(values = palette3)
1679415789610:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) , aes(x = link, y = n, fill = as.factor(res))) +
1679415789618:geom_col() +
1679415789624:theme_bw() +
1679415789629:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679415789634:labs(y = "count", title = "Most frequent links across resolutions") +
1679415789640:scale_fill_manual(values = palette3)
1679415796322:TP.peak.gene.counts
1679415805807:TP.all
1679415806498:# Check if the TPs are shared
1679415806503:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679415807064:# count occurrence of each link
1679415807069:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679415807574:# create a column for the pasted peak-gene info
1679415807579:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679415808079:# join counts info to the dataframe
1679415808084:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene"))
1679415808575:# check whether the link is shared or not
1679415808580:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679415819368:TP.peak.gene.counts
1679415827041:# count occurrence of each link
1679415827046:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene,res) %>% count
1679415828886:TP.peak.gene.counts
1679415858971:# count occurrence of each link
1679415858976:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679415860245:TP.peak.gene.counts
1679415937396:# Check if the TPs are shared
1679415937441:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679415937972:# count occurrence of each link
1679415937978:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count %>% ungroup()
1679415939907:TP.peak.gene.counts
1679415945030:# count occurrence of each link
1679415945034:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679415946450:# Check if the TPs are shared
1679415946455:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679415946927:# count occurrence of each link
1679415946933:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679415948883:TP.peak.gene.counts
1679416190568:TP.peak.gene
1679416202540:# Check if the TPs are shared
1679416202546:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679416205114:# count occurrence of each link
1679416205119:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679416205683:# create a column for the pasted peak-gene info
1679416205689:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679416206212:# join counts info to the dataframe
1679416206217:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene"))
1679416206719:# check whether the link is shared or not
1679416206724:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679416208889:TP.peak.gene
1679416290358:TP.peak.gene.counts
1679416452813:ggplot(TP.peak.gene %>% dplyr::filter(res == r), aes(link)) +
1679416452818:geom_bar(stat = "identity")
1679416455096:# store
1679416455101:for (r in resolutions){
1679416455106:ggplot(TP.peak.gene %>% dplyr::filter(res == r), aes(link)) +
1679416455111:geom_bar(stat = "identity")
1679416455115:}
1679416490151:for (r in resolutions){
1679416490157:p1 <- ggplot(TP.peak.gene %>% dplyr::filter(res == r), aes(link)) +
1679416490161:geom_bar(stat = "identity")
1679416490166:plots <- c(plots, p1)
1679416490172:}
1679416493129:# store plots
1679416493133:plots <- c()
1679416493854:for (r in resolutions){
1679416493858:p1 <- ggplot(TP.peak.gene %>% dplyr::filter(res == r), aes(link)) +
1679416493863:geom_bar(stat = "identity")
1679416493868:plots <- c(plots, p1)
1679416493873:}
1679416496747:plots
1679416505851:plots[1]
1679416509711:plots[1]
1679416525326:for (r in resolutions){
1679416525332:p1 <- ggplot(TP.peak.gene %>% dplyr::filter(res == r), aes(link)) +
1679416525337:geom_bar(stat = "identity")
1679416525342:p1 + p1
1679416525347:}
1679416536763:break
1679416538535:for (r in resolutions){
1679416538541:p1 <- ggplot(TP.peak.gene %>% dplyr::filter(res == r), aes(link)) +
1679416538547:geom_bar(stat = "identity")
1679416538552:p1
1679416538557:break
1679416538562:}
1679416597221:ggplot(TP.peak.gene, aes(x = link)) +
1679416597226:geom_bar(stat = "identity") +
1679416597232:facet_grid(.~ res)
1679416606900:ggplot(TP.peak.gene, aes(x = link)) +
1679416606905:geom_bar(stat = "identity") +
1679416606911:facet_wrap(res)
1679416616955:ggplot(TP.peak.gene, aes(x = link, y = n)) +
1679416616961:geom_bar(stat = "identity") +
1679416616967:facet_wrap(res)
1679416632794:TP.peak.gene
1679416663074:ggplot(TP.peak.gene, aes(x = link, y = n)) +
1679416663079:geom_bar(stat = "identity") +
1679416663084:facet_wrap(as.factor(res))
1679416720801:ggplot(TP.peak.gene, aes(x = link, y = n)) +
1679416720810:geom_bar(stat = "identity") +
1679416720817:facet_wrap(vars(as.factor(res)))
1679416848471:ggplot(TP.peak.gene.counts, aes(x = link, y = n)) +
1679416848481:geom_bar(stat = "identity") +
1679416848491:facet_wrap(vars(as.factor(res)))
1679416879987:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679416881636:ggplot(TP.peak.gene.counts, aes(x = link, y = n)) +
1679416881641:geom_bar(stat = "identity") +
1679416881646:facet_wrap(vars(as.factor(res)))
1679416891835:TP.peak.gene.counts
1679416961101:ggplot(TP.peak.gene.counts %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679416961106:geom_bar(stat = "count") +
1679416961111:theme_bw() +
1679416961117:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679416961122:labs(y = "count", title = "Most frequent links across resolutions") +
1679416961127:scale_fill_manual(values = palette3)
1679416971632:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679416971637:geom_bar(stat = "count") +
1679416971642:theme_bw() +
1679416971647:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679416971652:labs(y = "count", title = "Most frequent links across resolutions") +
1679416971657:scale_fill_manual(values = palette3)
1679417019104:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679417019110:geom_bar(stat = "count") +
1679417019115:theme_bw() +
1679417019120:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679417019125:labs(y = "count", title = "Most frequent links across resolutions", fill = "Resolutions") +
1679417019130:scale_fill_manual(values = palette3)
1679417073010:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679417073015:geom_bar(stat = "identity") +
1679417073020:theme_bw() +
1679417073025:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679417073030:scale_fill_viridis_d() +
1679417073037:labs(y = "count", title = "Most frequent links across resolutions", caption = "Top 10 Most Frequent Links")
1679417339566:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679417339572:geom_bar(stat = "count") +
1679417339577:theme_bw() +
1679417339582:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679417339587:labs(y = "count", title = "To which eGRNs do the shared links belong?", fill = "Resolutions") +
1679417339592:scale_fill_manual(values = palette3)
1679417380816:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679417380821:geom_bar(stat = "count") +
1679417380826:theme_bw() +
1679417380832:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679417380837:labs(y = "count", title = "To which eGRNs do the shared links belong?", fill = "Resolutions", caption = "35 Different Links") +
1679417380842:scale_fill_manual(values = palette3)
1679417455268:# get highly represented links across resolutions
1679417455279:deg.th <- 5
1679417455757:high.rep.pg.links <-  all.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417456205:# overview of dataframes
1679417456225:## links from different cluster resolutions
1679417456238:head(merged.all.links) # all links merged
1679417458168:# get highly represented links across resolutions
1679417458173:deg.th <- 5
1679417477501:high.rep.pg.links <-  all.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417492895:all.links
1679417498703:# get highly represented links across resolutions
1679417498710:deg.th <- 5
1679417500002:high.rep.pg.links <-  all.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417522364:# create binary df with all peak-genes links and resolutions as columns
1679417522369:df_list2 <- list(PEAK.GENE.0.1, PEAK.GENE.0.25, PEAK.GENE.0.5, PEAK.GENE.0.75, PEAK.GENE.1, PEAK.GENE.2, PEAK.GENE.3, PEAK.GENE.4,
1679417522374:PEAK.GENE.5, PEAK.GENE.6, PEAK.GENE.7, PEAK.GENE.8, PEAK.GENE.9, PEAK.GENE.10, PEAK.GENE.12, PEAK.GENE.14,
1679417522379:PEAK.GENE.16, PEAK.GENE.18, PEAK.GENE.20)
1679417522942:peak.gene.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679417523695:colnames(peak.gene.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679417524123:peak.gene.links
1679417524415:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679417524718:names <- c()
1679417524940:i = 1
1679417525301:z = 1
1679417525645:for (df in df_list2){
1679417525650:res <- resolutions[i]
1679417525657:for (j in 1:nrow(df)){
1679417525663:name <- paste(df[j,1], df[j,2], sep = "_")
1679417525668:if (name %in% rownames(peak.gene.links)) {
1679417525673:peak.gene.links[name, i] = 1
1679417525678:} else {
1679417525684:binary <- rep(0, 19)
1679417525689:binary[i] <- 1
1679417525695:names(binary) <- resolutions
1679417525700:peak.gene.links <- rbind(peak.gene.links, binary)
1679417525705:rownames(peak.gene.links)[z] <- name
1679417525710:z = z + 1
1679417525716:}
1679417525721:binary <- c()
1679417525726:name <- ""
1679417525732:}
1679417525737:i = i+1
1679417525742:}
1679417529883:colnames(peak.gene.links) <- resolutions
1679417529890:peak.gene.links
1679417531846:# upset plot
1679417531852:upset(peak.gene.links, sets = as.character(resolutions), keep.order = TRUE, nintersects = NA)
1679417581846:# get highly represented links across resolutions
1679417581851:deg.th <- 5
1679417582335:high.rep.pg.links <-  all.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417583260:# overview of dataframes
1679417583266:## links from different cluster resolutions
1679417583272:head(merged.all.links) # all links merged
1679417600865:# Merge all TF-peak-gene interactions
1679417600871:merged.all.links <- do.call("rbind", df_list)
1679417607422:merged.all.links <- merged.all.links %>% cbind(res = rep(resolutions, times = df.lens))
1679417612666:# create binary df with all links and resolutions as columns
1679417612671:df_list <- list(TF.PEAK.GENE.0.1, TF.PEAK.GENE.0.25, TF.PEAK.GENE.0.5, TF.PEAK.GENE.0.75, TF.PEAK.GENE.1, TF.PEAK.GENE.2, TF.PEAK.GENE.3, TF.PEAK.GENE.4,
1679417612676:TF.PEAK.GENE.5, TF.PEAK.GENE.6, TF.PEAK.GENE.7, TF.PEAK.GENE.8, TF.PEAK.GENE.9, TF.PEAK.GENE.10, TF.PEAK.GENE.12, TF.PEAK.GENE.14,
1679417612681:TF.PEAK.GENE.16, TF.PEAK.GENE.18, TF.PEAK.GENE.20)
1679417613571:all.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679417614231:colnames(all.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679417615676:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679417616248:names <- c()
1679417616636:i = 1
1679417617103:z = 1
1679417617558:for (df in df_list){
1679417617563:res <- resolutions[i]
1679417617567:for (j in 1:nrow(df)){
1679417617572:name <- paste(df[j,1], df[j,2], sep = "_")
1679417617576:name <- paste(name, df[j,3], sep = "_")
1679417617581:if (name %in% rownames(all.links)) {
1679417617585:all.links[name, i] = 1
1679417617590:} else {
1679417617594:binary <- rep(0, 19)
1679417617598:binary[i] <- 1
1679417617603:names(binary) <- resolutions
1679417617608:all.links <- rbind(all.links, binary)
1679417617612:rownames(all.links)[z] <- name
1679417617617:z = z + 1
1679417617621:}
1679417617625:binary <- c()
1679417617630:name <- ""
1679417617635:}
1679417617639:i = i+1
1679417617644:}
1679417668149:colnames(all.links) <- resolutions
1679417668678:all.links
1679417669956:# upset plot
1679417669961:all.links.min3 <- all.links %>% dplyr::filter(rowSums(.) > 3)
1679417670234:all.links.min3 %>% colnames() %>% class() == resolutions %>%  class()
1679417670658:colnames(all.links.min3) <- as.character(resolutions)
1679417671703:upset(all.links, sets = as.character(resolutions[1:length(resolutions)]), keep.order = TRUE, nintersects = NA)
1679417674811:# add resolution id column in all tf-peak-gene dfs
1679417674817:df.lens <- c()
1679417675191:for (df in df_list){
1679417675196:df.lens <- c(df.lens, nrow(df))
1679417675200:}
1679417675773:# Merge all TF-peak-gene interactions
1679417675778:merged.all.links <- do.call("rbind", df_list)
1679417676455:merged.all.links <- merged.all.links %>% cbind(res = rep(resolutions, times = df.lens))
1679417676862:merged.all.links
1679417677406:# Reduce TF.name to just the name
1679417677410:new.TFs <- c()
1679417677934:for (TF in merged.all.links$TF.name){
1679417677938:new.TFs <- c(new.TFs, strsplit(TF, "[.]")[[1]][1])
1679417677943:}
1679417678480:merged.all.links$TF <- new.TFs
1679417678987:ggplot(merged.all.links %>% dplyr::filter(res %in% resolutions[10:19]), aes(TF, fill = as.factor(res))) +
1679417678993:geom_bar(stat = "count", position = "stack") +
1679417678998:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679417683844:# create binary df with all peak-genes links and resolutions as columns
1679417683852:df_list2 <- list(PEAK.GENE.0.1, PEAK.GENE.0.25, PEAK.GENE.0.5, PEAK.GENE.0.75, PEAK.GENE.1, PEAK.GENE.2, PEAK.GENE.3, PEAK.GENE.4,
1679417683860:PEAK.GENE.5, PEAK.GENE.6, PEAK.GENE.7, PEAK.GENE.8, PEAK.GENE.9, PEAK.GENE.10, PEAK.GENE.12, PEAK.GENE.14,
1679417683876:PEAK.GENE.16, PEAK.GENE.18, PEAK.GENE.20)
1679417684880:peak.gene.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679417685734:colnames(peak.gene.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679417689079:peak.gene.links
1679417689882:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679417690406:names <- c()
1679417701231:# get highly represented links across resolutions
1679417701236:deg.th <- 5
1679417702067:high.rep.pg.links <-  all.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417703066:# overview of dataframes
1679417703073:## links from different cluster resolutions
1679417703078:head(merged.all.links) # all links merged
1679417704130:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679417704845:## pcHiC links
1679417704850:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679417705676:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679417705686:high.rep.links.pcHiC <- high.rep.pg.links
1679417706468:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679417707135:high.rep.links.pcHiC$pcHiC <- pcHiC
1679417707980:# format TP.all peak-gene links
1679417707987:pchic.links <- c()
1679417708829:for (i in 1:nrow(TP.all)){
1679417708835:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679417708841:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679417708847:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679417708853:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679417708859:pchic.links <- c(pchic.links, pchic.link)
1679417708866:}
1679417709994:pchic.links
1679417710800:# find links that are in pchic data
1679417710842:links.in.pchic <- c()
1679417711436:for (i in 1:nrow(high.rep.pg.links)){
1679417711451:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679417711470:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679417711488:if (rep.link %in% pchic.links) {
1679417711497:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679417711504:links.in.pchic <- c(links.in.pchic, rep.link)
1679417711520:}
1679417711529:}
1679417712470:print(links.in.pchic)
1679417713096:ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679417713101:geom_bar(stat = "count") +
1679417713110:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679417713118:theme_bw() +
1679417713125:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679417713132:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679417724549:print(links.in.pchic)
1679417733610:# get highly represented links across resolutions
1679417733616:deg.th <- 5
1679417734468:high.rep.pg.links <-  all.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417737404:high.rep.pg.links
1679417741416:high.rep.pg.links
1679417744552:# get highly represented links across resolutions
1679417744809:deg.th <- 1
1679417747011:high.rep.pg.links <-  all.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417748293:high.rep.pg.links
1679417755102:all.links
1679417779672:high.rep.pg.links <-  peak.gene.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417780492:high.rep.pg.links
1679417940448:high.rep.pg.links <-  peak.gene.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679417941763:high.rep.pg.links
1679417963057:rowSums(peak.gene.links[,1:ncol(peak.gene.links)])
1679417973906:rowSums(peak.gene.links[,1:ncol(peak.gene.links)])
1679417986127:rowSums(peak.gene.links)
1679417989783:rowSums(peak.gene.links)
1679417990529:peak.gene.links
1679418011719:# create binary df with all peak-genes links and resolutions as columns
1679418011724:df_list2 <- list(PEAK.GENE.0.1, PEAK.GENE.0.25, PEAK.GENE.0.5, PEAK.GENE.0.75, PEAK.GENE.1, PEAK.GENE.2, PEAK.GENE.3, PEAK.GENE.4,
1679418011729:PEAK.GENE.5, PEAK.GENE.6, PEAK.GENE.7, PEAK.GENE.8, PEAK.GENE.9, PEAK.GENE.10, PEAK.GENE.12, PEAK.GENE.14,
1679418011735:PEAK.GENE.16, PEAK.GENE.18, PEAK.GENE.20)
1679418012137:peak.gene.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679418012532:colnames(peak.gene.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679418012917:peak.gene.links
1679418013322:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679418013941:names <- c()
1679418014579:i = 1
1679418015160:z = 1
1679418015681:for (df in df_list2){
1679418015686:res <- resolutions[i]
1679418015691:for (j in 1:nrow(df)){
1679418015697:name <- paste(df[j,1], df[j,2], sep = "_")
1679418015703:if (name %in% rownames(peak.gene.links)) {
1679418015708:peak.gene.links[name, i] = 1
1679418015714:} else {
1679418015720:binary <- rep(0, 19)
1679418015725:binary[i] <- 1
1679418015731:names(binary) <- resolutions
1679418015736:peak.gene.links <- rbind(peak.gene.links, binary)
1679418015741:rownames(peak.gene.links)[z] <- name
1679418015747:z = z + 1
1679418015751:}
1679418015756:binary <- c()
1679418015761:name <- ""
1679418015766:}
1679418015771:i = i+1
1679418015776:}
1679418021790:colnames(peak.gene.links) <- resolutions
1679418022520:peak.gene.links
1679418023850:# upset plot
1679418023855:upset(peak.gene.links, sets = as.character(resolutions), keep.order = TRUE, nintersects = NA)
1679418034529:# get highly represented links across resolutions
1679418034534:deg.th <- 5
1679418035492:high.rep.pg.links <-  peak.gene.links[rowSums(peak.gene.links[,1:ncol(peak.gene.links)]) > deg.th,]
1679418036953:high.rep.pg.links
1679418039235:# overview of dataframes
1679418039241:## links from different cluster resolutions
1679418039247:head(merged.all.links) # all links merged
1679418040083:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418040981:## pcHiC links
1679418040986:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418041461:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418041466:high.rep.links.pcHiC <- high.rep.pg.links
1679418042007:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418042554:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418043126:# format TP.all peak-gene links
1679418043130:pchic.links <- c()
1679418043603:for (i in 1:nrow(TP.all)){
1679418043609:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418043615:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418043621:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418043627:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418043633:pchic.links <- c(pchic.links, pchic.link)
1679418043638:}
1679418044152:pchic.links
1679418044699:# find links that are in pchic data
1679418044704:links.in.pchic <- c()
1679418045291:for (i in 1:nrow(high.rep.pg.links)){
1679418045297:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418045302:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418045308:if (rep.link %in% pchic.links) {
1679418045313:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418045319:links.in.pchic <- c(links.in.pchic, rep.link)
1679418045324:}
1679418045330:}
1679418051618:print(links.in.pchic)
1679418061631:ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418061636:geom_bar(stat = "count") +
1679418061642:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418061647:theme_bw() +
1679418061653:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418061658:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418080653:# get highly represented links across resolutions
1679418080659:deg.th <- 5
1679418081102:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418082357:high.rep.pg.links
1679418084194:# overview of dataframes
1679418084199:## links from different cluster resolutions
1679418084206:head(merged.all.links) # all links merged
1679418084640:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418084884:## pcHiC links
1679418084890:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418085426:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418085431:high.rep.links.pcHiC <- high.rep.pg.links
1679418085856:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418086273:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418086860:# format TP.all peak-gene links
1679418086866:pchic.links <- c()
1679418087434:for (i in 1:nrow(TP.all)){
1679418087440:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418087446:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418087452:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418087457:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418087463:pchic.links <- c(pchic.links, pchic.link)
1679418087469:}
1679418088044:pchic.links
1679418088577:# find links that are in pchic data
1679418088583:links.in.pchic <- c()
1679418089003:for (i in 1:nrow(high.rep.pg.links)){
1679418089009:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418089014:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418089020:if (rep.link %in% pchic.links) {
1679418089026:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418089031:links.in.pchic <- c(links.in.pchic, rep.link)
1679418089037:}
1679418089042:}
1679418089729:print(links.in.pchic)
1679418090833:ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418090838:geom_bar(stat = "count") +
1679418090844:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418090849:theme_bw() +
1679418090854:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418090860:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418232150:all.links
1679418315432:# get highly represented links across resolutions
1679418315439:deg.th <- 5
1679418316440:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418318046:# overview of dataframes
1679418318051:## links from different cluster resolutions
1679418318057:head(merged.all.links) # all links merged
1679418318575:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418318990:## pcHiC links
1679418318995:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418319439:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418319444:high.rep.links.pcHiC <- high.rep.pg.links
1679418319810:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418320402:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418321357:# format TP.all peak-gene links
1679418321362:pchic.links <- c()
1679418322027:for (i in 1:nrow(TP.all)){
1679418322032:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418322038:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418322043:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418322048:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418322054:pchic.links <- c(pchic.links, pchic.link)
1679418322061:}
1679418322699:pchic.links
1679418323431:# find links that are in pchic data
1679418323438:links.in.pchic <- c()
1679418324156:for (i in 1:nrow(high.rep.pg.links)){
1679418324161:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418324167:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418324173:if (rep.link %in% pchic.links) {
1679418324179:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418324184:links.in.pchic <- c(links.in.pchic, rep.link)
1679418324190:}
1679418324196:}
1679418325261:print(links.in.pchic)
1679418328028:ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418328034:geom_bar(stat = "count") +
1679418328040:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418328045:theme_bw() +
1679418328051:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418328057:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418350905:# get highly represented links across resolutions
1679418350911:deg.th <- 1
1679418351505:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418351899:# overview of dataframes
1679418351905:## links from different cluster resolutions
1679418351911:head(merged.all.links) # all links merged
1679418352334:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418352772:## pcHiC links
1679418352779:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418353188:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418353198:high.rep.links.pcHiC <- high.rep.pg.links
1679418353578:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418354093:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418354622:# format TP.all peak-gene links
1679418354630:pchic.links <- c()
1679418355102:for (i in 1:nrow(TP.all)){
1679418355108:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418355114:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418355120:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418355127:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418355134:pchic.links <- c(pchic.links, pchic.link)
1679418355141:}
1679418355617:pchic.links
1679418356250:# find links that are in pchic data
1679418356255:links.in.pchic <- c()
1679418356772:for (i in 1:nrow(high.rep.pg.links)){
1679418356780:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418356788:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418356799:if (rep.link %in% pchic.links) {
1679418356809:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418356818:links.in.pchic <- c(links.in.pchic, rep.link)
1679418356826:}
1679418356832:}
1679418357241:print(links.in.pchic)
1679418357793:p1 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418357800:geom_bar(stat = "count") +
1679418357807:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418357814:theme_bw() +
1679418357822:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418357830:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418366548:# get highly represented links across resolutions
1679418366555:deg.th <- 2
1679418367309:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418367809:# overview of dataframes
1679418367816:## links from different cluster resolutions
1679418367823:head(merged.all.links) # all links merged
1679418368092:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418368441:## pcHiC links
1679418368447:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418368762:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418368769:high.rep.links.pcHiC <- high.rep.pg.links
1679418369158:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418369437:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418369788:# format TP.all peak-gene links
1679418369799:pchic.links <- c()
1679418370114:for (i in 1:nrow(TP.all)){
1679418370124:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418370133:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418370143:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418370153:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418370164:pchic.links <- c(pchic.links, pchic.link)
1679418370173:}
1679418370487:pchic.links
1679418371034:# find links that are in pchic data
1679418371042:links.in.pchic <- c()
1679418372053:for (i in 1:nrow(high.rep.pg.links)){
1679418372066:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418372080:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418372093:if (rep.link %in% pchic.links) {
1679418372107:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418372117:links.in.pchic <- c(links.in.pchic, rep.link)
1679418372131:}
1679418372142:}
1679418372978:print(links.in.pchic)
1679418373568:p2 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418373579:geom_bar(stat = "count") +
1679418373590:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418373601:theme_bw() +
1679418373613:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418373625:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418379743:# get highly represented links across resolutions
1679418379776:deg.th <- 3
1679418380230:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418380584:# overview of dataframes
1679418380594:## links from different cluster resolutions
1679418380605:head(merged.all.links) # all links merged
1679418380937:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418381133:## pcHiC links
1679418381145:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418381298:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418381309:high.rep.links.pcHiC <- high.rep.pg.links
1679418381487:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418381830:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418382223:# format TP.all peak-gene links
1679418382235:pchic.links <- c()
1679418382523:for (i in 1:nrow(TP.all)){
1679418382535:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418382550:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418382570:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418382591:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418382603:pchic.links <- c(pchic.links, pchic.link)
1679418382621:}
1679418383042:pchic.links
1679418384255:# find links that are in pchic data
1679418384266:links.in.pchic <- c()
1679418384760:for (i in 1:nrow(high.rep.pg.links)){
1679418384774:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418384791:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418384816:if (rep.link %in% pchic.links) {
1679418384835:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418384856:links.in.pchic <- c(links.in.pchic, rep.link)
1679418384869:}
1679418384879:}
1679418385175:print(links.in.pchic)
1679418386205:p3 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418386219:geom_bar(stat = "count") +
1679418386230:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418386242:theme_bw() +
1679418386255:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418386263:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418395868:# get highly represented links across resolutions
1679418395880:deg.th <- 4
1679418396456:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418397024:# overview of dataframes
1679418397033:## links from different cluster resolutions
1679418397041:head(merged.all.links) # all links merged
1679418397631:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418398029:## pcHiC links
1679418398042:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418398474:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418398482:high.rep.links.pcHiC <- high.rep.pg.links
1679418399056:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418399747:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418400441:# format TP.all peak-gene links
1679418400450:pchic.links <- c()
1679418401190:for (i in 1:nrow(TP.all)){
1679418401198:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418401208:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418401222:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418401232:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418401244:pchic.links <- c(pchic.links, pchic.link)
1679418401251:}
1679418401926:pchic.links
1679418402934:# find links that are in pchic data
1679418402944:links.in.pchic <- c()
1679418404436:for (i in 1:nrow(high.rep.pg.links)){
1679418404448:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418404459:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418404471:if (rep.link %in% pchic.links) {
1679418404482:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418404491:links.in.pchic <- c(links.in.pchic, rep.link)
1679418404503:}
1679418404514:}
1679418405276:print(links.in.pchic)
1679418405878:p4 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418405885:geom_bar(stat = "count") +
1679418405893:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418405900:theme_bw() +
1679418405906:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418405917:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418423119:# get highly represented links across resolutions
1679418423129:deg.th <- 5
1679418423664:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418424157:# overview of dataframes
1679418424167:## links from different cluster resolutions
1679418424181:head(merged.all.links) # all links merged
1679418424565:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418424978:## pcHiC links
1679418424988:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418425362:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418425371:high.rep.links.pcHiC <- high.rep.pg.links
1679418425828:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418426234:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418426716:# format TP.all peak-gene links
1679418426727:pchic.links <- c()
1679418427175:for (i in 1:nrow(TP.all)){
1679418427189:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418427200:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418427211:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418427219:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418427232:pchic.links <- c(pchic.links, pchic.link)
1679418427240:}
1679418427694:pchic.links
1679418428151:# find links that are in pchic data
1679418428162:links.in.pchic <- c()
1679418428505:for (i in 1:nrow(high.rep.pg.links)){
1679418428515:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418428525:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418428533:if (rep.link %in% pchic.links) {
1679418428541:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418428549:links.in.pchic <- c(links.in.pchic, rep.link)
1679418428557:}
1679418428566:}
1679418429126:print(links.in.pchic)
1679418430471:p5 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418430482:geom_bar(stat = "count") +
1679418430496:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418430506:theme_bw() +
1679418430522:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418430533:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418435108:# get highly represented links across resolutions
1679418435116:deg.th <- 6
1679418435690:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418436281:# overview of dataframes
1679418436288:## links from different cluster resolutions
1679418436301:head(merged.all.links) # all links merged
1679418436788:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418437405:## pcHiC links
1679418437414:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418438049:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418438060:high.rep.links.pcHiC <- high.rep.pg.links
1679418438605:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418439256:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418439782:# format TP.all peak-gene links
1679418439792:pchic.links <- c()
1679418440320:for (i in 1:nrow(TP.all)){
1679418440329:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418440339:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418440346:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418440354:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418440363:pchic.links <- c(pchic.links, pchic.link)
1679418440373:}
1679418440837:pchic.links
1679418441406:# find links that are in pchic data
1679418441413:links.in.pchic <- c()
1679418441956:for (i in 1:nrow(high.rep.pg.links)){
1679418441966:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418441972:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418441978:if (rep.link %in% pchic.links) {
1679418441983:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418441992:links.in.pchic <- c(links.in.pchic, rep.link)
1679418441997:}
1679418442003:}
1679418442621:print(links.in.pchic)
1679418446871:p6 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418446879:geom_bar(stat = "count") +
1679418446888:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418446899:theme_bw() +
1679418446909:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418446917:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418452526:print(links.in.pchic)
1679418457909:# get highly represented links across resolutions
1679418457921:deg.th <- 7
1679418458346:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418458825:# overview of dataframes
1679418458842:## links from different cluster resolutions
1679418458854:head(merged.all.links) # all links merged
1679418459477:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418459921:## pcHiC links
1679418459936:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418460461:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418460478:high.rep.links.pcHiC <- high.rep.pg.links
1679418460863:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418461139:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418461439:# format TP.all peak-gene links
1679418461452:pchic.links <- c()
1679418461698:for (i in 1:nrow(TP.all)){
1679418461711:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418461724:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418461739:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418461760:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418461771:pchic.links <- c(pchic.links, pchic.link)
1679418461786:}
1679418462294:pchic.links
1679418462746:# find links that are in pchic data
1679418462761:links.in.pchic <- c()
1679418463139:for (i in 1:nrow(high.rep.pg.links)){
1679418463153:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418463165:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418463182:if (rep.link %in% pchic.links) {
1679418463199:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418463212:links.in.pchic <- c(links.in.pchic, rep.link)
1679418463229:}
1679418463247:}
1679418463506:print(links.in.pchic)
1679418465724:p7 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418465736:geom_bar(stat = "count") +
1679418465754:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418465765:theme_bw() +
1679418465781:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418465797:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418470990:# get highly represented links across resolutions
1679418471000:deg.th <- 8
1679418471545:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418472105:# overview of dataframes
1679418472114:## links from different cluster resolutions
1679418472126:head(merged.all.links) # all links merged
1679418472702:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418473081:## pcHiC links
1679418473089:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418473558:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418473569:high.rep.links.pcHiC <- high.rep.pg.links
1679418473944:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418474450:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418474914:# format TP.all peak-gene links
1679418474923:pchic.links <- c()
1679418475361:for (i in 1:nrow(TP.all)){
1679418475369:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418475379:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418475389:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418475397:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418475407:pchic.links <- c(pchic.links, pchic.link)
1679418475414:}
1679418475918:pchic.links
1679418476421:# find links that are in pchic data
1679418476430:links.in.pchic <- c()
1679418476853:for (i in 1:nrow(high.rep.pg.links)){
1679418476862:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418476871:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418476880:if (rep.link %in% pchic.links) {
1679418476889:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418476898:links.in.pchic <- c(links.in.pchic, rep.link)
1679418476908:}
1679418476917:}
1679418477590:print(links.in.pchic)
1679418479795:p8 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418479808:geom_bar(stat = "count") +
1679418479821:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418479833:theme_bw() +
1679418479845:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418479856:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418486019:# get highly represented links across resolutions
1679418486035:deg.th <- 9
1679418486546:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418487074:# overview of dataframes
1679418487089:## links from different cluster resolutions
1679418487101:head(merged.all.links) # all links merged
1679418487524:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418488034:## pcHiC links
1679418488049:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418488530:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418488547:high.rep.links.pcHiC <- high.rep.pg.links
1679418488936:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418489387:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418489863:# format TP.all peak-gene links
1679418489877:pchic.links <- c()
1679418490296:for (i in 1:nrow(TP.all)){
1679418490305:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418490312:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418490319:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418490328:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418490340:pchic.links <- c(pchic.links, pchic.link)
1679418490351:}
1679418490667:pchic.links
1679418491193:# find links that are in pchic data
1679418491198:links.in.pchic <- c()
1679418491570:for (i in 1:nrow(high.rep.pg.links)){
1679418491582:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418491591:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418491605:if (rep.link %in% pchic.links) {
1679418491621:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418491632:links.in.pchic <- c(links.in.pchic, rep.link)
1679418491647:}
1679418491656:}
1679418492024:print(links.in.pchic)
1679418494069:p9 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418494078:geom_bar(stat = "count") +
1679418494087:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418494097:theme_bw() +
1679418494108:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418494116:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418502834:# get highly represented links across resolutions
1679418502847:deg.th <- 10
1679418503315:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418503777:# overview of dataframes
1679418503793:## links from different cluster resolutions
1679418503803:head(merged.all.links) # all links merged
1679418504228:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418504643:## pcHiC links
1679418504658:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418505124:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418505136:high.rep.links.pcHiC <- high.rep.pg.links
1679418505645:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418506119:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418506451:# format TP.all peak-gene links
1679418506465:pchic.links <- c()
1679418506975:for (i in 1:nrow(TP.all)){
1679418506984:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418506993:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418507007:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418507020:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418507035:pchic.links <- c(pchic.links, pchic.link)
1679418507053:}
1679418507397:pchic.links
1679418507879:# find links that are in pchic data
1679418507892:links.in.pchic <- c()
1679418508237:for (i in 1:nrow(high.rep.pg.links)){
1679418508247:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418508262:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418508272:if (rep.link %in% pchic.links) {
1679418508281:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418508290:links.in.pchic <- c(links.in.pchic, rep.link)
1679418508301:}
1679418508312:}
1679418509564:print(links.in.pchic)
1679418512312:p10 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418512322:geom_bar(stat = "count") +
1679418512330:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418512342:theme_bw() +
1679418512350:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418512361:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418515266:# get highly represented links across resolutions
1679418515276:deg.th <- 11
1679418515774:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418516365:# overview of dataframes
1679418516391:## links from different cluster resolutions
1679418516402:head(merged.all.links) # all links merged
1679418517141:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418517672:## pcHiC links
1679418517928:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418518182:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418518433:high.rep.links.pcHiC <- high.rep.pg.links
1679418519020:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418519434:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418520056:# format TP.all peak-gene links
1679418520333:pchic.links <- c()
1679418520641:for (i in 1:nrow(TP.all)){
1679418520933:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418521208:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418521463:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418521719:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418522132:pchic.links <- c(pchic.links, pchic.link)
1679418522432:}
1679418522831:pchic.links
1679418524418:# find links that are in pchic data
1679418524674:links.in.pchic <- c()
1679418525499:for (i in 1:nrow(high.rep.pg.links)){
1679418525527:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418525560:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418525576:if (rep.link %in% pchic.links) {
1679418525594:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418525622:links.in.pchic <- c(links.in.pchic, rep.link)
1679418525659:}
1679418525678:}
1679418526360:print(links.in.pchic)
1679418528674:p11 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418528696:geom_bar(stat = "count") +
1679418528705:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418528718:theme_bw() +
1679418528727:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418528739:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418534032:# get highly represented links across resolutions
1679418534044:deg.th <- 12
1679418534561:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418535121:# overview of dataframes
1679418535138:## links from different cluster resolutions
1679418535154:head(merged.all.links) # all links merged
1679418535752:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418536215:## pcHiC links
1679418536235:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418536728:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418536742:high.rep.links.pcHiC <- high.rep.pg.links
1679418537230:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418537710:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418538264:# format TP.all peak-gene links
1679418538276:pchic.links <- c()
1679418538897:for (i in 1:nrow(TP.all)){
1679418539195:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418539510:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418539848:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418540201:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418540519:pchic.links <- c(pchic.links, pchic.link)
1679418540898:}
1679418541541:pchic.links
1679418542782:# find links that are in pchic data
1679418543121:links.in.pchic <- c()
1679418545036:for (i in 1:nrow(high.rep.pg.links)){
1679418545327:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418545680:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418546065:if (rep.link %in% pchic.links) {
1679418546485:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418546867:links.in.pchic <- c(links.in.pchic, rep.link)
1679418547188:}
1679418547509:}
1679418548975:print(links.in.pchic)
1679418550456:p11 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418550754:geom_bar(stat = "count") +
1679418551065:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418551376:theme_bw() +
1679418551750:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418552149:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418563336:p12 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418563347:geom_bar(stat = "count") +
1679418563355:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418563364:theme_bw() +
1679418563376:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418563386:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418569081:# get highly represented links across resolutions
1679418569090:deg.th <- 11
1679418569733:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418570482:# overview of dataframes
1679418570492:## links from different cluster resolutions
1679418570500:head(merged.all.links) # all links merged
1679418570722:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418571071:## pcHiC links
1679418571079:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418571266:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418571276:high.rep.links.pcHiC <- high.rep.pg.links
1679418571429:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418571555:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418571910:# format TP.all peak-gene links
1679418571919:pchic.links <- c()
1679418572421:for (i in 1:nrow(TP.all)){
1679418572434:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418572444:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418572452:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418572461:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418572473:pchic.links <- c(pchic.links, pchic.link)
1679418572483:}
1679418572951:pchic.links
1679418573448:# find links that are in pchic data
1679418573458:links.in.pchic <- c()
1679418573862:for (i in 1:nrow(high.rep.pg.links)){
1679418573951:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418573999:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418574050:if (rep.link %in% pchic.links) {
1679418574102:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418574143:links.in.pchic <- c(links.in.pchic, rep.link)
1679418574179:}
1679418574226:}
1679418576695:print(links.in.pchic)
1679418578043:p11 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418578052:geom_bar(stat = "count") +
1679418578064:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418578073:theme_bw() +
1679418578089:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418578120:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418583014:# get highly represented links across resolutions
1679418583019:deg.th <- 13
1679418583720:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418584543:# overview of dataframes
1679418584549:## links from different cluster resolutions
1679418584555:head(merged.all.links) # all links merged
1679418585126:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418585524:## pcHiC links
1679418585532:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418585874:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418585880:high.rep.links.pcHiC <- high.rep.pg.links
1679418586352:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418586879:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418587522:# format TP.all peak-gene links
1679418587537:pchic.links <- c()
1679418588244:for (i in 1:nrow(TP.all)){
1679418588262:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418588281:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418588296:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418588315:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418588326:pchic.links <- c(pchic.links, pchic.link)
1679418588334:}
1679418588851:pchic.links
1679418589706:# find links that are in pchic data
1679418589713:links.in.pchic <- c()
1679418590559:for (i in 1:nrow(high.rep.pg.links)){
1679418590574:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418590588:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418590594:if (rep.link %in% pchic.links) {
1679418590603:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418590611:links.in.pchic <- c(links.in.pchic, rep.link)
1679418590618:}
1679418590623:}
1679418594624:print(links.in.pchic)
1679418595655:p13 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418595664:geom_bar(stat = "count") +
1679418595671:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418595678:theme_bw() +
1679418595686:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418595696:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418601546:# get highly represented links across resolutions
1679418601556:deg.th <- 14
1679418602282:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418602918:# overview of dataframes
1679418602927:## links from different cluster resolutions
1679418602935:head(merged.all.links) # all links merged
1679418603532:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418604048:## pcHiC links
1679418604054:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418604552:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418604559:high.rep.links.pcHiC <- high.rep.pg.links
1679418605131:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418605798:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418606412:# format TP.all peak-gene links
1679418606418:pchic.links <- c()
1679418606969:for (i in 1:nrow(TP.all)){
1679418606977:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418606983:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418606991:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418606997:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418607004:pchic.links <- c(pchic.links, pchic.link)
1679418607011:}
1679418607511:pchic.links
1679418608208:# find links that are in pchic data
1679418608215:links.in.pchic <- c()
1679418609164:for (i in 1:nrow(high.rep.pg.links)){
1679418609171:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418609179:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418609188:if (rep.link %in% pchic.links) {
1679418609195:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418609201:links.in.pchic <- c(links.in.pchic, rep.link)
1679418609207:}
1679418609214:}
1679418610401:print(links.in.pchic)
1679418615401:p14 <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679418615413:geom_bar(stat = "count") +
1679418615424:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679418615435:theme_bw() +
1679418615444:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679418615454:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10)
1679418619185:# get highly represented links across resolutions
1679418619193:deg.th <- 15
1679418619741:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679418620387:# overview of dataframes
1679418620396:## links from different cluster resolutions
1679418620402:head(merged.all.links) # all links merged
1679418621067:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679418621688:## pcHiC links
1679418621695:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679418622210:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679418622218:high.rep.links.pcHiC <- high.rep.pg.links
1679418622535:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679418622813:high.rep.links.pcHiC$pcHiC <- pcHiC
1679418623183:# format TP.all peak-gene links
1679418623190:pchic.links <- c()
1679418623632:for (i in 1:nrow(TP.all)){
1679418623640:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679418623646:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679418623652:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679418623659:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679418623665:pchic.links <- c(pchic.links, pchic.link)
1679418623672:}
1679418623985:pchic.links
1679418624740:# find links that are in pchic data
1679418624752:links.in.pchic <- c()
1679418625268:for (i in 1:nrow(high.rep.pg.links)){
1679418625276:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679418625284:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679418625294:if (rep.link %in% pchic.links) {
1679418625301:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679418625307:links.in.pchic <- c(links.in.pchic, rep.link)
1679418625313:}
1679418625319:}
1679418628221:print(links.in.pchic)
1679418661014:p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12+p13+p14
1679419038819:for (deg.th in 1:14){
1679419038829:# get highly represented links across resolutions
1679419038838:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679419038856:# overview of dataframes
1679419038865:## links from different cluster resolutions
1679419038875:head(merged.all.links) # all links merged
1679419038884:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679419038893:## pcHiC links
1679419038903:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679419038920:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679419038929:high.rep.links.pcHiC <- high.rep.pg.links
1679419038940:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679419038949:high.rep.links.pcHiC$pcHiC <- pcHiC
1679419038965:# format TP.all peak-gene links
1679419038974:pchic.links <- c()
1679419038984:for (i in 1:nrow(TP.all)){
1679419038992:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679419039001:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679419039010:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679419039018:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679419039027:pchic.links <- c(pchic.links, pchic.link)
1679419039036:}
1679419039045:pchic.links
1679419039060:# find links that are in pchic data
1679419039070:links.in.pchic <- c()
1679419039079:for (i in 1:nrow(high.rep.pg.links)){
1679419039087:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679419039097:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679419039105:if (rep.link %in% pchic.links) {
1679419039114:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679419039123:links.in.pchic <- c(links.in.pchic, rep.link)
1679419039134:}
1679419039143:}
1679419039159:print(links.in.pchic)
1679419039175:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419039183:geom_bar(stat = "count") +
1679419039194:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419039204:theme_bw() +
1679419039213:annotate("text", x = 1, y = 150, label = as.character(length(links.in.pchic)), size = 10) +
1679419039223:annotate("text", x = 0, y = 150, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10) +
1679419039233:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419039250:assign(paste0("p", deg.th), p)
1679419039266:}
1679419046119:p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12+p13+p14
1679419087502:for (deg.th in 1:14){
1679419087508:# get highly represented links across resolutions
1679419087513:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679419087525:# overview of dataframes
1679419087532:## links from different cluster resolutions
1679419087539:head(merged.all.links) # all links merged
1679419087544:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679419087550:## pcHiC links
1679419087557:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679419087567:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679419087573:high.rep.links.pcHiC <- high.rep.pg.links
1679419087580:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679419087586:high.rep.links.pcHiC$pcHiC <- pcHiC
1679419087597:# format TP.all peak-gene links
1679419087603:pchic.links <- c()
1679419087609:for (i in 1:nrow(TP.all)){
1679419087615:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679419087622:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679419087629:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679419087636:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679419087643:pchic.links <- c(pchic.links, pchic.link)
1679419087649:}
1679419087656:pchic.links
1679419087667:# find links that are in pchic data
1679419087674:links.in.pchic <- c()
1679419087681:for (i in 1:nrow(high.rep.pg.links)){
1679419087691:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679419087697:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679419087703:if (rep.link %in% pchic.links) {
1679419087709:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679419087715:links.in.pchic <- c(links.in.pchic, rep.link)
1679419087721:}
1679419087726:}
1679419087736:print(links.in.pchic)
1679419087746:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419087752:geom_bar(stat = "count") +
1679419087758:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419087764:theme_bw() +
1679419087771:annotate("text", x = 1, y = 0, label = as.character(length(links.in.pchic)), size = 10) +
1679419087778:annotate("text", x = 0, y = 0, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10) +
1679419087784:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419087795:assign(paste0("p", deg.th), p)
1679419087805:}
1679419123001:for (deg.th in 1:14){
1679419123007:# get highly represented links across resolutions
1679419123013:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679419123024:# overview of dataframes
1679419123029:## links from different cluster resolutions
1679419123035:head(merged.all.links) # all links merged
1679419123040:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679419123045:## pcHiC links
1679419123051:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679419123062:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679419123067:high.rep.links.pcHiC <- high.rep.pg.links
1679419123072:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679419123078:high.rep.links.pcHiC$pcHiC <- pcHiC
1679419123089:# format TP.all peak-gene links
1679419123096:pchic.links <- c()
1679419123102:for (i in 1:nrow(TP.all)){
1679419123107:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679419123116:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679419123123:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679419123129:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679419123134:pchic.links <- c(pchic.links, pchic.link)
1679419123145:}
1679419123151:pchic.links
1679419123163:# find links that are in pchic data
1679419123173:links.in.pchic <- c()
1679419123178:for (i in 1:nrow(high.rep.pg.links)){
1679419123183:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679419123207:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679419123212:if (rep.link %in% pchic.links) {
1679419123224:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679419123230:links.in.pchic <- c(links.in.pchic, rep.link)
1679419123238:}
1679419123244:}
1679419123253:print(links.in.pchic)
1679419123262:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419123268:geom_bar(stat = "count") +
1679419123277:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419123283:theme_bw() +
1679419123288:annotate("text", x = 1, y = 0, label = as.character(length(links.in.pchic)), size = 10) +
1679419123294:annotate("text", x = 0, y = 0, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10) +
1679419123299:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419123310:assign(paste0("p", deg.th), p)
1679419123319:}
1679419151717:for (deg.th in 1:14){
1679419151722:# get highly represented links across resolutions
1679419151728:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679419151740:# overview of dataframes
1679419151745:## links from different cluster resolutions
1679419151751:head(merged.all.links) # all links merged
1679419151756:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679419151762:## pcHiC links
1679419151767:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679419151776:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679419151782:high.rep.links.pcHiC <- high.rep.pg.links
1679419151788:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679419151793:high.rep.links.pcHiC$pcHiC <- pcHiC
1679419151804:# format TP.all peak-gene links
1679419151809:pchic.links <- c()
1679419151815:for (i in 1:nrow(TP.all)){
1679419151821:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679419151827:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679419151833:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679419151838:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679419151843:pchic.links <- c(pchic.links, pchic.link)
1679419151848:}
1679419151852:pchic.links
1679419151861:# find links that are in pchic data
1679419151867:links.in.pchic <- c()
1679419151871:for (i in 1:nrow(high.rep.pg.links)){
1679419151877:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679419151882:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679419151888:if (rep.link %in% pchic.links) {
1679419151893:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679419151899:links.in.pchic <- c(links.in.pchic, rep.link)
1679419151905:}
1679419151911:}
1679419151925:print(links.in.pchic)
1679419151935:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419151940:geom_bar(stat = "count") +
1679419151946:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419151951:theme_bw() +
1679419151956:annotate("text", x = 1, y = 10, label = as.character(length(links.in.pchic)), size = 10) +
1679419151962:annotate("text", x = 0, y = 10, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10) +
1679419151967:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419151977:assign(paste0("p", deg.th), p)
1679419151988:}
1679419230261:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419230271:geom_bar(stat = "count") +
1679419230279:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419230289:theme_bw() +
1679419230298:annotate("text", x = 1,  label = as.character(length(links.in.pchic)), size = 10) +
1679419230309:annotate("text", x = 0,  label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10) +
1679419230318:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419232806:p
1679419241640:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419241645:geom_bar(stat = "count") +
1679419241650:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419241656:theme_bw() +
1679419241662:annotate("text", x = 1, y = 10, label = as.character(length(links.in.pchic)), size = 10) +
1679419241667:annotate("text", x = 0, y = 10, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10) +
1679419241673:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419243223:p
1679419254919:for (deg.th in 1:14){
1679419254925:# get highly represented links across resolutions
1679419254932:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679419254943:# overview of dataframes
1679419254951:## links from different cluster resolutions
1679419254957:head(merged.all.links) # all links merged
1679419254964:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679419254970:## pcHiC links
1679419254976:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679419254988:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679419254996:high.rep.links.pcHiC <- high.rep.pg.links
1679419255004:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679419255009:high.rep.links.pcHiC$pcHiC <- pcHiC
1679419255018:# format TP.all peak-gene links
1679419255023:pchic.links <- c()
1679419255029:for (i in 1:nrow(TP.all)){
1679419255036:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679419255040:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679419255046:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679419255052:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679419255058:pchic.links <- c(pchic.links, pchic.link)
1679419255065:}
1679419255072:pchic.links
1679419255083:# find links that are in pchic data
1679419255088:links.in.pchic <- c()
1679419255093:for (i in 1:nrow(high.rep.pg.links)){
1679419255097:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679419255102:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679419255108:if (rep.link %in% pchic.links) {
1679419255115:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679419255122:links.in.pchic <- c(links.in.pchic, rep.link)
1679419255128:}
1679419255133:}
1679419255146:print(links.in.pchic)
1679419255155:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419255160:geom_bar(stat = "count") +
1679419255164:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419255169:theme_bw() +
1679419255177:annotate("text", x = 1, y = 10, label = as.character(length(links.in.pchic)), size = 10) +
1679419255183:annotate("text", x = 0, y = 10, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 10) +
1679419255190:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419255201:assign(paste0("p", deg.th), p)
1679419255206:}
1679419261647:p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12+p13+p14
1679419317783:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419317795:geom_bar(stat = "count") +
1679419317808:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419317827:theme_bw() +
1679419317833:annotate("text", x = 1, y = 10, label = as.character(length(links.in.pchic)), size = 10) +
1679419317839:annotate("text", x = 0, y = 10, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 7) +
1679419317845:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419319706:p
1679419328882:for (deg.th in 1:14){
1679419328888:# get highly represented links across resolutions
1679419328893:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679419328902:# overview of dataframes
1679419328906:## links from different cluster resolutions
1679419328911:head(merged.all.links) # all links merged
1679419328916:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679419328921:## pcHiC links
1679419328925:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679419328934:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679419328939:high.rep.links.pcHiC <- high.rep.pg.links
1679419328944:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679419328948:high.rep.links.pcHiC$pcHiC <- pcHiC
1679419328956:# format TP.all peak-gene links
1679419328961:pchic.links <- c()
1679419328966:for (i in 1:nrow(TP.all)){
1679419328971:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679419328975:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679419328980:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679419328985:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679419328991:pchic.links <- c(pchic.links, pchic.link)
1679419328996:}
1679419329001:pchic.links
1679419329012:# find links that are in pchic data
1679419329017:links.in.pchic <- c()
1679419329024:for (i in 1:nrow(high.rep.pg.links)){
1679419329029:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679419329034:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679419329039:if (rep.link %in% pchic.links) {
1679419329044:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679419329050:links.in.pchic <- c(links.in.pchic, rep.link)
1679419329055:}
1679419329060:}
1679419329070:print(links.in.pchic)
1679419329081:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419329087:geom_bar(stat = "count") +
1679419329092:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419329098:theme_bw() +
1679419329104:annotate("text", x = 1, y = 10, label = as.character(length(links.in.pchic)), size = 7) +
1679419329109:annotate("text", x = 0, y = 10, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 7) +
1679419329114:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419329125:assign(paste0("p", deg.th), p)
1679419329131:}
1679419337894:p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12+p13+p14
1679419433918:high.rep.links.pcHiC
1679419463691:high.rep.links.pcHiC$pcHiC
1679419470551:table(high.rep.links.pcHiC$pcHiC)
1679419476688:max(table(high.rep.links.pcHiC$pcHiC))
1679419487252:max(table(high.rep.links.pcHiC$pcHiC))//2
1679419491910:max(table(high.rep.links.pcHiC$pcHiC))/2
1679419509849:for (deg.th in 1:14){
1679419509855:# get highly represented links across resolutions
1679419509860:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679419509868:# overview of dataframes
1679419509872:## links from different cluster resolutions
1679419509877:head(merged.all.links) # all links merged
1679419509882:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679419509887:## pcHiC links
1679419509892:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679419509900:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679419509905:high.rep.links.pcHiC <- high.rep.pg.links
1679419509909:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679419509914:high.rep.links.pcHiC$pcHiC <- pcHiC
1679419509922:# format TP.all peak-gene links
1679419509927:pchic.links <- c()
1679419509931:for (i in 1:nrow(TP.all)){
1679419509935:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679419509940:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679419509944:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679419509949:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679419509954:pchic.links <- c(pchic.links, pchic.link)
1679419509959:}
1679419509964:pchic.links
1679419509972:# find links that are in pchic data
1679419509978:links.in.pchic <- c()
1679419509983:for (i in 1:nrow(high.rep.pg.links)){
1679419509987:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679419509993:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679419509998:if (rep.link %in% pchic.links) {
1679419510003:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679419510007:links.in.pchic <- c(links.in.pchic, rep.link)
1679419510012:}
1679419510018:}
1679419510027:print(links.in.pchic)
1679419510047:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679419510052:geom_bar(stat = "count") +
1679419510058:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679419510063:theme_bw() +
1679419510068:annotate("text", x = 1, y = max(table(high.rep.links.pcHiC$pcHiC))/2, label = as.character(length(links.in.pchic)), size = 7) +
1679419510073:annotate("text", x = 0, y = max(table(high.rep.links.pcHiC$pcHiC))/2, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 7) +
1679419510079:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679419510088:assign(paste0("p", deg.th), p)
1679419510093:}
1679419516285:p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12+p13+p14
1679478911409:library(GRaNIE)
1679478923258:library(dplyr)
1679478923359:library(qs)
1679478923603:library(ggplot2)
1679478923659:library(ggpubr)
1679478924187:library(pROC)
1679478924275:library(EnsDb.Hsapiens.v79)
1679478935474:library(UpSetR)
1679478935548:library(data.table)
1679478935917:library(ggrepel)
1679479020972:# PEARSON
1679479020977:# load eGRN
1679479020982:GRN.p <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1679479025233:GRN.p
1679479026915:# build eGRN
1679479026919:GRN.p = build_eGRN_graph(GRN.p, forceRerun = TRUE)
1679479028186:GRN.p = visualizeGRN(GRN.p, plotAsPDF = FALSE)
1679479031099:# SPEARMAN
1679479031104:GRN.s <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_spearman_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1679479034950:GRN.s
1679479036663:# build eGRN
1679479036667:GRN.s = build_eGRN_graph(GRN.s, forceRerun = TRUE)
1679479037442:GRN.s = visualizeGRN(GRN.s, plotAsPDF = FALSE)
1679479040422:GRN.p@connections$all.filtered #more connections
1679479041069:GRN.s@connections$all.filtered
1679479041922:# Set up the main directory
1679479041930:path = "/g/scb/zaugg/deuner/GRaNIE"
1679479043185:# Load the seurat object
1679479043198:seuratFile = "timecourse.pp.seuratObject.qs"
1679479043618:timecourse.s <- qread(paste0(path,"/tmp/",seuratFile))
1679479097460:## PEARSON
1679479097667:# TF-peak-gene connections here
1679479097898:GRN.p@connections$all.filtered[["0"]]
1679479098876:connections.p <- as.data.frame(GRN.p@connections$all.filtered[["0"]])
1679479099688:# SCT counts here
1679479099924:GRN.p@data[["RNA"]][["counts"]]
1679479100822:counts.p <- as.data.frame(GRN.p@data[["RNA"]][["counts"]])
1679479102346:counts.p$gene.ENSEMBL <- rownames(counts.p)
1679479102970:counts.p
1679479103578:# norm ATAC counts here
1679479103584:GRN.p@data[["peaks"]][["counts"]]
1679479104193:peaks.p <- as.data.frame(GRN.p@data[["peaks"]][["counts"]])
1679479104729:peaks.p$peak.ID <- rownames(peaks.p)
1679479105135:peaks.p
1679479105793:# connections + counts
1679479105803:joined.p <- connections.p %>% inner_join(counts.p, by = "gene.ENSEMBL") %>% inner_join(peaks.p, by = "peak.ID")
1679479109111:## SPEARMAN
1679479109115:# peak-gene connections here
1679479109120:GRN.s@connections$all.filtered[["0"]]
1679479110438:connections.s <- as.data.frame(GRN.s@connections$all.filtered[["0"]])
1679479111814:# SCT counts here
1679479111818:GRN.s@data[["RNA"]][["counts"]]
1679479112266:counts.s <- as.data.frame(GRN.s@data[["RNA"]][["counts"]])
1679479112883:counts.s$gene.ENSEMBL <- rownames(counts.s)
1679479113533:counts.s
1679479114079:# norm ATAC counts here
1679479114084:GRN.s@data[["peaks"]][["counts"]]
1679479114610:peaks.s <- as.data.frame(GRN.s@data[["peaks"]][["counts"]])
1679479115193:peaks.s$peak.ID <- rownames(peaks.s)
1679479115732:peaks.s
1679479116395:# connections + counts
1679479116400:joined.s <- connections.s %>% inner_join(counts.s, by = "gene.ENSEMBL") %>% inner_join(peaks.s, by = "peak.ID")
1679479117486:# check shared TF-peak-links
1679479117491:tf.peak.gene.p <- GRN.p@connections$all.filtered[["0"]]
1679479118341:tf.peak.gene.s <- GRN.s@connections$all.filtered[["0"]]
1679479119175:colnames(tf.peak.gene.p)
1679479119938:tf.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("TF.ID"))
1679479120682:gene.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("gene.name"))
1679479121296:peak.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("peak.ID"))
1679479123949:tf.peak.gene.s
1679479124958:tf.shared.p.s
1679479125558:gene.shared.p.s
1679479126193:peak.shared.p.s
1679479215198:# select top5 most significant peak-gene links
1679479215202:top5.p <- joined.p %>% top_n(1, peak_gene.r)
1679479215956:top5.p.1 <- top5.p[,1:32]
1679479216387:top5.p.2 <- top5.p[,c(1:16, 33:48)]
1679479216921:# long format
1679479216926:top5.p.long.1 <- reshape2::melt(top5.p.1 , id.vars = colnames(top5.p)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679479217498:top5.p.long.2 <- reshape2::melt(top5.p.2, id.vars = colnames(top5.p)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679479218042:top5.p.both <- cbind(top5.p.long.1, top5.p.long.2[,17:ncol(top5.p.long.2)])
1679479219105:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479219110:geom_point(alpha = 0.75, size = 2) +
1679479219114:labs(x = "Gene Expression (SCT)", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679479219121:theme_classic() +
1679479219129:theme(plot.title = element_text(hjust = 0.5)) +
1679479219136:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30)
1679479671272:# assign informative colors to the cell type clusters
1679479671279:cols <- c("#FF6600", "#FF0000", "#CC0033", "#99FFFF", "#0099FF", "#33FF33", "#FF00FF", "#990000", "#FFCC66", "#660066", "#0000FF", "#FFFF33", "#FF6666", "#FF9933", "#66FF99")
1679479693818:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479693824:geom_point(alpha = 0.75, size = 2) +
1679479693832:labs(x = "Gene Expression (SCT)", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679479693840:theme_classic() +
1679479693848:theme(plot.title = element_text(hjust = 0.5)) +
1679479693855:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679479693862:scale_color_manual(values = cols)
1679479708837:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479708847:geom_point(alpha = 0.75, size = 2) +
1679479708856:labs(x = "Gene Expression (SCT)", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679479708863:theme_classic() +
1679479708873:theme(plot.title = element_text(hjust = 0.5)) +
1679479708881:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30)
1679479773011:# assign informative colors to the cell type clusters
1679479773019:cols <- c("#FF6600", "#FF0000", "#CC0033", "#99FFFF", "#0099FF", "#33FF33", "#FF00FF", "#990000", "#FF3300", "#FFCC66", "#660066", "#0000FF", "#FFFF33", "#FF6666", "#FF9933", "#66FF99")
1679479786072:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479786079:geom_point(alpha = 0.75, size = 2) +
1679479786085:labs(x = "Gene Expression (SCT)", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679479786090:theme_classic() +
1679479786095:theme(plot.title = element_text(hjust = 0.5)) +
1679479786099:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679479786105:scale_color_manual(values = cols)
1679479862002:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479862007:geom_point(alpha = 0.75, size = 2) +
1679479862012:labs(x = "Gene Expression (SCT)", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679479862018:theme_classic() +
1679479862023:theme(plot.title = element_text(hjust = 0.5)) +
1679479862028:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679479862033:scale_color_manual(values = cols)
1679479883084:ggplot(top5.p.both, aes(x = value.RNA, y = value.ATAC, col = cluster.RNA, label=TF.name)) +
1679479883090:geom_point(alpha = 0.75, size = 2) +
1679479883096:labs(x = "Gene Expression (SCT) log 10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679479883101:theme_classic() +
1679479883107:theme(plot.title = element_text(hjust = 0.5)) +
1679479883113:geom_text(hjust=0, vjust=0)
1679479888534:# select top5 most significant peak-gene links
1679479888540:## add also the pearson coefficient as a columns
1679479888546:top5.s <- joined.s %>% top_n(1, peak_gene.r)
1679479888904:top5.s.1 <- top5.s[,1:32]
1679479889289:top5.s.2 <- top5.s[,c(1:16, 33:48)]
1679479889744:# long format
1679479889755:top5.s.long.1 <- reshape2::melt(top5.s.1 , id.vars = colnames(top5.s)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679479890247:top5.s.long.2 <- reshape2::melt(top5.s.2, id.vars = colnames(top5.s)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679479890591:top5.s.both <- cbind(top5.s.long.1, top5.s.long.2[,17:ncol(top5.s.long.2)])
1679479890870:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479890878:geom_point(alpha = 0.75, size = 2) +
1679479890886:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679479890893:theme_classic() +
1679479890898:theme(plot.title = element_text(hjust = 0.5))
1679479944181:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479944189:geom_point(alpha = 0.75, size = 2) +
1679479944198:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679479944211:theme_classic() +
1679479944216:theme(plot.title = element_text(hjust = 0.5)) +
1679479944221:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679479944227:scale_color_manual(values = cols)
1679479976710:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479976716:geom_point(alpha = 0.75, size = 2) +
1679479976723:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679479976728:theme_classic() +
1679479976734:theme(plot.title = element_text(hjust = 0.5))
1679479989586:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679479989593:geom_point(alpha = 0.75, size = 2) +
1679479989598:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679479989604:theme_classic() +
1679479989611:theme(plot.title = element_text(hjust = 0.5)) +
1679479989618:scale_color_manual(values = cols)
1679480043276:# redoit but with all peak-gene links and putting pearson and spearman correlation coefficients in the same dataframe
1679480043284:# extract peak-genes from GRN ran with Spearman correlation
1679480043291:pg.links <- GRN.s@connections$peak_genes$`0`
1679480043944:colnames(pg.links)[4] <- "spearman.r"
1679480045323:# add pearson correlation values
1679480045328:pg.links$pearson.r <- GRN.p@connections$peak_genes$`0`$peak_gene.r
1679480047100:# add id column
1679480047109:pg.links$id <- as.character(c(1:nrow(pg.links)))
1679480048035:# add gene expresion and peak accessibility counts for each connection
1679480048040:pg.joined.s <- pg.links %>% inner_join(counts.s, by = "gene.ENSEMBL") %>% inner_join(peaks.p, by = "peak.ID")
1679480049395:# select top5 most significant peak-gene links
1679480049402:## add also the pearson coefficient as a columns
1679480049409:pg.top5.s <- pg.joined.s %>% top_n(5, spearman.r)
1679480049521:pg.top5.s.1 <- pg.top5.s[,1:23]
1679480049913:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679480050535:# long format
1679480050541:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679480051002:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679480051393:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679480051759:pg.top5.s.both
1679480052467:# set new ids
1679480052473:new.ids <- as.character(c(1:5))
1679480053008:names(new.ids) <- levels(pg.top5.s.both$id)
1679480053475:new.ids
1679480054016:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679480054022:geom_point(alpha = 0.75, size = 2) +
1679480054028:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480054036:theme_classic() +
1679480054044:theme(plot.title = element_text(hjust = 0.5))
1679480094939:# select top5 most significant peak-gene links
1679480094946:## add also the pearson coefficient as a columns
1679480094953:pg.top5.s <- pg.joined.s %>% top_n(5, pearson.r)
1679480095491:pg.top5.s.1 <- pg.top5.s[,1:23]
1679480095950:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679480096385:# long format
1679480096390:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679480096827:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679480097218:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679480097556:pg.top5.s.both
1679480098099:# set new ids
1679480098103:new.ids <- as.character(c(1:5))
1679480098421:names(new.ids) <- levels(pg.top5.s.both$id)
1679480098685:new.ids
1679480099244:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679480099250:geom_point(alpha = 0.75, size = 2) +
1679480099256:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679480099262:theme_classic() +
1679480099273:theme(plot.title = element_text(hjust = 0.5))
1679480122636:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679480122642:geom_point(alpha = 0.75, size = 2) +
1679480122648:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679480122655:theme_classic() +
1679480122662:theme(plot.title = element_text(hjust = 0.5))
1679480137273:# select top5 most significant peak-gene links
1679480137279:## add also the pearson coefficient as a columns
1679480137288:pg.top5.s <- pg.joined.s %>% top_n(5, spearman.r)
1679480137720:pg.top5.s.1 <- pg.top5.s[,1:23]
1679480137931:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679480138127:# long format
1679480138131:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679480138430:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679480138727:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679480138985:pg.top5.s.both
1679480139381:# set new ids
1679480139389:new.ids <- as.character(c(1:5))
1679480139698:names(new.ids) <- levels(pg.top5.s.both$id)
1679480140084:new.ids
1679480180954:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679480180960:geom_point(alpha = 0.75, size = 2) +
1679480180966:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679480180972:theme_classic() +
1679480180978:theme(plot.title = element_text(hjust = 0.5))
1679480230008:p1 <- ggplot(pg.top5.s.both %>% dplyr::filter(id == "316796"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480230027:geom_point(alpha = 0.75, size = 2) +
1679480230046:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480230061:theme_classic() +
1679480230077:theme(plot.title = element_text(hjust = 0.5))
1679480231002:p2 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "380465"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480231015:geom_point(alpha = 0.75, size = 2) +
1679480231031:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480231044:theme_classic() +
1679480231059:theme(plot.title = element_text(hjust = 0.5))
1679480231774:p3 <-  ggplot(pg.top5.s.both %>% dplyr::filter(id == "484736"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480231787:geom_point(alpha = 0.75, size = 2) +
1679480231805:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480231821:theme_classic() +
1679480231834:theme(plot.title = element_text(hjust = 0.5))
1679480232591:p4 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "714900"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480232613:geom_point(alpha = 0.75, size = 2) +
1679480232622:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480232636:theme_classic() +
1679480232652:theme(plot.title = element_text(hjust = 0.5))
1679480233557:p5 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "714906"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480233573:geom_point(alpha = 0.75, size = 2) +
1679480233590:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480233606:theme_classic() +
1679480233620:theme(plot.title = element_text(hjust = 0.5))
1679480234383:ggarrange(p1,p2,p3,p4,p5)
1679480354700:p1 <- ggplot(pg.top5.s.both %>% dplyr::filter(id == "316796"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480354706:geom_point(alpha = 0.75, size = 2) +
1679480354712:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480354718:theme_classic() +
1679480354723:theme(plot.title = element_text(hjust = 0.5)) +
1679480354728:scale_color_manual(values = cols)
1679480355158:p2 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "380465"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480355163:geom_point(alpha = 0.75, size = 2) +
1679480355169:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480355174:theme_classic() +
1679480355179:theme(plot.title = element_text(hjust = 0.5)) +
1679480355185:scale_color_manual(values = cols)
1679480355821:p3 <-  ggplot(pg.top5.s.both %>% dplyr::filter(id == "484736"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480355827:geom_point(alpha = 0.75, size = 2) +
1679480355833:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480355839:theme_classic() +
1679480355846:theme(plot.title = element_text(hjust = 0.5)) +
1679480355852:scale_color_manual(values = cols)
1679480356141:p4 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "714900"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480356146:geom_point(alpha = 0.75, size = 2) +
1679480356153:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480356159:theme_classic() +
1679480356166:theme(plot.title = element_text(hjust = 0.5)) +
1679480356171:scale_color_manual(values = cols)
1679480356429:p5 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "714906"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480356434:geom_point(alpha = 0.75, size = 2) +
1679480356440:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480356447:theme_classic() +
1679480356455:theme(plot.title = element_text(hjust = 0.5)) +
1679480356463:scale_color_manual(values = cols)
1679480357225:ggarrange(p1,p2,p3,p4,p5)
1679480471481:p1
1679480747859:# select top5 most significant peak-gene links
1679480747872:## add also the pearson coefficient as a columns
1679480747878:pg.top5.s <- pg.joined.s %>% top_n(5, pearson.r)
1679480748640:pg.top5.s.1 <- pg.top5.s[,1:23]
1679480749142:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679480749776:# long format
1679480749781:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679480750231:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679480750898:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679480751379:pg.top5.s.both
1679480752794:# set new ids
1679480752799:new.ids <- as.character(c(1:5))
1679480753166:names(new.ids) <- levels(pg.top5.s.both$id)
1679480753433:new.ids
1679480754124:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679480754131:geom_point(alpha = 0.75, size = 2) +
1679480754137:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679480754143:theme_classic() +
1679480754148:theme(plot.title = element_text(hjust = 0.5))
1679480756358:p1 <- ggplot(pg.top5.s.both %>% dplyr::filter(id == "316796"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480756364:geom_point(alpha = 0.75, size = 2) +
1679480756370:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480756379:theme_classic() +
1679480756390:theme(plot.title = element_text(hjust = 0.5)) +
1679480756399:scale_color_manual(values = cols)
1679480757072:p2 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "380465"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480757095:geom_point(alpha = 0.75, size = 2) +
1679480757101:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480757131:theme_classic() +
1679480757140:theme(plot.title = element_text(hjust = 0.5)) +
1679480757146:scale_color_manual(values = cols)
1679480757646:p3 <-  ggplot(pg.top5.s.both %>% dplyr::filter(id == "484736"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480757652:geom_point(alpha = 0.75, size = 2) +
1679480757659:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480757665:theme_classic() +
1679480757670:theme(plot.title = element_text(hjust = 0.5)) +
1679480757676:scale_color_manual(values = cols)
1679480758165:p4 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "714900"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480758177:geom_point(alpha = 0.75, size = 2) +
1679480758181:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480758186:theme_classic() +
1679480758192:theme(plot.title = element_text(hjust = 0.5)) +
1679480758198:scale_color_manual(values = cols)
1679480758743:p5 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "714906"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480758748:geom_point(alpha = 0.75, size = 2) +
1679480758752:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480758757:theme_classic() +
1679480758761:theme(plot.title = element_text(hjust = 0.5)) +
1679480758765:scale_color_manual(values = cols)
1679480760081:ggarrange(p1,p2,p3,p4,p5)
1679480769586:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679480769591:geom_point(alpha = 0.75, size = 2) +
1679480769595:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679480769601:theme_classic() +
1679480769606:theme(plot.title = element_text(hjust = 0.5))
1679480867643:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679480867649:geom_point(alpha = 0.75, size = 2) +
1679480867656:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679480867662:theme_classic() +
1679480867669:theme(plot.title = element_text(hjust = 0.5))
1679480928700:# select top5 most significant peak-gene links
1679480928705:## add also the pearson coefficient as a columns
1679480928711:pg.top5.s <- pg.joined.s %>% top_n(5, pearson.r)
1679480929060:pg.top5.s.1 <- pg.top5.s[,1:23]
1679480929342:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679480929537:# long format
1679480929542:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679480929769:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679480929985:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679480930182:pg.top5.s.both
1679480930442:# set new ids
1679480930446:new.ids <- as.character(c(1:5))
1679480930747:names(new.ids) <- levels(pg.top5.s.both$id)
1679480931046:new.ids
1679480931340:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679480931344:geom_point(alpha = 0.75, size = 2) +
1679480931349:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679480931353:theme_classic() +
1679480931357:theme(plot.title = element_text(hjust = 0.5))
1679480931738:p1 <- ggplot(pg.top5.s.both %>% dplyr::filter(id == "146686"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480931742:geom_point(alpha = 0.75, size = 2) +
1679480931747:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480931751:theme_classic() +
1679480931756:theme(plot.title = element_text(hjust = 0.5)) +
1679480931760:scale_color_manual(values = cols)
1679480932632:p2 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "18914"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480932637:geom_point(alpha = 0.75, size = 2) +
1679480932642:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480932646:theme_classic() +
1679480932650:theme(plot.title = element_text(hjust = 0.5)) +
1679480932655:scale_color_manual(values = cols)
1679480932685:p3 <-  ggplot(pg.top5.s.both %>% dplyr::filter(id == "441623"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480932690:geom_point(alpha = 0.75, size = 2) +
1679480932695:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480932700:theme_classic() +
1679480932704:theme(plot.title = element_text(hjust = 0.5)) +
1679480932709:scale_color_manual(values = cols)
1679480933235:p4 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "634342"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480933239:geom_point(alpha = 0.75, size = 2) +
1679480933244:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480933248:theme_classic() +
1679480933253:theme(plot.title = element_text(hjust = 0.5)) +
1679480933257:scale_color_manual(values = cols)
1679480933538:p5 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "757121"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679480933542:geom_point(alpha = 0.75, size = 2) +
1679480933547:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679480933551:theme_classic() +
1679480933556:theme(plot.title = element_text(hjust = 0.5)) +
1679480933561:scale_color_manual(values = cols)
1679480933824:ggarrange(p1,p2,p3,p4,p5)
1679481141287:p1
1679481162523:p1
1679482431987:# select top5 most significant peak-gene links
1679482431992:## add also the pearson coefficient as a columns
1679482431997:pg.top5.s <- pg.joined.s %>% top_n(5, spearman.r)
1679482432408:pg.top5.s.1 <- pg.top5.s[,1:23]
1679482432670:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679482432856:# long format
1679482432860:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679482433027:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679482433235:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679482433373:pg.top5.s.both
1679482433578:# set new ids
1679482433582:new.ids <- as.character(c(1:5))
1679482434082:names(new.ids) <- levels(pg.top5.s.both$id)
1679482434445:new.ids
1679482434806:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679482434811:geom_point(alpha = 0.75, size = 2) +
1679482434816:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679482434821:theme_classic() +
1679482434826:theme(plot.title = element_text(hjust = 0.5))
1679482435838:p1 <- ggplot(pg.top5.s.both %>% dplyr::filter(id == "316796"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679482435843:geom_point(alpha = 0.75, size = 2) +
1679482435847:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 1 most correlated peak-gene link. Id: 316796") +
1679482435851:theme_classic() +
1679482435857:theme(plot.title = element_text(hjust = 0.5)) +
1679482435861:scale_color_manual(values = cols)
1679482435889:p2 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "380465"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679482435893:geom_point(alpha = 0.75, size = 2) +
1679482435897:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 2 most correlated peak-gene link. Id: 380465") +
1679482435901:theme_classic() +
1679482435906:theme(plot.title = element_text(hjust = 0.5)) +
1679482435910:scale_color_manual(values = cols)
1679482436400:p3 <-  ggplot(pg.top5.s.both %>% dplyr::filter(id == "484736"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679482436405:geom_point(alpha = 0.75, size = 2) +
1679482436410:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 3 most correlated peak-gene link. Id: 484736") +
1679482436414:theme_classic() +
1679482436418:theme(plot.title = element_text(hjust = 0.5)) +
1679482436422:scale_color_manual(values = cols)
1679482436798:p4 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "714900"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679482436802:geom_point(alpha = 0.75, size = 2) +
1679482436806:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 4 most correlated peak-gene link. Id: 714900") +
1679482436811:theme_classic() +
1679482436816:theme(plot.title = element_text(hjust = 0.5)) +
1679482436820:scale_color_manual(values = cols)
1679482437303:p5 <-ggplot(pg.top5.s.both %>% dplyr::filter(id == "714906"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679482437308:geom_point(alpha = 0.75, size = 2) +
1679482437312:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-gene link. Id: 714906") +
1679482437316:theme_classic() +
1679482437321:theme(plot.title = element_text(hjust = 0.5)) +
1679482437325:scale_color_manual(values = cols)
1679482438788:ggarrange(p1,p2,p3,p4,p5)
1679485383413:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679485383418:geom_point(alpha = 0.75, size = 2) +
1679485383422:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679485383427:theme_classic() +
1679485383432:theme(plot.title = element_text(hjust = 0.5)) +
1679485383436:scale_color_manual(values = cols)
1679485397193:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679485397197:geom_point(alpha = 0.75, size = 2) +
1679485397201:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679485397206:theme_classic() +
1679485397210:theme(plot.title = element_text(hjust = 0.5))
1679485404932:p1 <- ggplot(pg.top5.s.both %>% dplyr::filter(id == "146686"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679485404936:geom_point(alpha = 0.75, size = 2) +
1679485404940:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "TTop 1 most correlated peak-gene link. Id: 146686") +
1679485404944:theme_classic() +
1679485404948:theme(plot.title = element_text(hjust = 0.5)) +
1679485404953:scale_color_manual(values = cols)
1679485409369:p1
1679485417759:# select top5 most significant peak-gene links
1679485417763:## add also the pearson coefficient as a columns
1679485417767:pg.top5.s <- pg.joined.s %>% top_n(5, pearson.r)
1679485418722:pg.top5.s.1 <- pg.top5.s[,1:23]
1679485419265:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679485419675:# long format
1679485419680:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679485420156:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679485420541:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679485421708:pg.top5.s.both
1679485422307:# set new ids
1679485422312:new.ids <- as.character(c(1:5))
1679485428346:pg.joined.s %>% top_n(5, pearson.r)
1679485438073:pg.top5.s.1 <- pg.top5.s[,1:23]
1679485439388:# select top5 most significant peak-gene links
1679485439392:## add also the pearson coefficient as a columns
1679485439396:pg.top5.s <- pg.joined.s %>% top_n(5, pearson.r)
1679485439633:pg.top5.s.1 <- pg.top5.s[,1:23]
1679485439861:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679485440345:# long format
1679485440350:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679485440930:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679485441138:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679485441305:pg.top5.s.both
1679485441767:# set new ids
1679485441771:new.ids <- as.character(c(1:5))
1679485442034:names(new.ids) <- levels(pg.top5.s.both$id)
1679485442143:new.ids
1679485442729:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679485442734:geom_point(alpha = 0.75, size = 2) +
1679485442738:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679485442743:theme_classic() +
1679485442747:theme(plot.title = element_text(hjust = 0.5))
1679485445305:p1 <- ggplot(pg.top5.s.both %>% dplyr::filter(id == "146686"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679485445310:geom_point(alpha = 0.75, size = 2) +
1679485445314:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "TTop 1 most correlated peak-gene link. Id: 146686") +
1679485445320:theme_classic() +
1679485445325:theme(plot.title = element_text(hjust = 0.5)) +
1679485445329:scale_color_manual(values = cols)
1679485448820:p1
1679485479343:# select top5 most significant peak-gene links
1679485479348:## add also the pearson coefficient as a columns
1679485479352:pg.top5.s <- pg.joined.s %>% top_n(5, spearman.r)
1679485479506:pg.top5.s.1 <- pg.top5.s[,1:23]
1679485479709:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679485479925:# long format
1679485479930:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679485480094:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679485480270:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679485480413:pg.top5.s.both
1679485480568:# set new ids
1679485480572:new.ids <- as.character(c(1:5))
1679485480927:names(new.ids) <- levels(pg.top5.s.both$id)
1679485481092:new.ids
1679485481470:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679485481475:geom_point(alpha = 0.75, size = 2) +
1679485481478:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679485481483:theme_classic() +
1679485481487:theme(plot.title = element_text(hjust = 0.5))
1679485497501:# select top5 most significant peak-gene links
1679485497505:top5.p <- joined.p %>% top_n(1, peak_gene.r)
1679485498112:top5.p.1 <- top5.p[,1:32]
1679485499866:top5.p.2 <- top5.p[,c(1:16, 33:48)]
1679485505496:# long format
1679485505501:top5.p.long.1 <- reshape2::melt(top5.p.1 , id.vars = colnames(top5.p)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679485506623:top5.p.long.2 <- reshape2::melt(top5.p.2, id.vars = colnames(top5.p)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679485507937:top5.p.both <- cbind(top5.p.long.1, top5.p.long.2[,17:ncol(top5.p.long.2)])
1679485508540:# assign informative colors to the cell type clusters
1679485508545:cols <- c("#FF6600", "#FF0000", "#CC0033", "#99FFFF", "#0099FF", "#33FF33", "#FF00FF", "#990000", "#FF3300", "#FFCC66", "#660066", "#0000FF", "#FFFF33", "#FF6666", "#FF9933", "#66FF99")
1679485509496:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679485509501:geom_point(alpha = 0.75, size = 2) +
1679485509505:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679485509509:theme_classic() +
1679485509513:theme(plot.title = element_text(hjust = 0.5)) +
1679485509518:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679485509522:scale_color_manual(values = cols)
1679485530924:joined.p %>% top_n(1, peak_gene.r)
1679485622345:# redoit but with all peak-gene links and putting pearson and spearman correlation coefficients in the same dataframe
1679485622349:# extract peak-genes from GRN ran with Spearman correlation
1679485622353:pg.links <- GRN.s@connections$all.filtered$`0` # IMPORTANT LINE
1679485625768:# redoit but with all peak-gene links and putting pearson and spearman correlation coefficients in the same dataframe
1679485625772:# extract peak-genes from GRN ran with Spearman correlation
1679485625777:pg.links <- GRN.s@connections$all.filtered$`0` # IMPORTANT LINE
1679485626048:colnames(pg.links)[4] <- "spearman.r"
1679485626349:# add pearson correlation values
1679485626354:pg.links$pearson.r <- GRN.p@connections$peak_genes$`0`$peak_gene.r
1679485631023:# select top5 most significant peak-gene links
1679485631028:## add also the pearson coefficient as a columns
1679485631032:pg.top5.s <- pg.joined.s %>% top_n(5, spearman.r)
1679485631130:pg.top5.s.1 <- pg.top5.s[,1:23]
1679485631190:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679485636974:# redoit but with all peak-gene links and putting pearson and spearman correlation coefficients in the same dataframe
1679485636978:# extract peak-genes from GRN ran with Spearman correlation
1679485636982:pg.links <- GRN.s@connections$all.filtered$`0` # IMPORTANT LINE
1679485641809:colnames(pg.links)
1679485653633:colnames(pg.links)[5] <- "spearman.r"
1679485665594:# add pearson correlation values
1679485665599:pg.links$pearson.r <- GRN.p@connections$all.filtered$`0`$peak_gene.r
1679485835078:# select top5 most significant peak-gene links
1679485835084:## add also the pearson coefficient as a columns
1679485835088:pg.top5.s <- pg.joined.s %>% top_n(5, spearman.r)
1679485835492:pg.top5.s.1 <- pg.top5.s[,1:23]
1679485837945:pg.top5.s.2 <- pg.top5.s[,c(1:7, 24:39)]
1679485838342:# long format
1679485838589:pg.top5.s.long.1 <- reshape2::melt(pg.top5.s.1 , id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.RNA", value.name = "value.RNA")
1679485838681:pg.top5.s.long.2 <- reshape2::melt(pg.top5.s.2, id.vars = colnames(pg.top5.s)[1:7], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679485839165:pg.top5.s.both <- cbind(pg.top5.s.long.1, pg.top5.s.long.2[,8:ncol(pg.top5.s.long.2)])
1679485839508:pg.top5.s.both
1679485839967:# set new ids
1679485839973:new.ids <- as.character(c(1:5))
1679485840365:names(new.ids) <- levels(pg.top5.s.both$id)
1679485840767:new.ids
1679485841228:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679485841233:geom_point(alpha = 0.75, size = 2) +
1679485841237:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679485841242:theme_classic() +
1679485841246:theme(plot.title = element_text(hjust = 0.5))
1679485845236:p1 <- ggplot(pg.top5.s.both %>% dplyr::filter(id == "316796"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679485845241:geom_point(alpha = 0.75, size = 2) +
1679485845245:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 1 most correlated peak-gene link. Id: 316796") +
1679485845250:theme_classic() +
1679485845254:theme(plot.title = element_text(hjust = 0.5)) +
1679485845259:scale_color_manual(values = cols)
1679485848023:p1
1679485859704:# select top5 most significant peak-gene links
1679485859709:## add also the pearson coefficient as a columns
1679485859713:top5.s <- joined.s %>% top_n(1, peak_gene.r)
1679485859968:top5.s.1 <- top5.s[,1:32]
1679485860291:top5.s.2 <- top5.s[,c(1:16, 33:48)]
1679485860494:# long format
1679485860498:top5.s.long.1 <- reshape2::melt(top5.s.1 , id.vars = colnames(top5.s)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679485860653:top5.s.long.2 <- reshape2::melt(top5.s.2, id.vars = colnames(top5.s)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679485860946:top5.s.both <- cbind(top5.s.long.1, top5.s.long.2[,17:ncol(top5.s.long.2)])
1679485861540:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679485861545:geom_point(alpha = 0.75, size = 2) +
1679485861549:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679485861553:theme_classic() +
1679485861558:theme(plot.title = element_text(hjust = 0.5)) +
1679485861562:scale_color_manual(values = cols)
1679485913598:# select top5 most significant peak-gene links
1679485913602:## add also the pearson coefficient as a columns
1679485913607:top5.s <- joined.s %>% top_n(1, peak_gene.r)
1679485914468:top5.s.1 <- top5.s[,1:32]
1679485914896:top5.s.2 <- top5.s[,c(1:16, 33:48)]
1679485915374:# long format
1679485915378:top5.s.long.1 <- reshape2::melt(top5.s.1 , id.vars = colnames(top5.s)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679485915720:top5.s.long.2 <- reshape2::melt(top5.s.2, id.vars = colnames(top5.s)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679485916604:top5.s.both <- cbind(top5.s.long.1, top5.s.long.2[,17:ncol(top5.s.long.2)])
1679485918447:top5.s.both
1679491582832:# select top5 most significant peak-gene links
1679491582837:top5.p <- joined.p %>% top_n(1, peak_gene.r)
1679491590596:library(GRaNIE)
1679491597284:library(dplyr)
1679491597432:library(qs)
1679491597468:library(ggplot2)
1679491597519:library(ggpubr)
1679491597840:library(pROC)
1679491597928:library(EnsDb.Hsapiens.v79)
1679491602984:library(UpSetR)
1679491603069:library(data.table)
1679491603375:library(ggrepel)
1679491609639:# PEARSON
1679491609644:# load eGRN
1679491609650:GRN.p <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1679491614923:# build eGRN
1679491614928:GRN.p = build_eGRN_graph(GRN.p, forceRerun = TRUE)
1679491616293:# SPEARMAN
1679491616306:GRN.s <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_spearman_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1679491621153:# build eGRN
1679491621158:GRN.s = build_eGRN_graph(GRN.s, forceRerun = TRUE)
1679491622829:GRN.p@connections$all.filtered #more connections
1679491623283:GRN.s@connections$all.filtered
1679491627408:# Set up the main directory
1679491627418:path = "/g/scb/zaugg/deuner/GRaNIE"
1679491628105:# Load the seurat object
1679491628109:seuratFile = "timecourse.pp.seuratObject.qs"
1679491628839:timecourse.s <- qread(paste0(path,"/tmp/",seuratFile))
1679491664860:## PEARSON
1679491664865:# TF-peak-gene connections here
1679491664869:GRN.p@connections$all.filtered[["0"]]
1679491665031:connections.p <- as.data.frame(GRN.p@connections$all.filtered[["0"]])
1679491711617:# SCT counts here
1679491711622:GRN.p@data[["RNA"]][["counts"]]
1679491712276:counts.p <- as.data.frame(GRN.p@data[["RNA"]][["counts"]])
1679491713518:counts.p$gene.ENSEMBL <- rownames(counts.p)
1679491713529:counts.p
1679491714734:# norm ATAC counts here
1679491714738:GRN.p@data[["peaks"]][["counts"]]
1679491715337:peaks.p <- as.data.frame(GRN.p@data[["peaks"]][["counts"]])
1679491715853:peaks.p$peak.ID <- rownames(peaks.p)
1679491716245:peaks.p
1679491718432:# connections + counts
1679491718436:joined.p <- connections.p %>% inner_join(counts.p, by = "gene.ENSEMBL") %>% inner_join(peaks.p, by = "peak.ID")
1679491726607:## SPEARMAN
1679491726612:# peak-gene connections here
1679491726617:GRN.s@connections$all.filtered[["0"]]
1679491728074:connections.s <- as.data.frame(GRN.s@connections$all.filtered[["0"]])
1679491741472:# SCT counts here
1679491741476:GRN.s@data[["RNA"]][["counts"]]
1679491742364:counts.s <- as.data.frame(GRN.s@data[["RNA"]][["counts"]])
1679491742793:counts.s$gene.ENSEMBL <- rownames(counts.s)
1679491743670:counts.s
1679491744085:# norm ATAC counts here
1679491744089:GRN.s@data[["peaks"]][["counts"]]
1679491744632:peaks.s <- as.data.frame(GRN.s@data[["peaks"]][["counts"]])
1679491745158:peaks.s$peak.ID <- rownames(peaks.s)
1679491745669:peaks.s
1679491746286:# connections + counts
1679491746292:joined.s <- connections.s %>% inner_join(counts.s, by = "gene.ENSEMBL") %>% inner_join(peaks.s, by = "peak.ID")
1679491749276:# check shared TF-peak-links
1679491749280:tf.peak.gene.p <- GRN.p@connections$all.filtered[["0"]]
1679491749905:tf.peak.gene.s <- GRN.s@connections$all.filtered[["0"]]
1679491750340:colnames(tf.peak.gene.p)
1679491751186:tf.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("TF.ID"))
1679491751535:gene.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("gene.name"))
1679491751899:peak.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("peak.ID"))
1679491761430:# select top5 most significant peak-gene links
1679491761441:top5.p <- joined.p %>% top_n(1, peak_gene.r)
1679491762426:top5.p.1 <- top5.p[,1:32]
1679491762438:top5.p.2 <- top5.p[,c(1:16, 33:48)]
1679491762747:# long format
1679491762752:top5.p.long.1 <- reshape2::melt(top5.p.1 , id.vars = colnames(top5.p)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679491763237:top5.p.long.2 <- reshape2::melt(top5.p.2, id.vars = colnames(top5.p)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679491766845:top5.p.both <- cbind(top5.p.long.1, top5.p.long.2[,17:ncol(top5.p.long.2)])
1679491767630:# assign informative colors to the cell type clusters
1679491767644:cols <- c("#FF6600", "#FF0000", "#CC0033", "#99FFFF", "#0099FF", "#33FF33", "#FF00FF", "#990000", "#FF3300", "#FFCC66", "#660066", "#0000FF", "#FFFF33", "#FF6666", "#FF9933", "#66FF99")
1679491769875:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679491769888:geom_point(alpha = 0.75, size = 2) +
1679491769901:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679491769944:theme_classic() +
1679491769950:theme(plot.title = element_text(hjust = 0.5)) +
1679491769955:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679491769960:scale_color_manual(values = cols)
1679491797066:ggplot(top5.p.both, aes(x = value.RNA, y = value.ATAC, col = cluster.RNA, label=TF.name)) +
1679491797071:geom_point(alpha = 0.75, size = 2) +
1679491797075:labs(x = "Gene Expression (SCT) log 10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679491797082:theme_classic() +
1679491797087:theme(plot.title = element_text(hjust = 0.5)) +
1679491797091:geom_text(hjust=0, vjust=0)
1679491802918:# set new ids
1679491802922:new.ids <- as.character(c(1:5))
1679491803471:names(new.ids) <- levels(pg.top5.s.both$id)
1679491820158:names(new.ids) <- levels(top5.p.both$id)
1679491821277:new.ids
1679491874485:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679491874491:geom_point(alpha = 0.75, size = 2) +
1679491874496:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679491874502:theme_classic() +
1679491874509:theme(plot.title = element_text(hjust = 0.5))
1679491903616:# select top5 most significant peak-gene links
1679491903621:top5.p <- joined.p %>% top_n(5, peak_gene.r)
1679491904103:top5.p.1 <- top5.p[,1:32]
1679491904524:top5.p.2 <- top5.p[,c(1:16, 33:48)]
1679491905321:# long format
1679491905325:top5.p.long.1 <- reshape2::melt(top5.p.1 , id.vars = colnames(top5.p)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679491905818:top5.p.long.2 <- reshape2::melt(top5.p.2, id.vars = colnames(top5.p)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679491905981:top5.p.both <- cbind(top5.p.long.1, top5.p.long.2[,17:ncol(top5.p.long.2)])
1679491907141:# assign informative colors to the cell type clusters
1679491907146:cols <- c("#FF6600", "#FF0000", "#CC0033", "#99FFFF", "#0099FF", "#33FF33", "#FF00FF", "#990000", "#FF3300", "#FFCC66", "#660066", "#0000FF", "#FFFF33", "#FF6666", "#FF9933", "#66FF99")
1679491907511:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679491907516:geom_point(alpha = 0.75, size = 2) +
1679491907521:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679491907525:theme_classic() +
1679491907530:theme(plot.title = element_text(hjust = 0.5)) +
1679491907535:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679491907539:scale_color_manual(values = cols)
1679491908281:table(joined.p$TF.ID)
1679491913443:ggplot(top5.p.both, aes(x = value.RNA, y = value.ATAC, col = cluster.RNA, label=TF.name)) +
1679491913448:geom_point(alpha = 0.75, size = 2) +
1679491913453:labs(x = "Gene Expression (SCT) log 10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679491913458:theme_classic() +
1679491913463:theme(plot.title = element_text(hjust = 0.5)) +
1679491913467:geom_text(hjust=0, vjust=0)
1679491916661:# set new ids
1679491916666:new.ids <- as.character(c(1:5))
1679491917177:names(new.ids) <- levels(top5.p.both$id)
1679491917736:new.ids
1679491918621:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679491918626:geom_point(alpha = 0.75, size = 2) +
1679491918631:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679491918636:theme_classic() +
1679491918641:theme(plot.title = element_text(hjust = 0.5))
1679491981514:# set new ids
1679491981518:new.ids <- as.character(c(1:5))
1679491982091:names(new.ids) <- levels(top5.p.both$id)
1679491982612:new.ids
1679491984155:ggplot(pg.top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679491984159:geom_point(alpha = 0.75, size = 2) +
1679491984164:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679491984168:theme_classic() +
1679491984172:theme(plot.title = element_text(hjust = 0.5))
1679491992037:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679491992047:geom_point(alpha = 0.75, size = 2) +
1679491992057:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679491992062:theme_classic() +
1679491992067:theme(plot.title = element_text(hjust = 0.5))
1679492012697:# set new ids
1679492012702:new.ids <- as.character(c(1:5))
1679492013125:top5.p.both$id <- new.ids
1679492013786:names(new.ids) <- levels(top5.p.both$id)
1679492014420:new.ids
1679492015298:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679492015305:geom_point(alpha = 0.75, size = 2) +
1679492015315:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679492015325:theme_classic() +
1679492015330:theme(plot.title = element_text(hjust = 0.5))
1679492027730:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492027736:geom_point(alpha = 0.75, size = 2) +
1679492027742:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679492027749:theme_classic() +
1679492027762:theme(plot.title = element_text(hjust = 0.5)) +
1679492027776:scale_color_manual(values = cols)
1679492173250:# select top5 most significant peak-gene links
1679492173256:top5.p <- joined.p %>% top_n(5, peak_gene.r)
1679492173518:top5.p.1 <- top5.p[,1:32]
1679492173917:top5.p.2 <- top5.p[,c(1:16, 33:48)]
1679492174261:# long format
1679492174265:top5.p.long.1 <- reshape2::melt(top5.p.1 , id.vars = colnames(top5.p)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679492174500:top5.p.long.2 <- reshape2::melt(top5.p.2, id.vars = colnames(top5.p)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679492174809:top5.p.both <- cbind(top5.p.long.1, top5.p.long.2[,17:ncol(top5.p.long.2)])
1679492175123:# assign informative colors to the cell type clusters
1679492175127:cols <- c("#FF6600", "#FF0000", "#CC0033", "#99FFFF", "#0099FF", "#33FF33", "#FF00FF", "#990000", "#FF3300", "#FFCC66", "#660066", "#0000FF", "#FFFF33", "#FF6666", "#FF9933", "#66FF99")
1679492175475:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492175480:geom_point(alpha = 0.75, size = 2) +
1679492175484:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679492175488:theme_classic() +
1679492175492:theme(plot.title = element_text(hjust = 0.5)) +
1679492175497:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679492175501:scale_color_manual(values = cols)
1679492178035:table(joined.p$TF.ID)
1679492178458:ggplot(top5.p.both, aes(x = value.RNA, y = value.ATAC, col = cluster.RNA, label=TF.name)) +
1679492178462:geom_point(alpha = 0.75, size = 2) +
1679492178466:labs(x = "Gene Expression (SCT) log 10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679492178471:theme_classic() +
1679492178475:theme(plot.title = element_text(hjust = 0.5)) +
1679492178480:geom_text(hjust=0, vjust=0)
1679492181414:# set new ids
1679492181418:new.ids <- as.character(c(1:5))
1679492181958:top5.p.both$id <- new.ids
1679492182167:names(new.ids) <- levels(top5.p.both$id)
1679492182661:new.ids
1679492187226:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679492187230:geom_point(alpha = 0.75, size = 2) +
1679492187235:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679492187239:theme_classic() +
1679492187243:theme(plot.title = element_text(hjust = 0.5))
1679492192612:p1 <- ggplot(top5.p.both %>% dplyr::filter(id == "146686"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492192618:geom_point(alpha = 0.75, size = 2) +
1679492192624:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "TTop 1 most correlated peak-gene link. Id: 146686") +
1679492192629:theme_classic() +
1679492192634:theme(plot.title = element_text(hjust = 0.5)) +
1679492192638:scale_color_manual(values = cols)
1679492244638:p1 <- ggplot(top5.p.both %>% dplyr::filter(id == "1"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492244643:geom_point(alpha = 0.75, size = 2) +
1679492244648:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "TTop 1 most correlated peak-gene link") +
1679492244653:theme_classic() +
1679492244658:theme(plot.title = element_text(hjust = 0.5)) +
1679492244663:scale_color_manual(values = cols)
1679492245428:p2 <-ggplot(top5.p.both %>% dplyr::filter(id == "2"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492245433:geom_point(alpha = 0.75, size = 2) +
1679492245438:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 2 most correlated peak-gene link") +
1679492245443:theme_classic() +
1679492245448:theme(plot.title = element_text(hjust = 0.5)) +
1679492245453:scale_color_manual(values = cols)
1679492245887:p3 <-  ggplot(top5.p.both %>% dplyr::filter(id == "3"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492245892:geom_point(alpha = 0.75, size = 2) +
1679492245900:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 3 most correlated peak-gene link") +
1679492245906:theme_classic() +
1679492245914:theme(plot.title = element_text(hjust = 0.5)) +
1679492245922:scale_color_manual(values = cols)
1679492246247:p4 <-ggplot(top5.p.both %>% dplyr::filter(id == "4"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492246252:geom_point(alpha = 0.75, size = 2) +
1679492246258:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 4 most correlated peak-gene link") +
1679492246262:theme_classic() +
1679492246267:theme(plot.title = element_text(hjust = 0.5)) +
1679492246272:scale_color_manual(values = cols)
1679492246685:p5 <-ggplot(top5.p.both %>% dplyr::filter(id == "5"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492246690:geom_point(alpha = 0.75, size = 2) +
1679492246695:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-gene link") +
1679492246710:theme_classic() +
1679492246716:theme(plot.title = element_text(hjust = 0.5)) +
1679492246722:scale_color_manual(values = cols)
1679492247291:ggarrange(p1,p2,p3,p4,p5)
1679492419699:p1
1679492594038:p2
1679492681100:# select top5 most significant peak-gene links
1679492681111:## add also the pearson coefficient as a columns
1679492681123:top5.s <- joined.s %>% top_n(1, peak_gene.r)
1679492685649:# select top5 most significant peak-gene links
1679492685661:## add also the pearson coefficient as a columns
1679492685674:top5.s <- joined.s %>% top_n(5, peak_gene.r)
1679492686377:top5.s.1 <- top5.s[,1:32]
1679492686788:top5.s.2 <- top5.s[,c(1:16, 33:48)]
1679492687340:# long format
1679492687353:top5.s.long.1 <- reshape2::melt(top5.s.1 , id.vars = colnames(top5.s)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679492687707:top5.s.long.2 <- reshape2::melt(top5.s.2, id.vars = colnames(top5.s)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679492688134:top5.s.both <- cbind(top5.s.long.1, top5.s.long.2[,17:ncol(top5.s.long.2)])
1679492694692:# set new ids
1679492694696:new.ids <- as.character(c(1:5))
1679492695178:top5.s.both$id <- new.ids
1679492695793:names(new.ids) <- levels(top5.p.both$id)
1679492700847:names(new.ids) <- levels(top5.s.both$id)
1679492701555:new.ids
1679492774398:# select top5 most significant peak-gene links
1679492774402:## add also the pearson coefficient as a columns
1679492774407:top5.s <- joined.s %>% top_n(5, peak_gene.r)
1679492774571:top5.s.1 <- top5.s[,1:32]
1679492774933:top5.s.2 <- top5.s[,c(1:16, 33:48)]
1679492775078:# long format
1679492775082:top5.s.long.1 <- reshape2::melt(top5.s.1 , id.vars = colnames(top5.s)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679492775187:top5.s.long.2 <- reshape2::melt(top5.s.2, id.vars = colnames(top5.s)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679492775703:top5.s.both <- cbind(top5.s.long.1, top5.s.long.2[,17:ncol(top5.s.long.2)])
1679492776005:# set new ids
1679492776009:new.ids <- as.character(c(1:5))
1679492776264:top5.s.both$id <- new.ids
1679492776456:names(new.ids) <- levels(top5.s.both$id)
1679492776633:new.ids
1679492777083:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679492777088:geom_point(alpha = 0.75, size = 2) +
1679492777092:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679492777097:theme_classic() +
1679492777101:theme(plot.title = element_text(hjust = 0.5))
1679492782803:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492782808:geom_point(alpha = 0.75, size = 2) +
1679492782813:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679492782818:theme_classic() +
1679492782822:theme(plot.title = element_text(hjust = 0.5)) +
1679492782827:scale_color_manual(values = cols)
1679492786457:p1 <- ggplot(top5.s.both %>% dplyr::filter(id == "1"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492786462:geom_point(alpha = 0.75, size = 2) +
1679492786467:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 1 most correlated peak-gene link") +
1679492786472:theme_classic() +
1679492786478:theme(plot.title = element_text(hjust = 0.5)) +
1679492786483:scale_color_manual(values = cols)
1679492788344:p2 <-ggplot(top5.s.both %>% dplyr::filter(id == "2"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492788349:geom_point(alpha = 0.75, size = 2) +
1679492788354:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 2 most correlated peak-gene link") +
1679492788359:theme_classic() +
1679492788363:theme(plot.title = element_text(hjust = 0.5)) +
1679492788371:scale_color_manual(values = cols)
1679492788943:p3 <-  ggplot(top5.s.both %>% dplyr::filter(id == "3"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492788948:geom_point(alpha = 0.75, size = 2) +
1679492788953:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 3 most correlated peak-gene link") +
1679492788958:theme_classic() +
1679492788963:theme(plot.title = element_text(hjust = 0.5)) +
1679492788968:scale_color_manual(values = cols)
1679492789419:p4 <-ggplot(top5.s.both %>% dplyr::filter(id == "4"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492789424:geom_point(alpha = 0.75, size = 2) +
1679492789429:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 4 most correlated peak-gene link") +
1679492789439:theme_classic() +
1679492789444:theme(plot.title = element_text(hjust = 0.5)) +
1679492789450:scale_color_manual(values = cols)
1679492789962:p5 <-ggplot(top5.s.both %>% dplyr::filter(id == "5"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679492789966:geom_point(alpha = 0.75, size = 2) +
1679492789972:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-gene link") +
1679492789976:theme_classic() +
1679492789981:theme(plot.title = element_text(hjust = 0.5)) +
1679492789986:scale_color_manual(values = cols)
1679492790744:ggarrange(p1,p2,p3,p4,p5)
1679493164263:p1
1679493325494:p4
1679493460547:p5
1679494336159:# Load libraries
1679494336170:library(GRaNIE)
1679494336840:library(Seurat)
1679494337027:library(qs)
1679494337164:library(dplyr)
1679494337343:# Set up source of helper functions (spearman correlation)
1679494337354:source("/g/scb/zaugg/deuner/GRaNIE/code/GRaNIE_spearman_helper_functions.R")
1679494338106:# Set genome assembly version
1679494338124:genomeAssembly = "hg38"
1679494338435:# Set up the main directory
1679494338442:path = "/g/scb/zaugg/deuner/GRaNIE"
1679494338606:# Use Zaugg internal TFBS folder
1679494338633:TFBS_folder = NULL
1679494338773:# Load feature file that gives Ensembl IDs and gene names to translate names to Ensembl IDs.
1679494338778:file_RNA_features = paste0("/g/zaugg/carnold/Projects/GRN_pipeline/misc/singleCell/sharedMetadata/features_RNA_", genomeAssembly, ".tsv.gz")
1679494339076:# Load the seurat object
1679494339086:seuratFile = "timecourse.pp.seuratObject.qs"
1679494339470:timecourse.s <- qread(paste0(path,"/tmp/",seuratFile))
1679494359617:# Path to the output directory
1679494359629:seurat_outputFolder = paste0(path,"/outputdata/timecourse_batch_mode")
1679494590897:# Set up the main directory
1679494590903:path = "/g/scb2/zaugg/deuner/GRaNIE"
1679494596552:# Path to the output directory
1679494596558:seurat_outputFolder = paste0(path,"/outputdata/timecourse_batch_mode")
1679494598366:runGRaNIE_batchMode(datasetName = "Timecourse_Dataset",
1679494598373:inputDir = seurat_outputFolder,
1679494598379:outputDir = paste0(seurat_outputFolder, "/Batch_Mode_Outputs"),
1679494598386:clusterResolutions = c(18,20),
1679494598392:genomeAssembly = genomeAssembly,
1679494598399:TFBS_folder = TFBS_folder,
1679494598405:nCores = 8,
1679494598411:TF_peak.fdr.threshold = 0.2,
1679494598417:peak_gene.fdr.threshold = 0.1,
1679494598423:runNetworkAnalyses = FALSE,
1679494598428:forceRerun = TRUE)
1679498607223:# load libraries
1679498607232:library(dplyr)
1679498608272:library(Seurat)
1679498667144:# set path to ChiP-seq data
1679498667150:path <- "/g/scb2/zaugg/deuner/ChipSeqData"
1679498893087:# set path to ChiP-seq data
1679498893092:path <- "/g/scb2/zaugg/deuner/ChipSeqData/"
1679498899034:ci <- read.csv(paste0(path, "remap2022_cortical-interneuron_all_macs2_hg38_v1_0.bed.gz"))
1679498903345:View(ci)
1679498914610:ci <- read.csv(paste0(path, "remap2022_cortical-interneuron_all_macs2_hg38_v1_0.bed.gz"), sep = " ")
1679498918006:View(ci)
1679498931943:ci <- read.csv(paste0(path, "remap2022_cortical-interneuron_all_macs2_hg38_v1_0.bed.gz"), sep = "\t")
1679498938039:View(ci)
1679499161429:ci <- read.csv(paste0(path, "remap2022_cortical-interneuron_all_macs2_hg38_v1_0.bed.gz"), sep = ".")
1679499168415:View(ci)
1679499316234:ci <- read.csv(paste0(path, "remap2022_cortical-interneuron_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679499320211:View(ci)
1679499595129:# dataframe where all the filtered chip-seq data will be stored
1679499595134:chip <- data.frame()
1679499596438:chip
1679499657811:library(qs)
1679499703158:# get gene names (hence TF names) present in timecourse dataset
1679499703163:timecourse.s <- qread("/g/scb/zaugg/deuner/GRaNIE/tmp/timecourse.pp.seuratObject.qs")
1679499717330:DefaultAssay(timecourse.s) <- "RNA"
1679499723051:tc.gene.names <- rownames(timecourse.s)
1679499725274:tc.gene.names
1679499768415:# iterate over bed files and filter for TFs present in the timecourse dataset
1679499768419:for (celltype in celltypes){
1679499768424:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679499768429:bed <- bed %>% filter(V2 %in% tc.gene.names)
1679499768434:chip <- rbind(chip, bed)
1679499768439:}
1679499771997:# cell types for which I have Chip-Seq data
1679499772002:celltypes <- c("cortical-interneuron", "dopaminergic-neuron", "hiPSC", "neural-progenitor", "neuron", "neuron-progenitor", "NPC")
1679499779743:# dataframe where all the filtered chip-seq data will be stored
1679499779748:chip <- data.frame()
1679499780445:# get gene names (hence TF names) present in timecourse dataset
1679499780450:timecourse.s <- qread("/g/scb/zaugg/deuner/GRaNIE/tmp/timecourse.pp.seuratObject.qs")
1679499910118:# iterate over bed files and filter for TFs present in the timecourse dataset
1679499910123:for (celltype in celltypes){
1679499910127:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679499910132:bed <- bed %>% filter(V2 %in% tc.gene.names)
1679499910136:chip <- rbind(chip, bed)
1679499910141:}
1679499921130:# iterate over bed files and filter for TFs present in the timecourse dataset
1679499921136:for (celltype in celltypes){
1679499921141:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679499921147:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names)
1679499921152:chip <- rbind(chip, bed)
1679499921157:}
1679500051978:# dataframe where all the filtered chip-seq data will be stored
1679500051983:chip <- data.frame(matrix(ncol = 5, nrow = 0))
1679500052806:colnames(chip) <- c("V1", "V2", "V3", "V4", "V5")
1679500054813:# iterate over bed files and filter for TFs present in the timecourse dataset
1679500054818:for (celltype in celltypes){
1679500054822:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679500054828:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names)
1679500054832:chip <- rbind(chip, bed)
1679500054837:}
1679500084248:# dataframe where all the filtered chip-seq data will be stored
1679500084263:chip <- data.frame(matrix(ncol = 5, nrow = 0))
1679500084531:colnames(chip) <- c("V1", "V2", "V3", "V4", "V5")
1679500086662:chip
1679500106226:colnames(ci)
1679500111154:class(colnames(ci))
1679500116933:class(colnames(chip))
1679500123037:colnames(ci))
1679500127034:colnames(ci)
1679500127487:colnames(chip)
1679500141752:# iterate over bed files and filter for TFs present in the timecourse dataset
1679500141757:for (celltype in celltypes){
1679500141762:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679500141768:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names)
1679500141774:print(celltype)
1679500141779:chip <- rbind(chip, bed)
1679500141784:}
1679500189648:np <- read.csv(paste0(path, "remap2022_neural-progenitor_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679500193456:np
1679500200973:View(np)
1679500277679:# iterate over bed files and filter for TFs present in the timecourse dataset
1679500277684:for (celltype in celltypes){
1679500277688:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679500277693:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names) %>% dplyr::select(c("V1", "V2", "V3"))
1679500277697:print(celltype)
1679500277701:chip <- rbind(chip, bed)
1679500277706:}
1679500285929:# dataframe where all the filtered chip-seq data will be stored
1679500285934:chip <- data.frame(matrix(ncol = 5, nrow = 0))
1679500286151:colnames(chip) <- c("V1", "V2", "V3")
1679500288171:# iterate over bed files and filter for TFs present in the timecourse dataset
1679500288176:for (celltype in celltypes){
1679500288181:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679500288186:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names) %>% dplyr::select(c("V1", "V2", "V3"))
1679500288191:print(celltype)
1679500288196:chip <- rbind(chip, bed)
1679500288201:}
1679500317103:chip
1679500407354:View(chip)
1679500503210:# iterate over bed files and filter for TFs present in the timecourse dataset
1679500503215:for (celltype in celltypes){
1679500503220:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679500503224:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names) %>% dplyr::select(c("V1", "V2")) %>% cbind(rep(celltype, nrow(bed)))
1679500503231:print(celltype)
1679500503236:chip <- rbind(chip, bed)
1679500503241:}
1679500664777:# iterate over bed files and filter for TFs present in the timecourse dataset
1679500664782:for (celltype in celltypes){
1679500664791:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679500664796:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names) %>% dplyr::select(c("V1", "V2")) %>% mutate(V3 = rep(celltype, nrow(bed)))
1679500664801:print(celltype)
1679500664814:chip <- rbind(chip, bed)
1679500664824:}
1679500720138:# dataframe where all the filtered chip-seq data will be stored
1679500720143:chip <- data.frame(matrix(ncol = 5, nrow = 0))
1679500720732:colnames(chip) <- c("V1", "V2")
1679500722203:# iterate over bed files and filter for TFs present in the timecourse dataset
1679500722209:for (celltype in celltypes){
1679500722216:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1679500722225:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names) %>% dplyr::select(c("V1", "V2"))
1679500722234:bed <- bed %>% mutate(V3 = rep(celltype, nrow(bed)))
1679500722242:print(celltype)
1679500722248:chip <- rbind(chip, bed)
1679500722254:}
1679500747903:View(chip)
1679500845096:library(stringr)
1679500873601:# split first column
1679500873606:str_split_fixed(bed$V1, "\t")
1679500878249:# split first column
1679500878254:str_split_fixed(bed$V1, "\t",4)
1679500928057:library(tidyr)
1679500975652:# split first column
1679500975657:bed %>% separate(V1, c("chr", "chromStart", "chromEnd", "exp"), "\t")
1679501037751:colnames(bed)[5:6] <- c("TF", "celltype")
1679501042916:# split first column
1679501042921:bed <- bed %>% separate(V1, c("chr", "chromStart", "chromEnd", "exp"), "\t")
1679501069220:colnames(bed)[5:6] <- c("TF", "celltype")
1679501072775:head(bed)
1679501093243:# split first column and add apropriate column names
1679501093257:chip <- chip %>% separate(V1, c("chr", "chromStart", "chromEnd", "exp"), "\t")
1679501223227:colnames(chip)[5:6] <- c("TF", "celltype")
1679501224840:head(chip)
1679501289764:library(gzfile)
1679501300130:gzfile
1679501433545:# save file
1679501433550:write.csv(chip, file = gzfile("/g/scb2/zaugg/deuner/ChipSeqData/filtered_chipseq_timecourse.csv.gz"))
1679502081829:# filter for peaks found in the timecourse dataset
1679502081835:DefaultAssay(timecourse.s) <- "ATAC"
1679502088703:library(Seurat)
1679502093352:# filter for peaks found in the timecourse dataset
1679502093356:DefaultAssay(timecourse.s) <- "ATAC"
1679502094665:tc.peaks <- rownames(timecourse.s)
1679502099469:tc.peaks
1679502220708:library(GenomicRanges)
1679502277885:# use findOverlaps method from GenomicRanges
1679502277889:qry <-  makeGRangesFromDataFrame(tc.peaks, keep.extra.columns = TRUE)
1679502294933:tc.peaks <- rownames(timecourse.s)
1679502297082:tc.peaks
1679502316887:library(stringr)
1679502342947:str_split_fixed(tc.peaks, "-", 3)
1679502353633:as.data.frame(str_split_fixed(tc.peaks, "-", 3))
1679502384517:colnames(tc.peaks) <- c("chr", "chromStart", "chromEnd")
1679502391420:tc.peaks <- as.data.frame(str_split_fixed(tc.peaks, "-", 3))
1679502392881:colnames(tc.peaks) <- c("chr", "chromStart", "chromEnd")
1679502400406:# use findOverlaps method from GenomicRanges
1679502400411:qry <-  makeGRangesFromDataFrame(tc.peaks, keep.extra.columns = TRUE)
1679502403336:qry
1679502409632:ref <-  makeGRangesFromDataFrame(chip)
1679502439118:chip <- read.csv("/g/scb2/zaugg/deuner/ChipSeqData/filtered_chipseq_timecourse.csv.gz")
1679502471012:ref <-  makeGRangesFromDataFrame(chip)
1679502476329:ref
1679502480220:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1679502482635:ovlp
1679502576375:head(ovlp)
1679502611742:# use findOverlaps method from GenomicRanges
1679502611747:ref <-  makeGRangesFromDataFrame(tc.peaks, keep.extra.columns = TRUE)
1679502612725:qry <-  makeGRangesFromDataFrame(chip)
1679502615866:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1679502617309:head(ovlp)
1679502929988:ovlp.indx <- ovlp@to
1679502930784:# subset baits overlapping timecourse gene promoters
1679502930789:chip <-  chip[ovlp.indx,]
1679502934310:head(chip)
1679502989523:head(ovlp)
1679502996888:ovlp.indx <- unique(ovlp@to)
1679503003933:# read file
1679503003938:chip <- read.csv("/g/scb2/zaugg/deuner/ChipSeqData/filtered_chipseq_timecourse.csv.gz")
1679503018268:head(ovlp)
1679503024060:ovlp.indx <- unique(ovlp@to)
1679503028760:# subset baits overlapping timecourse gene promoters
1679503028764:chip <-  chip[ovlp.indx,]
1679503031808:chip
1679503055474:chip <- chip[,2:ncol(chip)]
1679503056154:head(chip)
1679503065652:# save file
1679503065657:write.csv(chip, file = gzfile("/g/scb2/zaugg/deuner/ChipSeqData/filtered_chipseq_timecourse.csv.gz"))
1679562673836:library(Seurat)
1679562684856:library(qs)
1679562684970:library(sctransform)
1679562685001:library(ggplot2)
1679562685035:library(BiocParallel)
1679562685244:library(scDblFinder)
1679562704635:library(dplyr)
1679562704678:library(monocle3)
1679562713123:library(harmony)
1679562713401:library(Signac)
1679562804136:# Read object
1679562804143:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1679562809742:# Set up working directory
1679562809748:work.dir <- "/g/scb/zaugg/deuner/GRaNIE/"
1679562813359:# Read object
1679562813364:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1679563018377:FeaturePlot(comb.s, reduction = "umap", features = c("nCount_RNA", "nFeature_RNA", "percent.mt", "percent.ribo"))
1679563047140:DefaultAssay(comb.s) <- "ATAC"
1679563055070:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1679563056144:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1679563057075:p1 + p2
1679563137897:comb.s@assays$ATAC
1679563144884:comb.s@assays$ATAC@counts
1679563152286:comb.s@assays$ATAC@data
1679563189701:comb.s@assays$ATAC@data
1679563269839:# Visualize QC metrics as a violin plot
1679563269844:Idents(comb.s) <- comb.s@meta.data$orig.ident
1679563270979:VlnPlot(comb.s, features = c("nFeature_ATAC", "nCount_ATAC", "percent.mt", "percent.ribo"), ncol = 2)
1679563279412:# Visualize some more metrics
1679563279421:plot1 <- FeatureScatter(comb.s, feature1 = "nCount_ATAC", feature2 = "percent.mt") + geom_hline(yintercept=15, linetype="dashed", color = "darkred")
1679563283348:plot2 <- FeatureScatter(comb.s, feature1 = "nCount_ATAC", feature2 = "nFeature_ATAC") + geom_hline(yintercept=11500, linetype="dashed", color = "darkred")
1679563406202:## Normalisation and Dimensionality Reduction
1679563406207:comb.s <- RunTFIDF(comb.s)
1679563431720:comb.s <- FindTopFeatures(comb.s)
1679563434139:comb.s <- RunSVD(comb.s)
1679563670764:## Non-linear dimensionality reduction (UMAP)
1679563670769:# We exclude the first dimension as this is typically correlated with sequencing depth
1679563670773:DepthCor(comb.s)
1679563677384:# Visualize ATAC space
1679563677389:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:20, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn")
1679563782557:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1679563784107:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1679563785929:p1 + p2
1679563881307:## Normalisation and Dimensionality Reduction
1679563881313:comb.s <- RunTFIDF(comb.s)
1679563961367:comb.s <- FindTopFeatures(comb.s, min.cutoff = 10)
1679564012743:comb.s <- RunSVD(comb.s)
1679564297247:comb.s@reductions
1679564416034:# Visualize ATAC space
1679564416043:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:30, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn", assay = "ATAC")
1679564467365:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1679564468190:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1679564469057:p1 + p2
1679564553714:comb.s <- RunSLSI(comb.s, assay = "ATAC")
1679564572852:comb.s@graphs
1679564586716:comb.s@graphs$SCT_nn
1679564651777:## Normalisation and Dimensionality Reduction
1679564651781:comb.s <- RunTFIDF(comb.s, method = 3)
1679564719603:comb.s <- FindTopFeatures(comb.s, min.cutoff = 10)
1679564819849:comb.s <- RunSVD(comb.s)
1679565096041:# Visualize ATAC space
1679565096045:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:20, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn", assay = "ATAC")
1679565142592:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1679565143257:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1679565144245:p1 + p2
1679565180986:# Load merged Seurat Object
1679565180996:combined.path <- "/g/scb/zaugg/deuner/SCENIC+/inputdata/"
1679565186517:combined.s <- qread(paste0(combined.path, "multiome.combined.seuratObject.qs"))
1679565251242:combined.s@reductions
1679565255453:combined.s@reductions
1679565261894:combined.s@graphs
1679565274504:combined.s@assays$ATAC@ranges
1679565286310:combined.s@assays$ATAC@fragments
1679565291866:combined.s@assays$ATAC@counts
1679565296804:combined.s@assays$ATAC@data
1679565383845:## Normalisation and Dimensionality Reduction
1679565383850:comb.s@assays$ATAC@data
1679565388631:## Normalisation and Dimensionality Reduction
1679565388637:comb.s@assays$ATAC@scale.data
1679565398272:## Normalisation and Dimensionality Reduction
1679565398278:comb.s@assays$ATAC@data <- NULL
1679565476452:## Normalisation and Dimensionality Reduction
1679565476456:comb.s@assays$ATAC@data
1679565487069:## Normalisation and Dimensionality Reduction
1679565487077:combined.s@assays$ATAC@data
1679565801387:combined.s
1679565814166:combined.s@assays$ATAC
1679565820774:combined.s@assays$ATAC@data
1679565946798:combined.s@assays$SCT
1679566183712:## Normalisation and Dimensionality Reduction
1679566183717:comb.s <- RunTFIDF(comb.s, slot = counts)
1679566231132:comb.s<2ass
1679566240404:comb.s@assays$ATAC@data
1679566250213:comb.s <- FindTopFeatures(comb.s, min.cutoff = 10)
1679566255276:comb.s <- RunSVD(comb.s)
1679566528402:## Non-linear dimensionality reduction (UMAP)
1679566528408:# We exclude the first dimension as this is typically correlated with sequencing depth
1679566528413:DepthCor(comb.s)
1679566531787:# Visualize ATAC space
1679566531792:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:20, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn", assay = "ATAC")
1679566579740:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1679566583536:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1679566584130:p1 + p2
1679567173159:# load libraries
1679567173164:library(GRaNIE)
1679567177774:library(dplyr)
1679567177785:library(qs)
1679567177795:library(ggplot2)
1679567177805:library(ggpubr)
1679567178166:library(pROC)
1679567178285:library(EnsDb.Hsapiens.v79)
1679567182894:library(UpSetR)
1679567182976:library(data.table)
1679567183063:library(ggrepel)
1679567186781:# Set up path of the cluster resolutions eGRNs
1679567186786:path <- "/g/scb2/zaugg/deuner/GRaNIE/outputdata/timecourse_batch_mode/Batch_Mode_Outputs/"
1679567187979:# set vector with the resolutions
1679567187985:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679567189100:# create data.frame to store each GRN metrics
1679567189106:GRN.metrics <- data.frame(matrix(ncol = 7, nrow = 0))
1679567189711:metrics.names <- c("res", "uniqueTFs", "uniquePEAKs", "uniqueGENEs", "TF.PEAK.links", "PEAK.GENE.links", "TF.PEAK.GENE.links")
1679567192145:colnames(GRN.metrics) <- metrics.names
1679567192881:# iterate over GRNs
1679567192901:for (res in resolutions){
1679567192911:# set up GRN directory
1679567192916:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679567192921:# read GRN object
1679567192927:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679567192936:# vector to store the GRN metrics
1679567192941:metrics <- c(res)
1679567192950:# retrieve metrics from the GRN
1679567192955:GRN.uniqueTFs <- GRN@connections$all.filtered$`0` %>% pull("TF.name") %>% unique() %>% as.data.frame()
1679567192964:GRN.uniqueTFs.len <- GRN.uniqueTFs %>% nrow()
1679567192973:metrics <- c(metrics, GRN.uniqueTFs.len)
1679567192978:GRN.uniquePEAKs <- GRN@connections$all.filtered$`0` %>% pull("peak.ID") %>% unique() %>% as.data.frame()
1679567192984:GRN.uniquePEAKs.len <- GRN.uniquePEAKs %>% nrow()
1679567192990:metrics <- c(metrics, GRN.uniquePEAKs.len)
1679567192995:GRN.uniqueGENEs <- GRN@connections$all.filtered$`0` %>% pull("gene.name") %>% unique() %>% as.data.frame()
1679567193000:GRN.uniqueGENEs.len <- GRN.uniqueGENEs %>% nrow()
1679567193005:metrics <- c(metrics, GRN.uniqueGENEs.len)
1679567193011:GRN.TF_peak.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID")) %>% distinct()
1679567193016:GRN.TF_peak.links.len <- GRN.TF_peak.links %>% nrow()
1679567193022:metrics <- c(metrics, GRN.TF_peak.links.len)
1679567193028:GRN.peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("gene.name", "peak.ID")) %>% distinct()
1679567193034:GRN.peak_gene.links.len <- GRN.peak_gene.links%>% nrow()
1679567193039:metrics <- c(metrics, GRN.peak_gene.links.len)
1679567193045:GRN.TF_peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID", "gene.name")) %>% distinct()
1679567193050:GRN.TF_peak_gene.links.len <- GRN.TF_peak_gene.links %>% nrow()
1679567193055:metrics <- c(metrics, GRN.TF_peak_gene.links.len)
1679567193065:# store the GRN metrics in the dataframe containing all GRNs metrics
1679567193071:names(metrics) <- metrics.names
1679567193078:GRN.metrics <- GRN.metrics %>% rbind(metrics)
1679567193091:# store the TF-PEAK-GENE links in independent dataframes
1679567193109:assign(paste("TF.PEAK.GENE", res, sep = "."), GRN.TF_peak_gene.links)
1679567193117:assign(paste("PEAK.GENE", res, sep = "."), GRN.peak_gene.links)
1679567193122:assign(paste("TF.PEAK", res, sep = "."), GRN.TF_peak.links)
1679567193127:assign(paste("TFs", res, sep = "."), GRN.uniqueTFs)
1679567193131:assign(paste("PEAKs", res, sep = "."), GRN.uniquePEAKs)
1679567193136:assign(paste("GENEs", res, sep = "."), GRN.uniqueGENEs)
1679567193144:# remove GRN object from memory
1679567193148:rm(GRN)
1679567193154:# reset metrics vector
1679567193160:metrics <- c()
1679567193165:}
1679567247657:combined.s@graphs
1679567250648:combined.s@reductions
1679567258412:combined.s@meta.data
1679567262851:# rename the columns because somehow they do not show up
1679567262856:colnames(GRN.metrics) <- metrics.names
1679567263320:GRN.metrics$res <- as.factor(GRN.metrics$res)
1679567263748:colnames(GRN.metrics)
1679567264487:p1 <- ggplot(GRN.metrics, aes(res, uniqueTFs, fill = res)) +
1679567264492:geom_bar(stat = "identity") +
1679567264496:labs(title = "Number of unique TFs per eGRN", x = "Cluster Resolution") +
1679567264501:scale_fill_viridis_d(option = "inferno") +
1679567264506:theme_classic() +
1679567264511:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679567265152:p2 <- ggplot(GRN.metrics, aes(res, uniquePEAKs, fill = res)) +
1679567265158:geom_bar(stat = "identity") +
1679567265163:labs(title = "Number of unique PEAKs per eGRN", x = "Cluster Resolution") +
1679567265168:scale_fill_viridis_d(option = "inferno") +
1679567265173:theme_classic() +
1679567265179:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679567265462:p3 <- ggplot(GRN.metrics, aes(res, uniqueGENEs, fill = res)) +
1679567265467:geom_bar(stat = "identity") +
1679567265472:labs(title = "Number of unique GENEs per eGRN", x = "Cluster Resolution") +
1679567265478:scale_fill_viridis_d(option = "inferno") +
1679567265483:theme_classic() +
1679567265489:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679567265927:p4 <- ggplot(GRN.metrics, aes(res, TF.PEAK.links, fill = res)) +
1679567265933:geom_bar(stat = "identity") +
1679567265938:labs(title = "Number of TF-PEAK links per eGRN", x = "Cluster Resolution") +
1679567265943:scale_fill_viridis_d(option = "inferno") +
1679567265948:theme_classic() +
1679567265955:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679567266315:p5 <- ggplot(GRN.metrics, aes(res, PEAK.GENE.links, fill = res)) +
1679567266321:geom_bar(stat = "identity") +
1679567266326:labs(title = "Number of PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679567266334:scale_fill_viridis_d(option = "inferno") +
1679567266340:theme_classic() +
1679567266345:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679567266701:p6 <- ggplot(GRN.metrics, aes(res, TF.PEAK.GENE.links, fill = res)) +
1679567266707:geom_bar(stat = "identity") +
1679567266711:labs(title = "Number of TF-PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679567266717:scale_fill_viridis_d(option = "inferno") +
1679567266722:theme_classic() +
1679567266727:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679567267436:ggarrange(p1, p2, p3, p4, p5, p6 + rremove("x.text"),
1679567267442:labels = c("A", "B", "C", "D", "E", "F"),
1679567267446:ncol = 2, nrow = 3)
1679567406380:# create binary df with all links and resolutions as columns
1679567406387:df_list <- list(TF.PEAK.GENE.0.1, TF.PEAK.GENE.0.25, TF.PEAK.GENE.0.5, TF.PEAK.GENE.0.75, TF.PEAK.GENE.1, TF.PEAK.GENE.2, TF.PEAK.GENE.3, TF.PEAK.GENE.4,
1679567406392:TF.PEAK.GENE.5, TF.PEAK.GENE.6, TF.PEAK.GENE.7, TF.PEAK.GENE.8, TF.PEAK.GENE.9, TF.PEAK.GENE.10, TF.PEAK.GENE.12, TF.PEAK.GENE.14,
1679567406397:TF.PEAK.GENE.16, TF.PEAK.GENE.18, TF.PEAK.GENE.20)
1679567407237:all.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679567407992:colnames(all.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679567409005:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679567409530:names <- c()
1679567410111:i = 1
1679567410555:z = 1
1679567411032:for (df in df_list){
1679567411037:res <- resolutions[i]
1679567411042:for (j in 1:nrow(df)){
1679567411053:name <- paste(df[j,1], df[j,2], sep = "_")
1679567411059:name <- paste(name, df[j,3], sep = "_")
1679567411066:if (name %in% rownames(all.links)) {
1679567411071:all.links[name, i] = 1
1679567411079:} else {
1679567411084:binary <- rep(0, 19)
1679567411091:binary[i] <- 1
1679567411100:names(binary) <- resolutions
1679567411134:all.links <- rbind(all.links, binary)
1679567411150:rownames(all.links)[z] <- name
1679567411157:z = z + 1
1679567411162:}
1679567411166:binary <- c()
1679567411171:name <- ""
1679567411176:}
1679567411181:i = i+1
1679567411186:}
1679567425035:colnames(all.links) <- resolutions
1679567425507:all.links
1679567426246:# upset plot
1679567426251:all.links.min3 <- all.links %>% dplyr::filter(rowSums(.) > 3)
1679567427886:all.links.min3 %>% colnames() %>% class() == resolutions %>%  class()
1679567428475:colnames(all.links.min3) <- as.character(resolutions)
1679567430009:upset(all.links, sets = as.character(resolutions[1:length(resolutions)]), keep.order = TRUE, nintersects = NA)
1679567502751:# Reduce TF.name to just the name
1679567502756:new.TFs <- c()
1679567503371:for (TF in merged.all.links$TF.name){
1679567503375:new.TFs <- c(new.TFs, strsplit(TF, "[.]")[[1]][1])
1679567503380:}
1679567509138:# add resolution id column in all tf-peak-gene dfs
1679567509142:df.lens <- c()
1679567509622:for (df in df_list){
1679567509626:df.lens <- c(df.lens, nrow(df))
1679567509630:}
1679567510645:# Merge all TF-peak-gene interactions
1679567510649:merged.all.links <- do.call("rbind", df_list)
1679567512018:merged.all.links <- merged.all.links %>% cbind(res = rep(resolutions, times = df.lens))
1679567512032:merged.all.links
1679567513702:# Reduce TF.name to just the name
1679567513706:new.TFs <- c()
1679567514936:for (TF in merged.all.links$TF.name){
1679567514940:new.TFs <- c(new.TFs, strsplit(TF, "[.]")[[1]][1])
1679567514945:}
1679567516001:merged.all.links$TF <- new.TFs
1679567516938:ggplot(merged.all.links %>% dplyr::filter(res %in% resolutions[10:19]), aes(TF, fill = as.factor(res))) +
1679567516942:geom_bar(stat = "count", position = "stack") +
1679567516947:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679567526163:# create binary df with all peak-genes links and resolutions as columns
1679567526168:df_list2 <- list(PEAK.GENE.0.1, PEAK.GENE.0.25, PEAK.GENE.0.5, PEAK.GENE.0.75, PEAK.GENE.1, PEAK.GENE.2, PEAK.GENE.3, PEAK.GENE.4,
1679567526175:PEAK.GENE.5, PEAK.GENE.6, PEAK.GENE.7, PEAK.GENE.8, PEAK.GENE.9, PEAK.GENE.10, PEAK.GENE.12, PEAK.GENE.14,
1679567526180:PEAK.GENE.16, PEAK.GENE.18, PEAK.GENE.20)
1679567527138:peak.gene.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679567527396:colnames(peak.gene.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679567527808:peak.gene.links
1679567528188:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679567528906:names <- c()
1679567529383:i = 1
1679567529743:z = 1
1679567530162:for (df in df_list2){
1679567530166:res <- resolutions[i]
1679567530176:for (j in 1:nrow(df)){
1679567530199:name <- paste(df[j,1], df[j,2], sep = "_")
1679567530204:if (name %in% rownames(peak.gene.links)) {
1679567530210:peak.gene.links[name, i] = 1
1679567530215:} else {
1679567530220:binary <- rep(0, 19)
1679567530225:binary[i] <- 1
1679567530230:names(binary) <- resolutions
1679567530234:peak.gene.links <- rbind(peak.gene.links, binary)
1679567530239:rownames(peak.gene.links)[z] <- name
1679567530244:z = z + 1
1679567530249:}
1679567530254:binary <- c()
1679567530258:name <- ""
1679567530276:}
1679567530281:i = i+1
1679567530287:}
1679567533296:colnames(peak.gene.links) <- resolutions
1679567533304:peak.gene.links
1679567534416:# upset plot
1679567534441:upset(peak.gene.links, sets = as.character(resolutions), keep.order = TRUE, nintersects = NA)
1679567589725:# get pcHiC links
1679567589735:links.dir <- "/g/scb/zaugg/deuner/GRaNIE/validationdata/timecourse_pchic_links.csv"
1679567590449:tc.links <- read.csv(links.dir)
1679567591364:head(tc.links)
1679567592072:# Set up path of the cluster resolutions eGRNs
1679567592077:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679567592665:# set vector with the resolutions
1679567592671:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679567593331:# set colors for ROC curves
1679567593337:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679567593343:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679567593349:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679567593354:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679567595264:# set vecor of auc positioning in y axis
1679567595268:aucy <- seq(10, 110, by = 5)
1679567595805:# iterate over GRNs
1679567595810:j = 0
1679567596325:# boolean for first plot
1679567596330:first = TRUE
1679567596825:# vectors to store TPs and FPs
1679567596835:TP.vec <- c()
1679567597311:FP.vec <- c()
1679567597747:TP.all <- data.frame()
1679567598296:for (res in resolutions){
1679567598301:# set index
1679567598306:j <- j + 1
1679567598314:# set up GRN directory
1679567598334:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679567598343:# read GRN object
1679567598348:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679567598358:# get gene-peak connections from GRN
1679567598363:GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679567598371:# adapt peaks format to tc.links format
1679567598375:form.peak <- rep("", nrow(GRN_links))
1679567598388:for (i in 1:nrow(GRN_links)){
1679567598393:peak <- as.character(GRN_links$peak.ID[i])
1679567598398:split_peak <- strsplit(peak, split = ":")
1679567598404:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679567598410:form.peak[i] <- new_peak
1679567598415:}
1679567598420:GRN_links$id <- seq(1:nrow(GRN_links))
1679567598425:GRN_links$peak.ID <- form.peak
1679567598430:names(GRN_links)[1:2] <- c("peak", "gene")
1679567598438:# Binary classification
1679567598444:# get rows that match in GRN links and HiC links by gene name and peak id
1679567598449:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679567598455:TP$res <- rep(resolutions[j], nrow(TP))
1679567598460:TP.all <- rbind(TP.all, TP)
1679567598465:# set 1 if they are in HiC data and 0 if not
1679567598469:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679567598482:# add column to GRN_links with that information
1679567598487:GRN_links$bc <- bc
1679567598492:# create an confusion matrix
1679567598497:conf.m <- table(bc)
1679567598507:# store GRN links data in a variable
1679567598512:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679567598520:# Compute ROC curve
1679567598524:par(pty = "s")
1679567598544:# print metrics
1679567598549:print("")
1679567598553:print(paste0("Resolution: ", res))
1679567598558:print(paste0("GRN links: ", nrow(GRN_links)))
1679567598563:print(paste0("TP: ", nrow(TP)))
1679567598569:FP <- nrow(GRN_links) - nrow(TP)
1679567598573:print(paste0("FP: ", FP))
1679567598579:print("")
1679567598587:TP.vec <- c(TP.vec, nrow(TP))
1679567598608:FP.vec <- c(FP.vec, FP)
1679567598618:if ((first == TRUE) & (sum(bc) > 0)){
1679567598623:roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679567598628:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679567598633:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679567598638:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679567598643:first = FALSE
1679567598648:}
1679567598666:if ((first == FALSE) & (sum(bc) > 0)){
1679567598671:roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679567598676:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679567598681:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679567598686:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679567598690:}
1679567598694:}
1679567704334:# barplots of TP vs FP
1679567704340:TPFP.df <- data.frame(TPFP = c(TP.vec, FP.vec), cat = c(rep("TP", 19), rep("FP", 19)), res = c(resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2)), resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))))
1679567706654:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679567706660:geom_bar(position = "dodge", stat = "identity") +
1679567706666:theme_classic() +
1679567706671:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679567828473:TP.all
1679567830503:# Check if the TPs are shared
1679567830518:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679567887673:# count occurrence of each link
1679567887677:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679567888369:# create a column for the pasted peak-gene info
1679567888375:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679567889108:# join counts info to the dataframe
1679567889114:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene"))
1679567889798:# check whether the link is shared or not
1679567889803:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679567890412:# plot count of shared links vs non-shared links
1679567890418:p1 <- ggplot(TP.peak.gene %>% distinct(peak, gene, .keep_all = TRUE), aes(shared, fill = shared)) +
1679567890423:geom_bar(stat = "count") +
1679567890428:theme_classic() +
1679567890433:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679567890438:labs(title = "Are the links shared? (unique links)") +
1679567890445:geom_text(stat='count', aes(label=..count..), vjust=-1) +
1679567890450:theme(legend.position = "none")
1679567891231:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679567891236:geom_bar(stat = "count") +
1679567891240:theme_classic() +
1679567891245:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679567891250:labs(title = "Are the links shared? (all links)") +
1679567891255:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679567891956:p1 + p2
1679568014158:# get pcHiC links
1679568014162:links.dir <- "/g/scb/zaugg/deuner/GRaNIE/validationdata/timecourse_pchic_links.csv"
1679568014745:tc.links <- read.csv(links.dir)
1679568016570:head(tc.links)
1679568026487:# Set up path of the cluster resolutions eGRNs
1679568026491:path <- "/g/scb2/zaugg/deuner/GRaNIE/outputdata/timecourse_batch_mode/Batch_Mode_Outputs/"
1679568027518:# set vector with the resolutions
1679568027524:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679568028116:# set colors for ROC curves
1679568028138:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679568028143:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679568028153:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679568028159:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679568028637:# set vecor of auc positioning in y axis
1679568028646:aucy <- seq(10, 110, by = 5)
1679568029256:# iterate over GRNs
1679568029262:j = 0
1679568029823:# boolean for first plot
1679568029832:first = TRUE
1679568030574:# vectors to store TPs and FPs
1679568030580:TP.vec <- c()
1679568031216:FP.vec <- c()
1679568031790:TP.all <- data.frame()
1679568032424:for (res in resolutions){
1679568032430:# set index
1679568032438:j <- j + 1
1679568032447:# set up GRN directory
1679568032451:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679568032456:# read GRN object
1679568032461:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679568032475:# get gene-peak connections from GRN
1679568032481:GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679568032496:# adapt peaks format to tc.links format
1679568032504:form.peak <- rep("", nrow(GRN_links))
1679568032511:for (i in 1:nrow(GRN_links)){
1679568032520:peak <- as.character(GRN_links$peak.ID[i])
1679568032527:split_peak <- strsplit(peak, split = ":")
1679568032534:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679568032540:form.peak[i] <- new_peak
1679568032546:}
1679568032555:GRN_links$id <- seq(1:nrow(GRN_links))
1679568032560:GRN_links$peak.ID <- form.peak
1679568032566:names(GRN_links)[1:2] <- c("peak", "gene")
1679568032576:# Binary classification
1679568032582:# get rows that match in GRN links and HiC links by gene name and peak id
1679568032588:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679568032595:TP$res <- rep(resolutions[j], nrow(TP))
1679568032601:TP.all <- rbind(TP.all, TP)
1679568032620:# set 1 if they are in HiC data and 0 if not
1679568032628:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679568032634:# add column to GRN_links with that information
1679568032641:GRN_links$bc <- bc
1679568032647:# create an confusion matrix
1679568032657:conf.m <- table(bc)
1679568032667:# store GRN links data in a variable
1679568032682:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679568032710:# Compute ROC curve
1679568032729:par(pty = "s")
1679568032750:# print metrics
1679568032759:print("")
1679568032764:print(paste0("Resolution: ", res))
1679568032771:print(paste0("GRN links: ", nrow(GRN_links)))
1679568032780:print(paste0("TP: ", nrow(TP)))
1679568032785:FP <- nrow(GRN_links) - nrow(TP)
1679568032792:print(paste0("FP: ", FP))
1679568032798:print("")
1679568032809:TP.vec <- c(TP.vec, nrow(TP))
1679568032818:FP.vec <- c(FP.vec, FP)
1679568032830:if ((first == TRUE) & (sum(bc) > 0)){
1679568032841:roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679568032850:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679568032856:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679568032863:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679568032868:first = FALSE
1679568032873:}
1679568032877:if ((first == FALSE) & (sum(bc) > 0)){
1679568032881:roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679568032886:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679568032892:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679568032897:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679568032904:}
1679568032910:}
1679568117222:# barplots of TP vs FP
1679568117230:TPFP.df <- data.frame(TPFP = c(TP.vec, FP.vec), cat = c(rep("TP", 19), rep("FP", 19)), res = c(resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2)), resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))))
1679568118258:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679568118263:geom_bar(position = "dodge", stat = "identity") +
1679568118274:theme_classic() +
1679568118279:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679568136962:# Check if the TPs are shared
1679568136967:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679568137859:# count occurrence of each link
1679568137865:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679568138354:# create a column for the pasted peak-gene info
1679568138361:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679568139102:# join counts info to the dataframe
1679568139107:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene"))
1679568140014:# check whether the link is shared or not
1679568140019:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679568140878:# plot count of shared links vs non-shared links
1679568140883:p1 <- ggplot(TP.peak.gene %>% distinct(peak, gene, .keep_all = TRUE), aes(shared, fill = shared)) +
1679568140889:geom_bar(stat = "count") +
1679568140894:theme_classic() +
1679568140899:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679568140906:labs(title = "Are the links shared? (unique links)") +
1679568140916:geom_text(stat='count', aes(label=..count..), vjust=-1) +
1679568140922:theme(legend.position = "none")
1679568141487:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679568141493:geom_bar(stat = "count") +
1679568141498:theme_classic() +
1679568141504:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679568141510:labs(title = "Are the links shared? (all links)") +
1679568141515:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679568142195:p1 + p2
1679568181979:# plot duplicated vs unique links per cluster resolution
1679568181984:ggplot(TP.peak.gene, aes(as.factor(res), fill = shared)) +
1679568181989:geom_bar(stat = "count", position = "dodge") +
1679568181994:theme_classic() +
1679568182000:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679568182005:labs(title = "Are the links shared?", x = "Cluster Resolutions")
1679568214367:# plot most frequent links across resolutions
1679568214371:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679568215132:TP.peak.gene.counts$shared <- ifelse(TP.peak.gene.counts$n > 1, TRUE, FALSE)
1679568216454:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679568216458:geom_bar(stat = "identity") +
1679568216463:theme_bw() +
1679568216467:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679568216472:scale_fill_viridis_d() +
1679568216476:labs(y = "count", title = "Most frequent links across resolutions", caption = "Top 10 Most Frequent Links")
1679568231492:# plot only duplicated links and their corresponding cluster resolutions
1679568231497:library(RColorBrewer)
1679568232277:palette3_info <- brewer.pal.info[brewer.pal.info$category == "qual", ]  # Extract color info
1679568232843:palette3_all <- unlist(mapply(brewer.pal,                     # Create vector with all colors
1679568232848:palette3_info$maxcolors,
1679568232853:rownames(palette3_info)))
1679568233385:palette3_all
1679568233822:palette3 <- sample(palette3_all, 16)                    # Sample colors
1679568234301:palette3
1679568234825:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679568234831:geom_bar(stat = "count") +
1679568234837:theme_bw() +
1679568234842:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679568234847:labs(y = "count", title = "To which eGRNs do the shared links belong?", fill = "Resolutions", caption = "35 Different Links") +
1679568234852:scale_fill_manual(values = palette3)
1679568297261:TP.peak.gene %>% dplyr::filter(shared == TRUE) %>% nrow
1679568307348:TP.peak.gene %>% dplyr::filter(shared == TRUE)
1679568377588:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679568377593:geom_bar(stat = "count") +
1679568377598:theme_bw() +
1679568377603:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679568377609:labs(y = "count", title = "To which eGRNs do the shared links belong?", fill = "Resolutions", caption = "26 Different Links") +
1679568377614:scale_fill_manual(values = palette3)
1679568392718:for (deg.th in 1:14){
1679568392723:# get highly represented links across resolutions
1679568392729:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679568392738:# overview of dataframes
1679568392744:## links from different cluster resolutions
1679568392749:head(merged.all.links) # all links merged
1679568392754:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679568392759:## pcHiC links
1679568392764:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679568392774:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679568392779:high.rep.links.pcHiC <- high.rep.pg.links
1679568392785:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679568392790:high.rep.links.pcHiC$pcHiC <- pcHiC
1679568392799:# format TP.all peak-gene links
1679568392804:pchic.links <- c()
1679568392809:for (i in 1:nrow(TP.all)){
1679568392814:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679568392820:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679568392824:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679568392829:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679568392835:pchic.links <- c(pchic.links, pchic.link)
1679568392841:}
1679568392846:pchic.links
1679568392854:# find links that are in pchic data
1679568392858:links.in.pchic <- c()
1679568392863:for (i in 1:nrow(high.rep.pg.links)){
1679568392868:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679568392873:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679568392878:if (rep.link %in% pchic.links) {
1679568392883:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679568392888:links.in.pchic <- c(links.in.pchic, rep.link)
1679568392893:}
1679568392898:}
1679568392906:print(links.in.pchic)
1679568392925:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679568392930:geom_bar(stat = "count") +
1679568392935:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679568392940:theme_bw() +
1679568392945:annotate("text", x = 1, y = max(table(high.rep.links.pcHiC$pcHiC))/2, label = as.character(length(links.in.pchic)), size = 7) +
1679568392950:annotate("text", x = 0, y = max(table(high.rep.links.pcHiC$pcHiC))/2, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 7) +
1679568392956:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679568392964:assign(paste0("p", deg.th), p)
1679568392969:}
1679568399760:p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12+p13+p14
1679568405372:p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12
1679568580741:# load libraries
1679568580746:library(GRaNIE)
1679568581348:library(dplyr)
1679568581554:library(qs)
1679568581706:library(ggplot2)
1679568581838:library(ggpubr)
1679568582012:library(pROC)
1679568582183:library(EnsDb.Hsapiens.v79)
1679568582357:library(UpSetR)
1679568582487:library(data.table)
1679568582639:library(ggrepel)
1679568583770:# Set up path of the cluster resolutions eGRNs
1679568583778:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679568584365:# set vector with the resolutions
1679568584370:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679568584638:# creat data.frame to store each GRN metrics
1679568584644:GRN.metrics <- data.frame(matrix(ncol = 7, nrow = 0))
1679568584905:metrics.names <- c("res", "uniqueTFs", "uniquePEAKs", "uniqueGENEs", "TF.PEAK.links", "PEAK.GENE.links", "TF.PEAK.GENE.links")
1679568585115:colnames(GRN.metrics) <- metrics.names
1679568585371:# iterate over GRNs
1679568585376:for (res in resolutions){
1679568585384:# set up GRN directory
1679568585389:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679568585394:# read GRN object
1679568585400:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679568585408:# vector to store the GRN metrics
1679568585414:metrics <- c(res)
1679568585423:# retrieve metrics from the GRN
1679568585428:GRN.uniqueTFs <- GRN@connections$all.filtered$`0` %>% pull("TF.name") %>% unique() %>% as.data.frame()
1679568585435:GRN.uniqueTFs.len <- GRN.uniqueTFs %>% nrow()
1679568585441:metrics <- c(metrics, GRN.uniqueTFs.len)
1679568585445:GRN.uniquePEAKs <- GRN@connections$all.filtered$`0` %>% pull("peak.ID") %>% unique() %>% as.data.frame()
1679568585451:GRN.uniquePEAKs.len <- GRN.uniquePEAKs %>% nrow()
1679568585456:metrics <- c(metrics, GRN.uniquePEAKs.len)
1679568585461:GRN.uniqueGENEs <- GRN@connections$all.filtered$`0` %>% pull("gene.name") %>% unique() %>% as.data.frame()
1679568585467:GRN.uniqueGENEs.len <- GRN.uniqueGENEs %>% nrow()
1679568585473:metrics <- c(metrics, GRN.uniqueGENEs.len)
1679568585478:GRN.TF_peak.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID")) %>% distinct()
1679568585483:GRN.TF_peak.links.len <- GRN.TF_peak.links %>% nrow()
1679568585488:metrics <- c(metrics, GRN.TF_peak.links.len)
1679568585493:GRN.peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("gene.name", "peak.ID")) %>% distinct()
1679568585498:GRN.peak_gene.links.len <- GRN.peak_gene.links%>% nrow()
1679568585504:metrics <- c(metrics, GRN.peak_gene.links.len)
1679568585513:GRN.TF_peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID", "gene.name")) %>% distinct()
1679568585518:GRN.TF_peak_gene.links.len <- GRN.TF_peak_gene.links %>% nrow()
1679568585526:metrics <- c(metrics, GRN.TF_peak_gene.links.len)
1679568585535:# store the GRN metrics in the dataframe containing all GRNs metrics
1679568585541:names(metrics) <- metrics.names
1679568585546:GRN.metrics <- GRN.metrics %>% rbind(metrics)
1679568585556:# store the TF-PEAK-GENE links in independent dataframes
1679568585561:assign(paste("TF.PEAK.GENE", res, sep = "."), GRN.TF_peak_gene.links)
1679568585567:assign(paste("PEAK.GENE", res, sep = "."), GRN.peak_gene.links)
1679568585574:assign(paste("TF.PEAK", res, sep = "."), GRN.TF_peak.links)
1679568585580:assign(paste("TFs", res, sep = "."), GRN.uniqueTFs)
1679568585588:assign(paste("PEAKs", res, sep = "."), GRN.uniquePEAKs)
1679568585594:assign(paste("GENEs", res, sep = "."), GRN.uniqueGENEs)
1679568585605:# remove GRN object from memory
1679568585611:rm(GRN)
1679568585639:# reset metrics vector
1679568585644:metrics <- c()
1679568585649:}
1679568617503:# rename the columns because somehow they do not show up
1679568617508:colnames(GRN.metrics) <- metrics.names
1679568625039:GRN.metrics$res <- as.factor(GRN.metrics$res)
1679568625935:colnames(GRN.metrics)
1679568626918:p1 <- ggplot(GRN.metrics, aes(res, uniqueTFs, fill = res)) +
1679568626923:geom_bar(stat = "identity") +
1679568626928:labs(title = "Number of unique TFs per eGRN", x = "Cluster Resolution") +
1679568626934:scale_fill_viridis_d(option = "inferno") +
1679568626939:theme_classic() +
1679568626944:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679568627690:p2 <- ggplot(GRN.metrics, aes(res, uniquePEAKs, fill = res)) +
1679568627695:geom_bar(stat = "identity") +
1679568627700:labs(title = "Number of unique PEAKs per eGRN", x = "Cluster Resolution") +
1679568627705:scale_fill_viridis_d(option = "inferno") +
1679568627710:theme_classic() +
1679568627714:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679568628683:p3 <- ggplot(GRN.metrics, aes(res, uniqueGENEs, fill = res)) +
1679568628689:geom_bar(stat = "identity") +
1679568628694:labs(title = "Number of unique GENEs per eGRN", x = "Cluster Resolution") +
1679568628699:scale_fill_viridis_d(option = "inferno") +
1679568628704:theme_classic() +
1679568628709:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679568629056:p4 <- ggplot(GRN.metrics, aes(res, TF.PEAK.links, fill = res)) +
1679568629061:geom_bar(stat = "identity") +
1679568629067:labs(title = "Number of TF-PEAK links per eGRN", x = "Cluster Resolution") +
1679568629073:scale_fill_viridis_d(option = "inferno") +
1679568629078:theme_classic() +
1679568629084:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679568629339:p5 <- ggplot(GRN.metrics, aes(res, PEAK.GENE.links, fill = res)) +
1679568629344:geom_bar(stat = "identity") +
1679568629349:labs(title = "Number of PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679568629354:scale_fill_viridis_d(option = "inferno") +
1679568629361:theme_classic() +
1679568629366:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679568629756:p6 <- ggplot(GRN.metrics, aes(res, TF.PEAK.GENE.links, fill = res)) +
1679568629761:geom_bar(stat = "identity") +
1679568629765:labs(title = "Number of TF-PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679568629771:scale_fill_viridis_d(option = "inferno") +
1679568629776:theme_classic() +
1679568629781:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679568630030:ggarrange(p1, p2, p3, p4, p5, p6 + rremove("x.text"),
1679568630035:labels = c("A", "B", "C", "D", "E", "F"),
1679568630040:ncol = 2, nrow = 3)
1679568634497:# create binary df with all links and resolutions as columns
1679568634504:df_list <- list(TF.PEAK.GENE.0.1, TF.PEAK.GENE.0.25, TF.PEAK.GENE.0.5, TF.PEAK.GENE.0.75, TF.PEAK.GENE.1, TF.PEAK.GENE.2, TF.PEAK.GENE.3, TF.PEAK.GENE.4,
1679568634510:TF.PEAK.GENE.5, TF.PEAK.GENE.6, TF.PEAK.GENE.7, TF.PEAK.GENE.8, TF.PEAK.GENE.9, TF.PEAK.GENE.10, TF.PEAK.GENE.12, TF.PEAK.GENE.14,
1679568634516:TF.PEAK.GENE.16, TF.PEAK.GENE.18, TF.PEAK.GENE.20)
1679568635587:all.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679568636125:colnames(all.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679568636794:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679568637300:names <- c()
1679568637656:i = 1
1679568638206:z = 1
1679568638682:for (df in df_list){
1679568638688:res <- resolutions[i]
1679568638692:for (j in 1:nrow(df)){
1679568638697:name <- paste(df[j,1], df[j,2], sep = "_")
1679568638702:name <- paste(name, df[j,3], sep = "_")
1679568638706:if (name %in% rownames(all.links)) {
1679568638711:all.links[name, i] = 1
1679568638716:} else {
1679568638720:binary <- rep(0, 19)
1679568638726:binary[i] <- 1
1679568638731:names(binary) <- resolutions
1679568638735:all.links <- rbind(all.links, binary)
1679568638740:rownames(all.links)[z] <- name
1679568638744:z = z + 1
1679568638749:}
1679568638754:binary <- c()
1679568638759:name <- ""
1679568638764:}
1679568638768:i = i+1
1679568638773:}
1679568652747:colnames(all.links) <- resolutions
1679568653473:all.links
1679568654073:# upset plot
1679568654079:all.links.min3 <- all.links %>% dplyr::filter(rowSums(.) > 3)
1679568654595:all.links.min3 %>% colnames() %>% class() == resolutions %>%  class()
1679568655084:colnames(all.links.min3) <- as.character(resolutions)
1679568655483:upset(all.links, sets = as.character(resolutions[1:length(resolutions)]), keep.order = TRUE, nintersects = NA)
1679568657941:# add resolution id column in all tf-peak-gene dfs
1679568657945:df.lens <- c()
1679568658792:for (df in df_list){
1679568658796:df.lens <- c(df.lens, nrow(df))
1679568658800:}
1679568659441:# Merge all TF-peak-gene interactions
1679568659446:merged.all.links <- do.call("rbind", df_list)
1679568659952:merged.all.links <- merged.all.links %>% cbind(res = rep(resolutions, times = df.lens))
1679568659971:merged.all.links
1679573546734:gc()
1679573560118:# Load libraries
1679573560124:library(Seurat)
1679573571305:library(qs)
1679573571432:library(sctransform)
1679573571457:library(ggplot2)
1679573571487:library(BiocParallel)
1679573571691:library(scDblFinder)
1679573589158:library(dplyr)
1679573589196:library(monocle3)
1679573596810:library(harmony)
1679573597118:library(Signac)
1679573597942:# Set up working directory
1679573597949:work.dir <- "/g/scb/zaugg/deuner/GRaNIE/"
1679573597956:# Read object
1679573597961:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1679573755749:comb.s <- RunSVD(comb.s)
1679573988491:# Visualize ATAC space
1679573988495:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:20, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn", assay = "ATAC")
1679574125785:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1679574126608:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1679574127378:p1 + p2
1679574255642:comb.s@assays$ATAC@data <- comb.s@assays$ATAC@counts
1679574262236:comb.s@assays$ATAC@data
1679574296814:comb.s <- RunSVD(comb.s)
1679574654915:# Visualize ATAC space
1679574655199:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:20, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn", assay = "ATAC")
1679574723606:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1679574725782:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1679574727541:p1 + p2
1679574752802:comb.s@assays$ATAC@data
1679574756660:comb.s@assays$ATAC@counts
1679574761149:comb.s <- RunTFIDF(comb.s)
1679574927036:comb.s@assays$ATAC@data
1679574931735:comb.s <- FindTopFeatures(comb.s, min.cutoff = 10)
1679574943154:comb.s <- RunSVD(comb.s)
1679575314826:comb.s
1679575327490:## Non-linear dimensionality reduction (UMAP)
1679575327494:# We exclude the first dimension as this is typically correlated with sequencing depth
1679575327498:DepthCor(comb.s)
1679575330200:# Visualize ATAC space
1679575330205:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:20, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn", assay = "ATAC")
1679575423422:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1679575423982:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1679575424694:p1 + p2
1679575451921:comb.s@reductions
1679575476200:# Make UMAP on a subset of regions that are at least covered in all the datasets (as clustering is based on dataset)
1679575476204:comb.s.2 <- comb.s
1679575550081:comb.s@meta.data
1679575599835:comb.s@meta.data$orig.ident
1679575653658:rownames(comb.s)
1679576416992:unique(comb.s@meta.data$orig.ident)
1679576576687:table(comb.s$orig.ident)
1679576648934:comb.s <- FindMultiModalNeighbors(comb.s, reduction.list = list("pca", "lsi"), dims.list = list(1:18, 2:20))
1679576744648:comb.s <- RunUMAP(comb.s, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
1679576777832:comb.s <- FindClusters(comb.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE) #SLM algorithm
1679576801315:# Show UMAPs for RNA, ATAC and WNN
1679576801321:p1 <- DimPlot(comb.s, reduction = "umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("RNA")
1679576802009:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("ATAC")
1679576802731:p3 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1679576804957:p1 + p2 + p3 & NoLegend() & theme(plot.title = element_text(hjust = 0.5))
1679576841942:DimPlot(comb.s, reduction = "wnn.umap", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN") +
1679576841948:DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.8", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1679576852088:p1 <- DimPlot(comb.s, reduction = "umap", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("RNA")
1679576869646:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("ATAC")
1679576870198:p3 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1679576871009:p1 + p2 + p3 & NoLegend() & theme(plot.title = element_text(hjust = 0.5))
1679577019222:# Clustering with WNN
1679577019226:timecourse.s <- FindClusters(timecourse.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE, res = c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))) #SLM algorithm
1679577318666:# Clustering with WNN
1679577318672:comb.s <- FindClusters(comb.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE, res = c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))) #SLM algorithm
1679578503942:p1 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.5", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1679578509484:p2 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN - RNA Cell Annotation")
1679578510393:p1 | p2
1679579104454:# Adapting Cell annotation performed with RNA clusters to WNN clusters
1679579104463:ann.equival <- c("NPC-1", #0
1679579104478:"diff-1", #1
1679579104490:"NPC-2", #2
1679579104501:"neuron-1", #3
1679579104512:"neuron-2", #4
1679579104523:"NPC-3", #5
1679579104538:"NPC-4", #6
1679579104549:"diff-2", #7
1679579104564:"hiPSC-1", #8
1679579104571:"NPC-5", #9
1679579104576:"neuron-3", #10
1679579104580:"neuron-4", #11
1679579104585:"NPC-6", #12
1679579104589:"diff-neuron", #13
1679579104595:"neuron-5", #14
1679579104599:"hiPSC-2",  #15
1679579104604:"neuron-6",  #16
1679579104608:"microglia-1",  #17
1679579104613:"neuron-7",  #18
1679579104618:"microglia-2",  #19
1679579104622:"neuron-8",  #20
1679579104626:"neuron-9",  #21
1679579104631:"neuron-10"  #22
1679579104636:)
1679579105892:names(ann.equival) <- levels(comb.s)
1679579129767:levels(comb.s)
1679579163533:Idents(comb.s) <- "celltype"
1679579165014:names(ann.equival) <- levels(comb.s)
1679579169115:comb.s <- RenameIdents(comb.s, ann.equival)
1679579184950:ann.equival
1679579218488:Idents(comb.s) <- "SCT_snn_res.0.5"
1679579220346:names(ann.equival) <- levels(comb.s)
1679579221701:comb.s <- RenameIdents(comb.s, ann.equival)
1679579235672:names(ann.equival) <- levels(comb.s)
1679579240197:Idents(comb.s)
1679579255872:# Read object
1679579255876:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1679579664853:DefaultAssay(comb.s) <- "ATAC"
1679579665929:comb.s@assays$ATAC@data
1679579673069:## Normalisation and Dimensionality Reduction
1679579673073:comb.s@assays$ATAC@data <- comb.s@assays$ATAC@counts # remove prenormalized data
1679579674129:comb.s <- RunTFIDF(comb.s)
1679579686106:comb.s <- FindTopFeatures(comb.s, min.cutoff = 10)
1679579687673:comb.s <- RunSVD(comb.s)
1679579894121:comb.s <- FindMultiModalNeighbors(comb.s, reduction.list = list("pca", "lsi"), dims.list = list(1:18, 2:20))
1679579970798:comb.s <- RunUMAP(comb.s, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
1679579993105:comb.s <- FindClusters(comb.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE) #SLM algorithm
1679580012266:# Clustering with WNN
1679580012271:comb.s <- FindClusters(comb.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE, res = c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))) #SLM algorithm
1679580315988:p1 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.5", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1679580317229:p2 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN - RNA Cell Annotation")
1679580318286:p1 | p2
1679580429197:# Adapting Cell annotation performed with RNA clusters to WNN clusters
1679580429202:ann.equival <- c("NPC-1", #0
1679580429209:"diff-1", #1
1679580429214:"NPC-2", #2
1679580429221:"neuron-1", #3
1679580429228:"neuron-2", #4
1679580429233:"NPC-3", #5
1679580429240:"NPC-4", #6
1679580429246:"diff-2", #7
1679580429253:"hiPSC-1", #8
1679580429258:"NPC-5", #9
1679580429262:"neuron-3", #10
1679580429268:"neuron-4", #11
1679580429276:"NPC-6", #12
1679580429282:"diff-neuron", #13
1679580429288:"neuron-5", #14
1679580429298:"hiPSC-2",  #15
1679580429303:"neuron-6",  #16
1679580429310:"microglia-1",  #17
1679580429317:"neuron-7",  #18
1679580429323:"microglia-2",  #19
1679580429331:"neuron-8",  #20
1679580429337:"neuron-9",  #21
1679580429344:"neuron-10"  #22
1679580429351:)
1679580431925:Idents(comb.s) <- "SCT_snn_res.0.5"
1679580432983:names(ann.equival) <- levels(comb.s)
1679580434473:comb.s <- RenameIdents(comb.s, ann.equival)
1679580482824:# Read object
1679580482830:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1679580496872:DefaultAssay(comb.s) <- "ATAC"
1679580507234:## Normalisation and Dimensionality Reduction
1679580507243:comb.s@assays$ATAC@data <- comb.s@assays$ATAC@counts # remove prenormalized data
1679580508253:comb.s <- RunTFIDF(comb.s)
1679580521133:comb.s <- FindTopFeatures(comb.s, min.cutoff = 10)
1679580522516:comb.s <- RunSVD(comb.s)
1679580537415:gc()
1679580610599:# load libraries
1679580610605:library(GRaNIE)
1679580613835:library(dplyr)
1679580613842:library(qs)
1679580613848:library(ggplot2)
1679580613855:library(ggpubr)
1679580614215:library(pROC)
1679580614290:library(EnsDb.Hsapiens.v79)
1679580617630:library(UpSetR)
1679580617684:library(data.table)
1679580617743:library(ggrepel)
1679580639569:# Set up path of the cluster resolutions eGRNs
1679580639576:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679580640629:# set vector with the resolutions
1679580640635:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679580641783:# creat data.frame to store each GRN metrics
1679580641787:GRN.metrics <- data.frame(matrix(ncol = 7, nrow = 0))
1679580642373:metrics.names <- c("res", "uniqueTFs", "uniquePEAKs", "uniqueGENEs", "TF.PEAK.links", "PEAK.GENE.links", "TF.PEAK.GENE.links")
1679580642827:colnames(GRN.metrics) <- metrics.names
1679580644878:# iterate over GRNs
1679580644883:for (res in resolutions){
1679580644894:# set up GRN directory
1679580644898:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679580644903:# read GRN object
1679580644909:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679580644917:# vector to store the GRN metrics
1679580644922:metrics <- c(res)
1679580644929:# retrieve metrics from the GRN
1679580644933:GRN.uniqueTFs <- GRN@connections$all.filtered$`0` %>% pull("TF.name") %>% unique() %>% as.data.frame()
1679580644937:GRN.uniqueTFs.len <- GRN.uniqueTFs %>% nrow()
1679580644942:metrics <- c(metrics, GRN.uniqueTFs.len)
1679580644947:GRN.uniquePEAKs <- GRN@connections$all.filtered$`0` %>% pull("peak.ID") %>% unique() %>% as.data.frame()
1679580644953:GRN.uniquePEAKs.len <- GRN.uniquePEAKs %>% nrow()
1679580644958:metrics <- c(metrics, GRN.uniquePEAKs.len)
1679580644963:GRN.uniqueGENEs <- GRN@connections$all.filtered$`0` %>% pull("gene.name") %>% unique() %>% as.data.frame()
1679580644968:GRN.uniqueGENEs.len <- GRN.uniqueGENEs %>% nrow()
1679580644973:metrics <- c(metrics, GRN.uniqueGENEs.len)
1679580644977:GRN.TF_peak.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID")) %>% distinct()
1679580644981:GRN.TF_peak.links.len <- GRN.TF_peak.links %>% nrow()
1679580644985:metrics <- c(metrics, GRN.TF_peak.links.len)
1679580644990:GRN.peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("gene.name", "peak.ID")) %>% distinct()
1679580644995:GRN.peak_gene.links.len <- GRN.peak_gene.links%>% nrow()
1679580645000:metrics <- c(metrics, GRN.peak_gene.links.len)
1679580645005:GRN.TF_peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID", "gene.name")) %>% distinct()
1679580645011:GRN.TF_peak_gene.links.len <- GRN.TF_peak_gene.links %>% nrow()
1679580645017:metrics <- c(metrics, GRN.TF_peak_gene.links.len)
1679580645026:# store the GRN metrics in the dataframe containing all GRNs metrics
1679580645031:names(metrics) <- metrics.names
1679580645035:GRN.metrics <- GRN.metrics %>% rbind(metrics)
1679580645042:# store the TF-PEAK-GENE links in independent dataframes
1679580645048:assign(paste("TF.PEAK.GENE", res, sep = "."), GRN.TF_peak_gene.links)
1679580645053:assign(paste("PEAK.GENE", res, sep = "."), GRN.peak_gene.links)
1679580645059:assign(paste("TF.PEAK", res, sep = "."), GRN.TF_peak.links)
1679580645064:assign(paste("TFs", res, sep = "."), GRN.uniqueTFs)
1679580645069:assign(paste("PEAKs", res, sep = "."), GRN.uniquePEAKs)
1679580645074:assign(paste("GENEs", res, sep = "."), GRN.uniqueGENEs)
1679580645082:# remove GRN object from memory
1679580645086:rm(GRN)
1679580645091:# reset metrics vector
1679580645097:metrics <- c()
1679580645102:}
1679580962499:# rename the columns because somehow they do not show up
1679580962504:colnames(GRN.metrics) <- metrics.names
1679580962912:GRN.metrics$res <- as.factor(GRN.metrics$res)
1679580963210:colnames(GRN.metrics)
1679580963780:p1 <- ggplot(GRN.metrics, aes(res, uniqueTFs, fill = res)) +
1679580963784:geom_bar(stat = "identity") +
1679580963788:labs(title = "Number of unique TFs per eGRN", x = "Cluster Resolution") +
1679580963793:scale_fill_viridis_d(option = "inferno") +
1679580963797:theme_classic() +
1679580963801:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679580964592:p2 <- ggplot(GRN.metrics, aes(res, uniquePEAKs, fill = res)) +
1679580964600:geom_bar(stat = "identity") +
1679580964605:labs(title = "Number of unique PEAKs per eGRN", x = "Cluster Resolution") +
1679580964611:scale_fill_viridis_d(option = "inferno") +
1679580964616:theme_classic() +
1679580964621:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679580964878:p3 <- ggplot(GRN.metrics, aes(res, uniqueGENEs, fill = res)) +
1679580964884:geom_bar(stat = "identity") +
1679580964889:labs(title = "Number of unique GENEs per eGRN", x = "Cluster Resolution") +
1679580964893:scale_fill_viridis_d(option = "inferno") +
1679580964898:theme_classic() +
1679580964903:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679580965432:p4 <- ggplot(GRN.metrics, aes(res, TF.PEAK.links, fill = res)) +
1679580965436:geom_bar(stat = "identity") +
1679580965441:labs(title = "Number of TF-PEAK links per eGRN", x = "Cluster Resolution") +
1679580965445:scale_fill_viridis_d(option = "inferno") +
1679580965449:theme_classic() +
1679580965453:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679580965678:p5 <- ggplot(GRN.metrics, aes(res, PEAK.GENE.links, fill = res)) +
1679580965682:geom_bar(stat = "identity") +
1679580965687:labs(title = "Number of PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679580965691:scale_fill_viridis_d(option = "inferno") +
1679580965695:theme_classic() +
1679580965700:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679580965714:p6 <- ggplot(GRN.metrics, aes(res, TF.PEAK.GENE.links, fill = res)) +
1679580965719:geom_bar(stat = "identity") +
1679580965723:labs(title = "Number of TF-PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679580965727:scale_fill_viridis_d(option = "inferno") +
1679580965731:theme_classic() +
1679580965736:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679580966145:ggarrange(p1, p2, p3, p4, p5, p6 + rremove("x.text"),
1679580966149:labels = c("A", "B", "C", "D", "E", "F"),
1679580966154:ncol = 2, nrow = 3)
1679580973221:# create binary df with all links and resolutions as columns
1679580973226:df_list <- list(TF.PEAK.GENE.0.1, TF.PEAK.GENE.0.25, TF.PEAK.GENE.0.5, TF.PEAK.GENE.0.75, TF.PEAK.GENE.1, TF.PEAK.GENE.2, TF.PEAK.GENE.3, TF.PEAK.GENE.4,
1679580973231:TF.PEAK.GENE.5, TF.PEAK.GENE.6, TF.PEAK.GENE.7, TF.PEAK.GENE.8, TF.PEAK.GENE.9, TF.PEAK.GENE.10, TF.PEAK.GENE.12, TF.PEAK.GENE.14,
1679580973235:TF.PEAK.GENE.16, TF.PEAK.GENE.18, TF.PEAK.GENE.20)
1679580973731:all.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679580974188:colnames(all.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679580974688:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679580975181:names <- c()
1679580976033:i = 1
1679580976365:z = 1
1679580976695:for (df in df_list){
1679580976700:res <- resolutions[i]
1679580976705:for (j in 1:nrow(df)){
1679580976710:name <- paste(df[j,1], df[j,2], sep = "_")
1679580976716:name <- paste(name, df[j,3], sep = "_")
1679580976723:if (name %in% rownames(all.links)) {
1679580976729:all.links[name, i] = 1
1679580976735:} else {
1679580976740:binary <- rep(0, 19)
1679580976746:binary[i] <- 1
1679580976752:names(binary) <- resolutions
1679580976757:all.links <- rbind(all.links, binary)
1679580976763:rownames(all.links)[z] <- name
1679580976768:z = z + 1
1679580976774:}
1679580976780:binary <- c()
1679580976786:name <- ""
1679580976792:}
1679580976797:i = i+1
1679580976803:}
1679580980657:colnames(all.links) <- resolutions
1679580980709:all.links
1679580981561:# upset plot
1679580981565:all.links.min3 <- all.links %>% dplyr::filter(rowSums(.) > 3)
1679580985171:all.links.min3 %>% colnames() %>% class() == resolutions %>%  class()
1679580985362:colnames(all.links.min3) <- as.character(resolutions)
1679580985674:upset(all.links, sets = as.character(resolutions[1:length(resolutions)]), keep.order = TRUE, nintersects = NA)
1679580989626:# add resolution id column in all tf-peak-gene dfs
1679580989630:df.lens <- c()
1679580990649:for (df in df_list){
1679580990654:df.lens <- c(df.lens, nrow(df))
1679580990658:}
1679580992526:# Merge all TF-peak-gene interactions
1679580992530:merged.all.links <- do.call("rbind", df_list)
1679580993236:merged.all.links <- merged.all.links %>% cbind(res = rep(resolutions, times = df.lens))
1679580993910:merged.all.links
1679580994690:# Reduce TF.name to just the name
1679580994694:new.TFs <- c()
1679580995218:for (TF in merged.all.links$TF.name){
1679580995223:new.TFs <- c(new.TFs, strsplit(TF, "[.]")[[1]][1])
1679580995227:}
1679580996005:merged.all.links$TF <- new.TFs
1679580996748:ggplot(merged.all.links %>% dplyr::filter(res %in% resolutions[10:19]), aes(TF, fill = as.factor(res))) +
1679580996754:geom_bar(stat = "count", position = "stack") +
1679580996759:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679581041009:# create binary df with all peak-genes links and resolutions as columns
1679581041014:df_list2 <- list(PEAK.GENE.0.1, PEAK.GENE.0.25, PEAK.GENE.0.5, PEAK.GENE.0.75, PEAK.GENE.1, PEAK.GENE.2, PEAK.GENE.3, PEAK.GENE.4,
1679581041019:PEAK.GENE.5, PEAK.GENE.6, PEAK.GENE.7, PEAK.GENE.8, PEAK.GENE.9, PEAK.GENE.10, PEAK.GENE.12, PEAK.GENE.14,
1679581041023:PEAK.GENE.16, PEAK.GENE.18, PEAK.GENE.20)
1679581041411:peak.gene.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679581041880:colnames(peak.gene.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679581042159:peak.gene.links
1679581042304:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679581042454:names <- c()
1679581042937:i = 1
1679581043138:z = 1
1679581043291:for (df in df_list2){
1679581043296:res <- resolutions[i]
1679581043300:for (j in 1:nrow(df)){
1679581043304:name <- paste(df[j,1], df[j,2], sep = "_")
1679581043309:if (name %in% rownames(peak.gene.links)) {
1679581043313:peak.gene.links[name, i] = 1
1679581043318:} else {
1679581043322:binary <- rep(0, 19)
1679581043326:binary[i] <- 1
1679581043330:names(binary) <- resolutions
1679581043334:peak.gene.links <- rbind(peak.gene.links, binary)
1679581043339:rownames(peak.gene.links)[z] <- name
1679581043343:z = z + 1
1679581043347:}
1679581043352:binary <- c()
1679581043357:name <- ""
1679581043361:}
1679581043365:i = i+1
1679581043369:}
1679581049297:colnames(peak.gene.links) <- resolutions
1679581055053:# get pcHiC links
1679581055058:links.dir <- "/g/scb/zaugg/deuner/GRaNIE/validationdata/timecourse_pchic_links.csv"
1679581055555:tc.links <- read.csv(links.dir)
1679581056882:head(tc.links)
1679581057450:# Set up path of the cluster resolutions eGRNs
1679581057454:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679581057913:# set vector with the resolutions
1679581057918:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679581058365:# set colors for ROC curves
1679581058370:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679581058374:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679581058378:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679581058382:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679581058920:# set vecor of auc positioning in y axis
1679581058924:aucy <- seq(10, 110, by = 5)
1679581059370:# iterate over GRNs
1679581059374:j = 0
1679581059783:# boolean for first plot
1679581059787:first = TRUE
1679581060153:# vectors to store TPs and FPs
1679581060157:TP.vec <- c()
1679581060465:FP.vec <- c()
1679581060793:TP.all <- data.frame()
1679581061248:for (res in resolutions){
1679581061253:# set index
1679581061257:j <- j + 1
1679581061264:# set up GRN directory
1679581061269:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679581061273:# read GRN object
1679581061277:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679581061284:# get gene-peak connections from GRN
1679581061288:GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679581061296:# adapt peaks format to tc.links format
1679581061300:form.peak <- rep("", nrow(GRN_links))
1679581061304:for (i in 1:nrow(GRN_links)){
1679581061308:peak <- as.character(GRN_links$peak.ID[i])
1679581061312:split_peak <- strsplit(peak, split = ":")
1679581061317:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679581061321:form.peak[i] <- new_peak
1679581061325:}
1679581061329:GRN_links$id <- seq(1:nrow(GRN_links))
1679581061333:GRN_links$peak.ID <- form.peak
1679581061338:names(GRN_links)[1:2] <- c("peak", "gene")
1679581061345:# Binary classification
1679581061349:# get rows that match in GRN links and HiC links by gene name and peak id
1679581061353:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679581061358:TP$res <- rep(resolutions[j], nrow(TP))
1679581061362:TP.all <- rbind(TP.all, TP)
1679581061366:# set 1 if they are in HiC data and 0 if not
1679581061371:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679581061375:# add column to GRN_links with that information
1679581061380:GRN_links$bc <- bc
1679581061384:# create an confusion matrix
1679581061388:conf.m <- table(bc)
1679581061396:# store GRN links data in a variable
1679581061400:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679581061408:# Compute ROC curve
1679581061412:par(pty = "s")
1679581061420:# print metrics
1679581061424:print("")
1679581061428:print(paste0("Resolution: ", res))
1679581061432:print(paste0("GRN links: ", nrow(GRN_links)))
1679581061436:print(paste0("TP: ", nrow(TP)))
1679581061440:FP <- nrow(GRN_links) - nrow(TP)
1679581061444:print(paste0("FP: ", FP))
1679581061449:print("")
1679581061457:TP.vec <- c(TP.vec, nrow(TP))
1679581061461:FP.vec <- c(FP.vec, FP)
1679581061468:if ((first == TRUE) & (sum(bc) > 0)){
1679581061472:roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679581061477:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679581061482:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679581061486:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679581061491:first = FALSE
1679581061495:}
1679581061499:if ((first == FALSE) & (sum(bc) > 0)){
1679581061504:roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679581061508:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679581061512:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679581061517:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679581061521:}
1679581061526:}
1679581105842:# compute ratio of TPs vs FPs
1679581105847:TPFP.vec <- TP.vec/FP.vec
1679581106859:TPFP.vec
1679581199261:ratio.df <- data.frame(res = c(0.5, 1:10, 12, 14, 16, 18, 20), ratio = TPFP.vec)
1679581205144:# compute ratio of TPs vs FPs
1679581205150:TPFP.vec <- TP.vec/FP.vec
1679581213617:c(0.5, 1:10, 12, 14, 16, 18, 20)
1679581235802:length(c(0.5, 1:10, 12, 14, 16, 18, 20))
1679581246233:TP.vec/FP.vec
1679581268324:# compute ratio of TPs vs FPs
1679581268328:TPFP.vec <- TP.vec/FP.vec
1679581268722:ratio.df <- data.frame(res = resolutions, ratio = TPFP.vec)
1679581270693:ratio.df
1679581340689:gpglot(ratio.df, aes(x = res, y = ratio, fill = "brown")) +
1679581340694:geom_bar(stat = "identity")
1679581345728:ggplot(ratio.df, aes(x = res, y = ratio, fill = "brown")) +
1679581345732:geom_bar(stat = "identity")
1679581358916:ggplot(ratio.df, aes(x = as.factor(res), y = ratio, fill = "brown")) +
1679581358920:geom_bar(stat = "identity")
1679581438353:ggplot(ratio.df, aes(x = as.factor(res), y = ratio, fill = "brown")) +
1679581438358:geom_bar(stat = "identity") +
1679581438362:theme_classic() +
1679581438366:labs(x = "Resolutions", y = "TP / FP") +
1679581438371:theme(legend.position = "none")
1679581596348:ggplot(ratio.df, aes(x = as.factor(res), y = ratio, fill = "#993300")) +
1679581596352:geom_bar(stat = "identity") +
1679581596357:theme_classic() +
1679581596361:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581596365:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581610716:ggplot(ratio.df, aes(x = as.factor(res), y = ratio)) +
1679581610720:geom_bar(stat = "identity") +
1679581610725:theme_classic() +
1679581610729:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581610734:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581622222:ggplot(ratio.df, aes(x = as.factor(res), y = ratio)) +
1679581622227:geom_bar(stat = "identity") +
1679581622231:theme_classic() +
1679581622235:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581622240:theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
1679581622245:scale_fill_manual(values = "#993300")
1679581633328:ggplot(ratio.df, aes(x = as.factor(res), y = ratio), fill = #993300) +
1679581637849:ggplot(ratio.df, aes(x = as.factor(res), y = ratio), fill = "#993300") +
1679581637855:geom_bar(stat = "identity") +
1679581637859:theme_classic() +
1679581637863:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581637868:theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
1679581637871:scale_fill_manual(values = "#993300")
1679581642897:ggplot(ratio.df, aes(x = as.factor(res), y = ratio), fill = "#993300") +
1679581646285:ggplot(ratio.df, aes(x = as.factor(res), y = ratio), fill = "#993300") +
1679581646290:geom_bar(stat = "identity") +
1679581646294:theme_classic() +
1679581646298:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581646303:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581685881:ggplot(ratio.df, aes(x = as.factor(res), y = ratio), col = "#993300") +
1679581685885:geom_bar(stat = "identity") +
1679581685889:theme_classic() +
1679581685893:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581685898:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581692919:ggplot(ratio.df, aes(x = as.factor(res), y = ratio, col = "#993300")) +
1679581692923:geom_bar(stat = "identity") +
1679581692928:theme_classic() +
1679581692932:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581692937:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581703561:ggplot(ratio.df, aes(x = as.factor(res), y = ratio, col = "black")) +
1679581703567:geom_bar(stat = "identity") +
1679581703571:theme_classic() +
1679581703576:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581703581:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581712893:ggplot(ratio.df, aes(x = as.factor(res), y = ratio) +
1679581712898:geom_bar(stat = "identity", col = "black")) +
1679581712903:theme_classic() +
1679581712907:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581712912:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581715554:ggplot(ratio.df, aes(x = as.factor(res), y = ratio) +
1679581715558:geom_bar(stat = "identity", col = "black")) +
1679581715563:theme_classic() +
1679581715568:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581715574:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581726131:ggplot(ratio.df, aes(x = as.factor(res), y = ratio, col = "black")) +
1679581726135:geom_bar(stat = "identity") +
1679581726140:theme_classic() +
1679581726144:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581726148:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581733548:ggplot(ratio.df, aes(x = as.factor(res), y = ratio), col = "black") +
1679581733552:geom_bar(stat = "identity") +
1679581733557:theme_classic() +
1679581733562:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581733566:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581744308:ggplot(ratio.df, aes(x = as.factor(res), y = ratio), col = "black", fill = "brown") +
1679581744313:geom_bar(stat = "identity") +
1679581744317:theme_classic() +
1679581744321:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581744326:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581789645:ggplot(ratio.df, aes(x = as.factor(res), y = ratio)) +
1679581789650:geom_bar(stat = "identity", fill = "brown") +
1679581789654:theme_classic() +
1679581789658:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581789663:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581804728:ggplot(ratio.df, aes(x = as.factor(res), y = ratio)) +
1679581804733:geom_bar(stat = "identity", fill = "brown", color = "black") +
1679581804737:theme_classic() +
1679581804741:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581804746:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581822515:ggplot(ratio.df, aes(x = as.factor(res), y = ratio)) +
1679581822519:geom_bar(stat = "identity", fill = "#993300", color = "black") +
1679581822523:theme_classic() +
1679581822527:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679581822532:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679581943261:FP.vec
1679584606618:# get pcHiC links
1679584606622:links.dir <- "/g/scb/zaugg/deuner/GRaNIE/validationdata/timecourse_pchic_links.csv"
1679584623079:# load libraries
1679584623084:library(GRaNIE)
1679584631795:library(dplyr)
1679584631849:library(qs)
1679584631951:library(ggplot2)
1679584632554:library(ggpubr)
1679584632868:library(pROC)
1679584632945:library(EnsDb.Hsapiens.v79)
1679584639975:library(UpSetR)
1679584640070:library(data.table)
1679584640237:library(ggrepel)
1679584949549:# Set up path of the cluster resolutions eGRNs
1679584949552:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679584950366:# set vector with the resolutions
1679584950370:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679584950564:# creat data.frame to store each GRN metrics
1679584950568:GRN.metrics <- data.frame(matrix(ncol = 7, nrow = 0))
1679584950708:metrics.names <- c("res", "uniqueTFs", "uniquePEAKs", "uniqueGENEs", "TF.PEAK.links", "PEAK.GENE.links", "TF.PEAK.GENE.links")
1679584951089:colnames(GRN.metrics) <- metrics.names
1679584951264:# iterate over GRNs
1679584951268:for (res in resolutions){
1679584951276:# set up GRN directory
1679584951280:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679584951284:# read GRN object
1679584951288:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679584951295:# vector to store the GRN metrics
1679584951299:metrics <- c(res)
1679584951307:# retrieve metrics from the GRN
1679584951311:GRN.uniqueTFs <- GRN@connections$all.filtered$`0` %>% pull("TF.name") %>% unique() %>% as.data.frame()
1679584951315:GRN.uniqueTFs.len <- GRN.uniqueTFs %>% nrow()
1679584951320:metrics <- c(metrics, GRN.uniqueTFs.len)
1679584951324:GRN.uniquePEAKs <- GRN@connections$all.filtered$`0` %>% pull("peak.ID") %>% unique() %>% as.data.frame()
1679584951328:GRN.uniquePEAKs.len <- GRN.uniquePEAKs %>% nrow()
1679584951332:metrics <- c(metrics, GRN.uniquePEAKs.len)
1679584951337:GRN.uniqueGENEs <- GRN@connections$all.filtered$`0` %>% pull("gene.name") %>% unique() %>% as.data.frame()
1679584951341:GRN.uniqueGENEs.len <- GRN.uniqueGENEs %>% nrow()
1679584951346:metrics <- c(metrics, GRN.uniqueGENEs.len)
1679584951350:GRN.TF_peak.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID")) %>% distinct()
1679584951354:GRN.TF_peak.links.len <- GRN.TF_peak.links %>% nrow()
1679584951358:metrics <- c(metrics, GRN.TF_peak.links.len)
1679584951362:GRN.peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("gene.name", "peak.ID")) %>% distinct()
1679584951366:GRN.peak_gene.links.len <- GRN.peak_gene.links%>% nrow()
1679584951371:metrics <- c(metrics, GRN.peak_gene.links.len)
1679584951375:GRN.TF_peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID", "gene.name")) %>% distinct()
1679584951380:GRN.TF_peak_gene.links.len <- GRN.TF_peak_gene.links %>% nrow()
1679584951384:metrics <- c(metrics, GRN.TF_peak_gene.links.len)
1679584951392:# store the GRN metrics in the dataframe containing all GRNs metrics
1679584951396:names(metrics) <- metrics.names
1679584951400:GRN.metrics <- GRN.metrics %>% rbind(metrics)
1679584951408:# store the TF-PEAK-GENE links in independent dataframes
1679584951412:assign(paste("TF.PEAK.GENE", res, sep = "."), GRN.TF_peak_gene.links)
1679584951417:assign(paste("PEAK.GENE", res, sep = "."), GRN.peak_gene.links)
1679584951421:assign(paste("TF.PEAK", res, sep = "."), GRN.TF_peak.links)
1679584951426:assign(paste("TFs", res, sep = "."), GRN.uniqueTFs)
1679584951431:assign(paste("PEAKs", res, sep = "."), GRN.uniquePEAKs)
1679584951435:assign(paste("GENEs", res, sep = "."), GRN.uniqueGENEs)
1679584951443:# remove GRN object from memory
1679584951447:rm(GRN)
1679584951452:# reset metrics vector
1679584951456:metrics <- c()
1679584951461:}
1679585004393:# rename the columns because somehow they do not show up
1679585004398:colnames(GRN.metrics) <- metrics.names
1679585009811:GRN.metrics$res <- as.factor(GRN.metrics$res)
1679585010182:colnames(GRN.metrics)
1679585010747:p1 <- ggplot(GRN.metrics, aes(res, uniqueTFs, fill = res)) +
1679585010751:geom_bar(stat = "identity") +
1679585010755:labs(title = "Number of unique TFs per eGRN", x = "Cluster Resolution") +
1679585010760:scale_fill_viridis_d(option = "inferno") +
1679585010764:theme_classic() +
1679585010768:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585011504:p2 <- ggplot(GRN.metrics, aes(res, uniquePEAKs, fill = res)) +
1679585011508:geom_bar(stat = "identity") +
1679585011513:labs(title = "Number of unique PEAKs per eGRN", x = "Cluster Resolution") +
1679585011518:scale_fill_viridis_d(option = "inferno") +
1679585011522:theme_classic() +
1679585011527:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585011780:p3 <- ggplot(GRN.metrics, aes(res, uniqueGENEs, fill = res)) +
1679585011785:geom_bar(stat = "identity") +
1679585011789:labs(title = "Number of unique GENEs per eGRN", x = "Cluster Resolution") +
1679585011794:scale_fill_viridis_d(option = "inferno") +
1679585011798:theme_classic() +
1679585011803:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585012026:p4 <- ggplot(GRN.metrics, aes(res, TF.PEAK.links, fill = res)) +
1679585012030:geom_bar(stat = "identity") +
1679585012034:labs(title = "Number of TF-PEAK links per eGRN", x = "Cluster Resolution") +
1679585012038:scale_fill_viridis_d(option = "inferno") +
1679585012043:theme_classic() +
1679585012047:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585012061:p5 <- ggplot(GRN.metrics, aes(res, PEAK.GENE.links, fill = res)) +
1679585012065:geom_bar(stat = "identity") +
1679585012070:labs(title = "Number of PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679585012074:scale_fill_viridis_d(option = "inferno") +
1679585012079:theme_classic() +
1679585012083:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585012608:p6 <- ggplot(GRN.metrics, aes(res, TF.PEAK.GENE.links, fill = res)) +
1679585012612:geom_bar(stat = "identity") +
1679585012617:labs(title = "Number of TF-PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679585012621:scale_fill_viridis_d(option = "inferno") +
1679585012625:theme_classic() +
1679585012630:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585012644:ggarrange(p1, p2, p3, p4, p5, p6 + rremove("x.text"),
1679585012648:labels = c("A", "B", "C", "D", "E", "F"),
1679585012653:ncol = 2, nrow = 3)
1679585014371:# create binary df with all links and resolutions as columns
1679585014375:df_list <- list(TF.PEAK.GENE.0.1, TF.PEAK.GENE.0.25, TF.PEAK.GENE.0.5, TF.PEAK.GENE.0.75, TF.PEAK.GENE.1, TF.PEAK.GENE.2, TF.PEAK.GENE.3, TF.PEAK.GENE.4,
1679585014379:TF.PEAK.GENE.5, TF.PEAK.GENE.6, TF.PEAK.GENE.7, TF.PEAK.GENE.8, TF.PEAK.GENE.9, TF.PEAK.GENE.10, TF.PEAK.GENE.12, TF.PEAK.GENE.14,
1679585014384:TF.PEAK.GENE.16, TF.PEAK.GENE.18, TF.PEAK.GENE.20)
1679585014388:all.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679585016995:colnames(all.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585017583:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585017837:names <- c()
1679585018187:i = 1
1679585018510:z = 1
1679585019125:for (df in df_list){
1679585019130:res <- resolutions[i]
1679585019134:for (j in 1:nrow(df)){
1679585019138:name <- paste(df[j,1], df[j,2], sep = "_")
1679585019143:name <- paste(name, df[j,3], sep = "_")
1679585019148:if (name %in% rownames(all.links)) {
1679585019152:all.links[name, i] = 1
1679585019156:} else {
1679585019161:binary <- rep(0, 19)
1679585019166:binary[i] <- 1
1679585019171:names(binary) <- resolutions
1679585019177:all.links <- rbind(all.links, binary)
1679585019182:rownames(all.links)[z] <- name
1679585019187:z = z + 1
1679585019192:}
1679585019199:binary <- c()
1679585019203:name <- ""
1679585019208:}
1679585019212:i = i+1
1679585019217:}
1679585025273:colnames(all.links) <- resolutions
1679585025440:all.links
1679585026359:# upset plot
1679585026363:all.links.min3 <- all.links %>% dplyr::filter(rowSums(.) > 3)
1679585026576:all.links.min3 %>% colnames() %>% class() == resolutions %>%  class()
1679585027419:colnames(all.links.min3) <- as.character(resolutions)
1679585030792:# add resolution id column in all tf-peak-gene dfs
1679585030796:df.lens <- c()
1679585030961:for (df in df_list){
1679585030965:df.lens <- c(df.lens, nrow(df))
1679585030970:}
1679585031158:# Merge all TF-peak-gene interactions
1679585031163:merged.all.links <- do.call("rbind", df_list)
1679585031807:merged.all.links <- merged.all.links %>% cbind(res = rep(resolutions, times = df.lens))
1679585032208:merged.all.links
1679585034017:# Reduce TF.name to just the name
1679585034022:new.TFs <- c()
1679585034344:for (TF in merged.all.links$TF.name){
1679585034349:new.TFs <- c(new.TFs, strsplit(TF, "[.]")[[1]][1])
1679585034353:}
1679585034797:merged.all.links$TF <- new.TFs
1679585035307:ggplot(merged.all.links %>% dplyr::filter(res %in% resolutions[10:19]), aes(TF, fill = as.factor(res))) +
1679585035311:geom_bar(stat = "count", position = "stack") +
1679585035316:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679585039100:# create binary df with all peak-genes links and resolutions as columns
1679585039144:df_list2 <- list(PEAK.GENE.0.1, PEAK.GENE.0.25, PEAK.GENE.0.5, PEAK.GENE.0.75, PEAK.GENE.1, PEAK.GENE.2, PEAK.GENE.3, PEAK.GENE.4,
1679585039184:PEAK.GENE.5, PEAK.GENE.6, PEAK.GENE.7, PEAK.GENE.8, PEAK.GENE.9, PEAK.GENE.10, PEAK.GENE.12, PEAK.GENE.14,
1679585039221:PEAK.GENE.16, PEAK.GENE.18, PEAK.GENE.20)
1679585039388:peak.gene.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679585039439:colnames(peak.gene.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585039973:peak.gene.links
1679585040152:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585040276:names <- c()
1679585040552:i = 1
1679585040679:z = 1
1679585040810:for (df in df_list2){
1679585040814:res <- resolutions[i]
1679585040818:for (j in 1:nrow(df)){
1679585040822:name <- paste(df[j,1], df[j,2], sep = "_")
1679585040826:if (name %in% rownames(peak.gene.links)) {
1679585040831:peak.gene.links[name, i] = 1
1679585040835:} else {
1679585040839:binary <- rep(0, 19)
1679585040843:binary[i] <- 1
1679585040847:names(binary) <- resolutions
1679585040851:peak.gene.links <- rbind(peak.gene.links, binary)
1679585040856:rownames(peak.gene.links)[z] <- name
1679585040860:z = z + 1
1679585040864:}
1679585040868:binary <- c()
1679585040873:name <- ""
1679585040877:}
1679585040882:i = i+1
1679585040886:}
1679585043363:colnames(peak.gene.links) <- resolutions
1679585044851:peak.gene.links
1679585046039:# upset plot
1679585046043:upset(peak.gene.links, sets = as.character(resolutions), keep.order = TRUE, nintersects = NA)
1679585047758:# create binary df with all peak-genes links and resolutions as columns
1679585047763:df_list3 <- list(TF.PEAK.0.1, TF.PEAK.0.25, TF.PEAK.0.5, TF.PEAK.0.75, TF.PEAK.1, TF.PEAK.2, TF.PEAK.3, TF.PEAK.4,
1679585047767:TF.PEAK.5, TF.PEAK.6, TF.PEAK.7, TF.PEAK.8, TF.PEAK.9, TF.PEAK.10, TF.PEAK.12, TF.PEAK.14,
1679585047771:TF.PEAK.16, TF.PEAK.18, TF.PEAK.20)
1679585051555:tf.peak.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679585052081:colnames(tf.peak.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585052614:tf.peak.links
1679585053197:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585054258:names <- c()
1679585054502:i = 1
1679585054637:z = 1
1679585055022:for (df in df_list3){
1679585055027:res <- resolutions[i]
1679585055032:for (j in 1:nrow(df)){
1679585055036:name <- paste(df[j,1], df[j,2], sep = "_")
1679585055041:if (name %in% rownames(tf.peak.links)) {
1679585055045:tf.peak.links[name, i] = 1
1679585055049:} else {
1679585055053:binary <- rep(0, 19)
1679585055057:binary[i] <- 1
1679585055062:names(binary) <- resolutions
1679585055066:tf.peak.links <- rbind(tf.peak.links, binary)
1679585055070:rownames(tf.peak.links)[z] <- name
1679585055074:z = z + 1
1679585055078:}
1679585055082:binary <- c()
1679585055087:name <- ""
1679585055091:}
1679585055095:i = i+1
1679585055099:}
1679585058457:colnames(tf.peak.links) <- resolutions
1679585058848:tf.peak.links
1679585064262:# get pcHiC links
1679585064266:links.dir <- "/g/scb/zaugg/deuner/GRaNIE/validationdata/timecourse_pchic_links.csv"
1679585064764:tc.links <- read.csv(links.dir)
1679585065690:head(tc.links)
1679585067941:# Set up path of the cluster resolutions eGRNs
1679585067945:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679585068659:# set vector with the resolutions
1679585068663:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585070174:# set colors for ROC curves
1679585070178:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679585070182:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679585070186:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679585070191:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679585070866:# set vecor of auc positioning in y axis
1679585070871:aucy <- seq(10, 110, by = 5)
1679585071911:# iterate over GRNs
1679585071915:j = 0
1679585072752:# boolean for first plot
1679585072757:first = TRUE
1679585073511:# vectors to store TPs and FPs
1679585073516:TP.vec <- c()
1679585074204:FP.vec <- c()
1679585074782:TP.all <- data.frame()
1679585075541:for (res in resolutions){
1679585075546:# set index
1679585075551:j <- j + 1
1679585075559:# set up GRN directory
1679585075564:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679585075572:# read GRN object
1679585075577:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679585075585:# get gene-peak connections from GRN
1679585075589:GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679585075597:# adapt peaks format to tc.links format
1679585075602:form.peak <- rep("", nrow(GRN_links))
1679585075606:for (i in 1:nrow(GRN_links)){
1679585075611:peak <- as.character(GRN_links$peak.ID[i])
1679585075615:split_peak <- strsplit(peak, split = ":")
1679585075620:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679585075625:form.peak[i] <- new_peak
1679585075630:}
1679585075634:GRN_links$id <- seq(1:nrow(GRN_links))
1679585075639:GRN_links$peak.ID <- form.peak
1679585075644:names(GRN_links)[1:2] <- c("peak", "gene")
1679585075651:# Binary classification
1679585075656:# get rows that match in GRN links and HiC links by gene name and peak id
1679585075661:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679585075666:TP$res <- rep(resolutions[j], nrow(TP))
1679585075671:TP.all <- rbind(TP.all, TP)
1679585075675:# set 1 if they are in HiC data and 0 if not
1679585075680:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679585075684:# add column to GRN_links with that information
1679585075689:GRN_links$bc <- bc
1679585075694:# create an confusion matrix
1679585075699:conf.m <- table(bc)
1679585075710:# store GRN links data in a variable
1679585075715:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679585075724:# Compute ROC curve
1679585075730:par(pty = "s")
1679585075741:# print metrics
1679585075746:print("")
1679585075751:print(paste0("Resolution: ", res))
1679585075756:print(paste0("GRN links: ", nrow(GRN_links)))
1679585075761:print(paste0("TP: ", nrow(TP)))
1679585075766:FP <- nrow(GRN_links) - nrow(TP)
1679585075771:print(paste0("FP: ", FP))
1679585075776:print("")
1679585075784:TP.vec <- c(TP.vec, nrow(TP))
1679585075789:FP.vec <- c(FP.vec, FP)
1679585075797:if ((first == TRUE) & (sum(bc) > 0)){
1679585075802:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679585075807:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679585075811:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679585075817:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679585075822:first = FALSE
1679585075829:ci.auc(ROC)
1679585075836:}
1679585075841:if ((first == FALSE) & (sum(bc) > 0)){
1679585075848:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679585075853:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679585075860:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679585075867:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679585075873:ci.auc(ROC)
1679585075878:}
1679585075885:}
1679585347904:Load libraries
1679585353193:# Load libraries
1679585353198:library(Seurat)
1679585363554:library(qs)
1679585363607:library(sctransform)
1679585363692:library(ggplot2)
1679585363754:library(BiocParallel)
1679585363812:library(scDblFinder)
1679585370878:library(dplyr)
1679585370925:library(monocle3)
1679585379949:library(harmony)
1679585380216:library(Signac)
1679585380786:# Set up working directory
1679585380790:work.dir <- "/g/scb/zaugg/deuner/GRaNIE/"
1679585384626:# Load merged Seurat Object
1679585384630:combined.path <- "/g/scb/zaugg/deuner/SCENIC+/inputdata/"
1679585397870:library(GRaNIE)
1679585401994:library(dplyr)
1679585402000:library(qs)
1679585402005:library(ggplot2)
1679585402010:library(ggpubr)
1679585402319:library(pROC)
1679585402417:library(EnsDb.Hsapiens.v79)
1679585407106:library(UpSetR)
1679585407177:library(data.table)
1679585407248:library(ggrepel)
1679585412459:# Set up path of the cluster resolutions eGRNs
1679585412466:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679585414788:# set vector with the resolutions
1679585414792:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585416239:# creat data.frame to store each GRN metrics
1679585416244:GRN.metrics <- data.frame(matrix(ncol = 7, nrow = 0))
1679585416356:metrics.names <- c("res", "uniqueTFs", "uniquePEAKs", "uniqueGENEs", "TF.PEAK.links", "PEAK.GENE.links", "TF.PEAK.GENE.links")
1679585416683:colnames(GRN.metrics) <- metrics.names
1679585416953:# iterate over GRNs
1679585416958:for (res in resolutions){
1679585416969:# set up GRN directory
1679585416981:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679585416986:# read GRN object
1679585416992:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679585417001:# vector to store the GRN metrics
1679585417006:metrics <- c(res)
1679585417015:# retrieve metrics from the GRN
1679585417020:GRN.uniqueTFs <- GRN@connections$all.filtered$`0` %>% pull("TF.name") %>% unique() %>% as.data.frame()
1679585417025:GRN.uniqueTFs.len <- GRN.uniqueTFs %>% nrow()
1679585417030:metrics <- c(metrics, GRN.uniqueTFs.len)
1679585417036:GRN.uniquePEAKs <- GRN@connections$all.filtered$`0` %>% pull("peak.ID") %>% unique() %>% as.data.frame()
1679585417041:GRN.uniquePEAKs.len <- GRN.uniquePEAKs %>% nrow()
1679585417047:metrics <- c(metrics, GRN.uniquePEAKs.len)
1679585417052:GRN.uniqueGENEs <- GRN@connections$all.filtered$`0` %>% pull("gene.name") %>% unique() %>% as.data.frame()
1679585417057:GRN.uniqueGENEs.len <- GRN.uniqueGENEs %>% nrow()
1679585417062:metrics <- c(metrics, GRN.uniqueGENEs.len)
1679585417066:GRN.TF_peak.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID")) %>% distinct()
1679585417071:GRN.TF_peak.links.len <- GRN.TF_peak.links %>% nrow()
1679585417076:metrics <- c(metrics, GRN.TF_peak.links.len)
1679585417080:GRN.peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("gene.name", "peak.ID")) %>% distinct()
1679585417085:GRN.peak_gene.links.len <- GRN.peak_gene.links%>% nrow()
1679585417090:metrics <- c(metrics, GRN.peak_gene.links.len)
1679585417096:GRN.TF_peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID", "gene.name")) %>% distinct()
1679585417100:GRN.TF_peak_gene.links.len <- GRN.TF_peak_gene.links %>% nrow()
1679585417125:metrics <- c(metrics, GRN.TF_peak_gene.links.len)
1679585417135:# store the GRN metrics in the dataframe containing all GRNs metrics
1679585417140:names(metrics) <- metrics.names
1679585417146:GRN.metrics <- GRN.metrics %>% rbind(metrics)
1679585417155:# store the TF-PEAK-GENE links in independent dataframes
1679585417160:assign(paste("TF.PEAK.GENE", res, sep = "."), GRN.TF_peak_gene.links)
1679585417165:assign(paste("PEAK.GENE", res, sep = "."), GRN.peak_gene.links)
1679585417170:assign(paste("TF.PEAK", res, sep = "."), GRN.TF_peak.links)
1679585417176:assign(paste("TFs", res, sep = "."), GRN.uniqueTFs)
1679585417180:assign(paste("PEAKs", res, sep = "."), GRN.uniquePEAKs)
1679585417185:assign(paste("GENEs", res, sep = "."), GRN.uniqueGENEs)
1679585417195:# remove GRN object from memory
1679585417213:rm(GRN)
1679585417219:# reset metrics vector
1679585417224:metrics <- c()
1679585417230:}
1679585473911:# rename the columns because somehow they do not show up
1679585473915:colnames(GRN.metrics) <- metrics.names
1679585474330:GRN.metrics$res <- as.factor(GRN.metrics$res)
1679585474443:colnames(GRN.metrics)
1679585475019:p1 <- ggplot(GRN.metrics, aes(res, uniqueTFs, fill = res)) +
1679585475023:geom_bar(stat = "identity") +
1679585475028:labs(title = "Number of unique TFs per eGRN", x = "Cluster Resolution") +
1679585475032:scale_fill_viridis_d(option = "inferno") +
1679585475037:theme_classic() +
1679585475041:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585476441:p2 <- ggplot(GRN.metrics, aes(res, uniquePEAKs, fill = res)) +
1679585476445:geom_bar(stat = "identity") +
1679585476449:labs(title = "Number of unique PEAKs per eGRN", x = "Cluster Resolution") +
1679585476453:scale_fill_viridis_d(option = "inferno") +
1679585476458:theme_classic() +
1679585476462:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585476821:p3 <- ggplot(GRN.metrics, aes(res, uniqueGENEs, fill = res)) +
1679585476825:geom_bar(stat = "identity") +
1679585476830:labs(title = "Number of unique GENEs per eGRN", x = "Cluster Resolution") +
1679585476834:scale_fill_viridis_d(option = "inferno") +
1679585476838:theme_classic() +
1679585476845:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585477109:p4 <- ggplot(GRN.metrics, aes(res, TF.PEAK.links, fill = res)) +
1679585477114:geom_bar(stat = "identity") +
1679585477118:labs(title = "Number of TF-PEAK links per eGRN", x = "Cluster Resolution") +
1679585477124:scale_fill_viridis_d(option = "inferno") +
1679585477128:theme_classic() +
1679585477133:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585477399:p5 <- ggplot(GRN.metrics, aes(res, PEAK.GENE.links, fill = res)) +
1679585477403:geom_bar(stat = "identity") +
1679585477408:labs(title = "Number of PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679585477412:scale_fill_viridis_d(option = "inferno") +
1679585477416:theme_classic() +
1679585477421:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585477675:p6 <- ggplot(GRN.metrics, aes(res, TF.PEAK.GENE.links, fill = res)) +
1679585477679:geom_bar(stat = "identity") +
1679585477687:labs(title = "Number of TF-PEAK-GENE links per eGRN", x = "Cluster Resolution") +
1679585477692:scale_fill_viridis_d(option = "inferno") +
1679585477696:theme_classic() +
1679585477701:theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
1679585477719:ggarrange(p1, p2, p3, p4, p5, p6 + rremove("x.text"),
1679585477723:labels = c("A", "B", "C", "D", "E", "F"),
1679585477727:ncol = 2, nrow = 3)
1679585481138:# create binary df with all links and resolutions as columns
1679585481142:df_list <- list(TF.PEAK.GENE.0.1, TF.PEAK.GENE.0.25, TF.PEAK.GENE.0.5, TF.PEAK.GENE.0.75, TF.PEAK.GENE.1, TF.PEAK.GENE.2, TF.PEAK.GENE.3, TF.PEAK.GENE.4,
1679585481147:TF.PEAK.GENE.5, TF.PEAK.GENE.6, TF.PEAK.GENE.7, TF.PEAK.GENE.8, TF.PEAK.GENE.9, TF.PEAK.GENE.10, TF.PEAK.GENE.12, TF.PEAK.GENE.14,
1679585481151:TF.PEAK.GENE.16, TF.PEAK.GENE.18, TF.PEAK.GENE.20)
1679585481290:all.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679585481316:colnames(all.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585481505:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585482231:names <- c()
1679585482403:i = 1
1679585482584:z = 1
1679585482886:for (df in df_list){
1679585482891:res <- resolutions[i]
1679585482895:for (j in 1:nrow(df)){
1679585482900:name <- paste(df[j,1], df[j,2], sep = "_")
1679585482904:name <- paste(name, df[j,3], sep = "_")
1679585482909:if (name %in% rownames(all.links)) {
1679585482913:all.links[name, i] = 1
1679585482918:} else {
1679585482922:binary <- rep(0, 19)
1679585482926:binary[i] <- 1
1679585482931:names(binary) <- resolutions
1679585482936:all.links <- rbind(all.links, binary)
1679585482940:rownames(all.links)[z] <- name
1679585482944:z = z + 1
1679585482950:}
1679585482954:binary <- c()
1679585482959:name <- ""
1679585482963:}
1679585482968:i = i+1
1679585482973:}
1679585497528:colnames(all.links) <- resolutions
1679585498132:all.links
1679585499794:# upset plot
1679585499798:all.links.min3 <- all.links %>% dplyr::filter(rowSums(.) > 3)
1679585499978:all.links.min3 %>% colnames() %>% class() == resolutions %>%  class()
1679585500536:colnames(all.links.min3) <- as.character(resolutions)
1679585502300:# add resolution id column in all tf-peak-gene dfs
1679585502305:df.lens <- c()
1679585502435:for (df in df_list){
1679585502440:df.lens <- c(df.lens, nrow(df))
1679585502444:}
1679585502607:# Merge all TF-peak-gene interactions
1679585502611:merged.all.links <- do.call("rbind", df_list)
1679585503321:merged.all.links <- merged.all.links %>% cbind(res = rep(resolutions, times = df.lens))
1679585503348:merged.all.links
1679585503492:# Reduce TF.name to just the name
1679585503496:new.TFs <- c()
1679585504060:for (TF in merged.all.links$TF.name){
1679585504066:new.TFs <- c(new.TFs, strsplit(TF, "[.]")[[1]][1])
1679585504071:}
1679585504796:merged.all.links$TF <- new.TFs
1679585505107:ggplot(merged.all.links %>% dplyr::filter(res %in% resolutions[10:19]), aes(TF, fill = as.factor(res))) +
1679585505111:geom_bar(stat = "count", position = "stack") +
1679585505115:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
1679585507717:# create binary df with all peak-genes links and resolutions as columns
1679585507721:df_list2 <- list(PEAK.GENE.0.1, PEAK.GENE.0.25, PEAK.GENE.0.5, PEAK.GENE.0.75, PEAK.GENE.1, PEAK.GENE.2, PEAK.GENE.3, PEAK.GENE.4,
1679585507726:PEAK.GENE.5, PEAK.GENE.6, PEAK.GENE.7, PEAK.GENE.8, PEAK.GENE.9, PEAK.GENE.10, PEAK.GENE.12, PEAK.GENE.14,
1679585507730:PEAK.GENE.16, PEAK.GENE.18, PEAK.GENE.20)
1679585507735:peak.gene.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679585508708:colnames(peak.gene.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585508749:peak.gene.links
1679585508859:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585509040:names <- c()
1679585509269:i = 1
1679585509466:z = 1
1679585509630:for (df in df_list2){
1679585509635:res <- resolutions[i]
1679585509638:for (j in 1:nrow(df)){
1679585509643:name <- paste(df[j,1], df[j,2], sep = "_")
1679585509647:if (name %in% rownames(peak.gene.links)) {
1679585509651:peak.gene.links[name, i] = 1
1679585509656:} else {
1679585509660:binary <- rep(0, 19)
1679585509664:binary[i] <- 1
1679585509669:names(binary) <- resolutions
1679585509672:peak.gene.links <- rbind(peak.gene.links, binary)
1679585509677:rownames(peak.gene.links)[z] <- name
1679585509681:z = z + 1
1679585509686:}
1679585509690:binary <- c()
1679585509694:name <- ""
1679585509698:}
1679585509703:i = i+1
1679585509707:}
1679585512411:colnames(peak.gene.links) <- resolutions
1679585512415:peak.gene.links
1679585515992:# get pcHiC links
1679585515996:links.dir <- "/g/scb/zaugg/deuner/GRaNIE/validationdata/timecourse_pchic_links.csv"
1679585516147:tc.links <- read.csv(links.dir)
1679585517042:head(tc.links)
1679585517055:# Set up path of the cluster resolutions eGRNs
1679585517059:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679585519652:# set vector with the resolutions
1679585519657:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679585519776:# set colors for ROC curves
1679585519781:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679585519785:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679585519790:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679585519794:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679585520934:# set vecor of auc positioning in y axis
1679585520938:aucy <- seq(10, 110, by = 5)
1679585521446:# iterate over GRNs
1679585521450:j = 0
1679585521877:# boolean for first plot
1679585521882:first = TRUE
1679585522395:# vectors to store TPs and FPs
1679585522399:TP.vec <- c()
1679585522952:FP.vec <- c()
1679585523278:TP.all <- data.frame()
1679585523761:for (res in resolutions){
1679585523765:# set index
1679585523770:j <- j + 1
1679585523777:# set up GRN directory
1679585523781:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679585523785:# read GRN object
1679585523790:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679585523797:# get gene-peak connections from GRN
1679585523802:GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679585523809:# adapt peaks format to tc.links format
1679585523814:form.peak <- rep("", nrow(GRN_links))
1679585523818:for (i in 1:nrow(GRN_links)){
1679585523822:peak <- as.character(GRN_links$peak.ID[i])
1679585523826:split_peak <- strsplit(peak, split = ":")
1679585523830:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679585523834:form.peak[i] <- new_peak
1679585523839:}
1679585523843:GRN_links$id <- seq(1:nrow(GRN_links))
1679585523847:GRN_links$peak.ID <- form.peak
1679585523851:names(GRN_links)[1:2] <- c("peak", "gene")
1679585523858:# Binary classification
1679585523862:# get rows that match in GRN links and HiC links by gene name and peak id
1679585523868:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679585523873:TP$res <- rep(resolutions[j], nrow(TP))
1679585523877:TP.all <- rbind(TP.all, TP)
1679585523881:# set 1 if they are in HiC data and 0 if not
1679585523886:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679585523890:# add column to GRN_links with that information
1679585523894:GRN_links$bc <- bc
1679585523899:# create an confusion matrix
1679585523903:conf.m <- table(bc)
1679585523911:# store GRN links data in a variable
1679585523915:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679585523922:# Compute ROC curve
1679585523926:par(pty = "s")
1679585523934:# print metrics
1679585523938:print("")
1679585523943:print(paste0("Resolution: ", res))
1679585523947:print(paste0("GRN links: ", nrow(GRN_links)))
1679585523951:print(paste0("TP: ", nrow(TP)))
1679585523956:FP <- nrow(GRN_links) - nrow(TP)
1679585523960:print(paste0("FP: ", FP))
1679585523964:print("")
1679585523972:TP.vec <- c(TP.vec, nrow(TP))
1679585523976:FP.vec <- c(FP.vec, FP)
1679585523984:if ((first == TRUE) & (sum(bc) > 0)){
1679585523988:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679585523993:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679585523998:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679585524002:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679585524006:first = FALSE
1679585524011:print(ci.auc(ROC))
1679585524015:}
1679585524021:if ((first == FALSE) & (sum(bc) > 0)){
1679585524026:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679585524030:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679585524035:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679585524040:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679585524045:print(ci.auc(ROC))
1679585524050:}
1679585524058:}
1679589556269:# barplots of TP vs FP
1679589556317:TPFP.df <- data.frame(TPFP = c(TP.vec, FP.vec), cat = c(rep("TP", 19), rep("FP", 19)), res = c(resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2)), resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))))
1679589560445:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679589560449:geom_bar(position = "dodge", stat = "identity") +
1679589560453:theme_classic() +
1679589560458:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679589562953:# compute ratio of TPs vs FPs
1679589562959:TPFP.vec <- TP.vec/FP.vec
1679589563347:ratio.df <- data.frame(res = resolutions, ratio = TPFP.vec)
1679589564072:ggplot(ratio.df, aes(x = as.factor(res), y = ratio)) +
1679589564076:geom_bar(stat = "identity", fill = "#993300", color = "black") +
1679589564081:theme_classic() +
1679589564085:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679589564089:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679589566039:# Check if the TPs are shared
1679589566044:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679589566545:# count occurrence of each link
1679589566550:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene", "res")) %>% group_by(peak, gene) %>% count
1679589567112:# create a column for the pasted peak-gene info
1679589567116:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679589567551:# join counts info to the dataframe
1679589567557:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene"))
1679589567830:# check whether the link is shared or not
1679589567834:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679589568113:# plot count of shared links vs non-shared links
1679589568117:p1 <- ggplot(TP.peak.gene %>% distinct(peak, gene, .keep_all = TRUE), aes(shared, fill = shared)) +
1679589568122:geom_bar(stat = "count") +
1679589568126:theme_classic() +
1679589568131:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679589568135:labs(title = "Are the links shared? (unique links)") +
1679589568140:geom_text(stat='count', aes(label=..count..), vjust=-1) +
1679589568144:theme(legend.position = "none")
1679589568847:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679589568852:geom_bar(stat = "count") +
1679589568857:theme_classic() +
1679589568862:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679589568866:labs(title = "Are the links shared? (all links)") +
1679589568871:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679589569151:p1 + p2
1679589571256:# plot duplicated vs unique links per cluster resolution
1679589571260:ggplot(TP.peak.gene, aes(as.factor(res), fill = shared)) +
1679589571265:geom_bar(stat = "count", position = "dodge") +
1679589571269:theme_classic() +
1679589571273:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679589571278:labs(title = "Are the links shared?", x = "Cluster Resolutions")
1679589572125:# plot most frequent links across resolutions
1679589572129:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679589572810:TP.peak.gene.counts$shared <- ifelse(TP.peak.gene.counts$n > 1, TRUE, FALSE)
1679589574120:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679589574124:geom_bar(stat = "identity") +
1679589574128:theme_bw() +
1679589574132:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679589574136:scale_fill_viridis_d() +
1679589574141:labs(y = "count", title = "Most frequent links across resolutions", caption = "Top 10 Most Frequent Links")
1679589575982:# plot only duplicated links and their corresponding cluster resolutions
1679589575989:library(RColorBrewer)
1679589576555:palette3_info <- brewer.pal.info[brewer.pal.info$category == "qual", ]  # Extract color info
1679589576833:palette3_all <- unlist(mapply(brewer.pal,                     # Create vector with all colors
1679589576838:palette3_info$maxcolors,
1679589576844:rownames(palette3_info)))
1679589577026:palette3_all
1679589577345:palette3 <- sample(palette3_all, 16)                    # Sample colors
1679589577524:palette3
1679589578259:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679589578264:geom_bar(stat = "count") +
1679589578270:theme_bw() +
1679589578274:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679589578281:labs(y = "count", title = "To which eGRNs do the shared links belong?", fill = "Resolutions", caption = "35 Different Links") +
1679589578286:scale_fill_manual(values = palette3)
1679589744593:for (deg.th in 1:14){
1679589744598:# get highly represented links across resolutions
1679589744603:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679589744611:# overview of dataframes
1679589744617:## links from different cluster resolutions
1679589744622:head(merged.all.links) # all links merged
1679589744626:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679589744631:## pcHiC links
1679589744635:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679589744642:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679589744647:high.rep.links.pcHiC <- high.rep.pg.links
1679589744652:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679589744657:high.rep.links.pcHiC$pcHiC <- pcHiC
1679589744665:# format TP.all peak-gene links
1679589744670:pchic.links <- c()
1679589744676:for (i in 1:nrow(TP.all)){
1679589744682:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679589744687:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679589744692:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679589744697:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679589744702:pchic.links <- c(pchic.links, pchic.link)
1679589744707:}
1679589744712:pchic.links
1679589744720:# find links that are in pchic data
1679589744725:links.in.pchic <- c()
1679589744729:for (i in 1:nrow(high.rep.pg.links)){
1679589744734:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679589744739:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679589744744:if (rep.link %in% pchic.links) {
1679589744749:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679589744753:links.in.pchic <- c(links.in.pchic, rep.link)
1679589744758:}
1679589744763:}
1679589744771:print(links.in.pchic)
1679589744789:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679589744794:geom_bar(stat = "count") +
1679589744800:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679589744806:theme_bw() +
1679589744812:annotate("text", x = 1, y = max(table(high.rep.links.pcHiC$pcHiC))/2, label = as.character(length(links.in.pchic)), size = 7) +
1679589744817:annotate("text", x = 0, y = max(table(high.rep.links.pcHiC$pcHiC))/2, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 7) +
1679589744822:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679589744830:assign(paste0("p", deg.th), p)
1679589744835:}
1679589747451:p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12+p13+p14
1679589769149:# PEARSON
1679589769154:# load eGRN
1679589769158:GRN.p <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1679589774203:# SPEARMAN
1679589774208:GRN.s <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_spearman_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1679589777020:# Set up the main directory
1679589777026:path = "/g/scb/zaugg/deuner/GRaNIE"
1679589778324:# Load the seurat object
1679589778328:seuratFile = "timecourse.pp.seuratObject.qs"
1679589778608:timecourse.s <- qread(paste0(path,"/tmp/",seuratFile))
1679589804674:## PEARSON
1679589804678:# TF-peak-gene connections here
1679589804682:GRN.p@connections$all.filtered[["0"]]
1679589804904:connections.p <- as.data.frame(GRN.p@connections$all.filtered[["0"]])
1679589805135:# SCT counts here
1679589805140:GRN.p@data[["RNA"]][["counts"]]
1679589805770:counts.p <- as.data.frame(GRN.p@data[["RNA"]][["counts"]])
1679589805994:counts.p$gene.ENSEMBL <- rownames(counts.p)
1679589806138:counts.p
1679589806323:# norm ATAC counts here
1679589806327:GRN.p@data[["peaks"]][["counts"]]
1679589806799:peaks.p <- as.data.frame(GRN.p@data[["peaks"]][["counts"]])
1679589807043:peaks.p$peak.ID <- rownames(peaks.p)
1679589807216:peaks.p
1679589807419:# connections + counts
1679589807423:joined.p <- connections.p %>% inner_join(counts.p, by = "gene.ENSEMBL") %>% inner_join(peaks.p, by = "peak.ID")
1679589807915:## SPEARMAN
1679589807919:# peak-gene connections here
1679589807923:GRN.s@connections$all.filtered[["0"]]
1679589808220:connections.s <- as.data.frame(GRN.s@connections$all.filtered[["0"]])
1679589808528:# SCT counts here
1679589808533:GRN.s@data[["RNA"]][["counts"]]
1679589808842:counts.s <- as.data.frame(GRN.s@data[["RNA"]][["counts"]])
1679589809037:counts.s$gene.ENSEMBL <- rownames(counts.s)
1679589809239:counts.s
1679589809909:# norm ATAC counts here
1679589810000:GRN.s@data[["peaks"]][["counts"]]
1679589810228:peaks.s <- as.data.frame(GRN.s@data[["peaks"]][["counts"]])
1679589810538:peaks.s$peak.ID <- rownames(peaks.s)
1679589810935:peaks.s
1679589811528:# connections + counts
1679589811534:joined.s <- connections.s %>% inner_join(counts.s, by = "gene.ENSEMBL") %>% inner_join(peaks.s, by = "peak.ID")
1679589812031:# check shared TF-peak-links
1679589812036:tf.peak.gene.p <- GRN.p@connections$all.filtered[["0"]]
1679589812534:tf.peak.gene.s <- GRN.s@connections$all.filtered[["0"]]
1679589812797:colnames(tf.peak.gene.p)
1679589813247:tf.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("TF.ID"))
1679589813883:gene.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("gene.name"))
1679589814498:peak.shared.p.s <- inner_join(tf.peak.gene.p, tf.peak.gene.s, by = c("peak.ID"))
1679589815319:tf.peak.gene.s
1679589815670:tf.shared.p.s
1679589816009:gene.shared.p.s
1679589816172:peak.shared.p.s
1679589816804:# select top5 most significant peak-gene links
1679589816808:top5.p <- joined.p %>% top_n(5, peak_gene.r)
1679589817476:top5.p.1 <- top5.p[,1:32]
1679589817849:top5.p.2 <- top5.p[,c(1:16, 33:48)]
1679589818180:# long format
1679589818184:top5.p.long.1 <- reshape2::melt(top5.p.1 , id.vars = colnames(top5.p)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679589818509:top5.p.long.2 <- reshape2::melt(top5.p.2, id.vars = colnames(top5.p)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679589819292:top5.p.both <- cbind(top5.p.long.1, top5.p.long.2[,17:ncol(top5.p.long.2)])
1679589819774:# assign informative colors to the cell type clusters
1679589819778:cols <- c("#FF6600", "#FF0000", "#CC0033", "#99FFFF", "#0099FF", "#33FF33", "#FF00FF", "#990000", "#FF3300", "#FFCC66", "#660066", "#0000FF", "#FFFF33", "#FF6666", "#FF9933", "#66FF99")
1679589820470:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679589820598:geom_point(alpha = 0.75, size = 2) +
1679589820602:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679589820606:theme_classic() +
1679589820611:theme(plot.title = element_text(hjust = 0.5)) +
1679589820615:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679589820619:scale_color_manual(values = cols)
1679589826003:table(joined.p$TF.ID)
1679589826985:ggplot(top5.p.both, aes(x = value.RNA, y = value.ATAC, col = cluster.RNA, label=TF.name)) +
1679589826990:geom_point(alpha = 0.75, size = 2) +
1679589826995:labs(x = "Gene Expression (SCT) log 10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679589826999:theme_classic() +
1679589827004:theme(plot.title = element_text(hjust = 0.5)) +
1679589827009:geom_text(hjust=0, vjust=0)
1679589830264:# set new ids
1679589830269:new.ids <- as.character(c(1:5))
1679589830766:top5.p.both$id <- new.ids
1679589831122:names(new.ids) <- levels(top5.p.both$id)
1679589831709:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679589831714:geom_point(alpha = 0.75, size = 2) +
1679589831718:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679589831723:theme_classic() +
1679589831727:theme(plot.title = element_text(hjust = 0.5))
1679589888316:top5.p.both$
1679589888324:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679589888329:geom_point(alpha = 0.75, size = 2) +
1679589888334:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679589888339:theme_classic() +
1679589888343:theme(plot.title = element_text(hjust = 0.5))
1679589893661:top5.p.both
1679589951927:p1 <- ggplot(top5.p.both %>% dplyr::filter(id == "1"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679589951933:geom_point(alpha = 0.75, size = 2) +
1679589951938:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "TTop 1 most correlated peak-gene link") +
1679589951943:theme_classic() +
1679589951947:theme(plot.title = element_text(hjust = 0.5)) +
1679589951951:scale_color_manual(values = cols)
1679589952082:p2 <-ggplot(top5.p.both %>% dplyr::filter(id == "2"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679589952086:geom_point(alpha = 0.75, size = 2) +
1679589952091:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 2 most correlated peak-gene link") +
1679589952095:theme_classic() +
1679589952099:theme(plot.title = element_text(hjust = 0.5)) +
1679589952104:scale_color_manual(values = cols)
1679589952288:p3 <-  ggplot(top5.p.both %>% dplyr::filter(id == "3"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679589952293:geom_point(alpha = 0.75, size = 2) +
1679589952297:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 3 most correlated peak-gene link") +
1679589952302:theme_classic() +
1679589952306:theme(plot.title = element_text(hjust = 0.5)) +
1679589952311:scale_color_manual(values = cols)
1679589952639:p4 <-ggplot(top5.p.both %>% dplyr::filter(id == "4"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679589952644:geom_point(alpha = 0.75, size = 2) +
1679589952648:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 4 most correlated peak-gene link") +
1679589952652:theme_classic() +
1679589952657:theme(plot.title = element_text(hjust = 0.5)) +
1679589952661:scale_color_manual(values = cols)
1679589952955:p5 <-ggplot(top5.p.both %>% dplyr::filter(id == "5"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679589952959:geom_point(alpha = 0.75, size = 2) +
1679589952964:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-gene link") +
1679589952969:theme_classic() +
1679589952974:theme(plot.title = element_text(hjust = 0.5)) +
1679589952978:scale_color_manual(values = cols)
1679589953697:ggarrange(p1,p2,p3,p4,p5)
1679590724632:p1
1679590739506:p2
1679590778610:p1 <- ggplot(top5.p.both %>% dplyr::filter(id == "1"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679590778615:geom_point(alpha = 0.75, size = 2) +
1679590778619:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "TTop 1 most correlated peak-gene link") +
1679590778623:theme_classic() +
1679590778627:theme(plot.title = element_text(hjust = 0.5)) +
1679590778631:scale_color_manual(values = cols)
1679590781189:p1
1679590796335:p2
1679591786607:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679591786613:geom_point(alpha = 0.75, size = 2) +
1679591786617:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679591786622:theme_classic() +
1679591786627:theme(plot.title = element_text(hjust = 0.5))
1679591835439:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id, label = peak_gene.r)) +
1679591835449:geom_point(alpha = 0.75, size = 2) +
1679591835456:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679591835463:theme_classic() +
1679591835468:theme(plot.title = element_text(hjust = 0.5))
1679591845954:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id, label = peak_gene.r)) +
1679591845959:geom_point(alpha = 0.75, size = 2) +
1679591845963:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679591845968:theme_classic() +
1679591845973:theme(plot.title = element_text(hjust = 0.5)) +
1679591845980:geom_text()
1679591882622:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679591882629:geom_point(alpha = 0.75, size = 2) +
1679591882634:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679591882638:theme_classic() +
1679591882643:theme(plot.title = element_text(hjust = 0.5)) +
1679591882647:annotate(peak_gene.r[1:5])
1679591890041:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679591890046:geom_point(alpha = 0.75, size = 2) +
1679591890050:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679591890054:theme_classic() +
1679591890058:theme(plot.title = element_text(hjust = 0.5)) +
1679591890063:annotate(top5.p.bothpeak_gene.r[1:5])
1679591894154:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679591894158:geom_point(alpha = 0.75, size = 2) +
1679591894163:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679591894167:theme_classic() +
1679591894172:theme(plot.title = element_text(hjust = 0.5)) +
1679591894176:annotate(top5.p.both$peak_gene.r[1:5])
1679591911917:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id, label = peak_gene.r[1:5])) +
1679591911922:geom_point(alpha = 0.75, size = 2) +
1679591911928:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679591911932:theme_classic() +
1679591911937:theme(plot.title = element_text(hjust = 0.5)) +
1679591911941:geom_text()
1679592058797:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679592058801:geom_point(alpha = 0.75, size = 2) +
1679592058805:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679592058809:theme_classic() +
1679592058814:theme(plot.title = element_text(hjust = 0.5)) +
1679592058818:geom_label_repel(data=top5.p.both[1:5,], aes(label=as.factor(peak_gene.r), alpha=0.7), size=5, force=1.3)
1679592084773:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679592084779:geom_point(alpha = 0.75, size = 2) +
1679592084783:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679592084788:theme_classic() +
1679592084792:theme(plot.title = element_text(hjust = 0.5)) +
1679592084796:geom_label_repel(data=top5.p.both[1:5,], aes(label=as.factor(round(peak_gene.r, 4)), alpha=0.7), size=5, force=1.3)
1679592101502:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679592101507:geom_point(alpha = 0.75, size = 2) +
1679592101511:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679592101515:theme_classic() +
1679592101520:theme(plot.title = element_text(hjust = 0.5)) +
1679592101524:geom_label_repel(data=top5.p.both[1:5,], aes(label=as.factor(round(peak_gene.r, 4))), size=5, force=1.3)
1679592107858:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679592107862:geom_point(alpha = 0.75, size = 2) +
1679592107868:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679592107873:theme_classic() +
1679592107877:theme(plot.title = element_text(hjust = 0.5)) +
1679592107882:geom_label_repel(data=top5.p.both[1:5,], aes(label=as.factor(round(peak_gene.r, 4))), size=5, force=3)
1679592114301:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679592114305:geom_point(alpha = 0.75, size = 2) +
1679592114309:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679592114314:theme_classic() +
1679592114318:theme(plot.title = element_text(hjust = 0.5)) +
1679592114322:geom_label_repel(data=top5.p.both[1:5,], aes(label=as.factor(round(peak_gene.r, 4))), size=5)
1679592174934:# select top5 most significant peak-gene links
1679592174939:## add also the pearson coefficient as a columns
1679592174948:top5.s <- joined.s %>% top_n(5, peak_gene.r)
1679592175192:top5.s.1 <- top5.s[,1:32]
1679592175423:top5.s.2 <- top5.s[,c(1:16, 33:48)]
1679592175601:# long format
1679592175606:top5.s.long.1 <- reshape2::melt(top5.s.1 , id.vars = colnames(top5.s)[1:16], variable.name = "cluster.RNA", value.name = "value.RNA")
1679592175757:top5.s.long.2 <- reshape2::melt(top5.s.2, id.vars = colnames(top5.s)[1:16], variable.name = "cluster.ATAC", value.name = "value.ATAC")
1679592176206:top5.s.both <- cbind(top5.s.long.1, top5.s.long.2[,17:ncol(top5.s.long.2)])
1679592176499:# set new ids
1679592176504:new.ids <- as.character(c(1:5))
1679592176838:top5.s.both$id <- new.ids
1679592177002:names(new.ids) <- levels(top5.s.both$id)
1679592177182:new.ids
1679592177727:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679592177732:geom_point(alpha = 0.75, size = 2) +
1679592177738:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679592177743:theme_classic() +
1679592177747:theme(plot.title = element_text(hjust = 0.5))
1679592190300:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679592190304:geom_point(alpha = 0.75, size = 2) +
1679592190309:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679592190313:theme_classic() +
1679592190317:theme(plot.title = element_text(hjust = 0.5)) +
1679592190321:scale_color_manual(values = cols)
1679592193038:p1 <- ggplot(top5.s.both %>% dplyr::filter(id == "1"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679592193042:geom_point(alpha = 0.75, size = 2) +
1679592193047:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 1 most correlated peak-gene link") +
1679592193051:theme_classic() +
1679592193055:theme(plot.title = element_text(hjust = 0.5)) +
1679592193059:scale_color_manual(values = cols)
1679592194849:p2 <-ggplot(top5.s.both %>% dplyr::filter(id == "2"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679592194853:geom_point(alpha = 0.75, size = 2) +
1679592194857:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 2 most correlated peak-gene link") +
1679592194861:theme_classic() +
1679592194865:theme(plot.title = element_text(hjust = 0.5)) +
1679592194869:scale_color_manual(values = cols)
1679592195845:p3 <-  ggplot(top5.s.both %>% dplyr::filter(id == "3"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679592195849:geom_point(alpha = 0.75, size = 2) +
1679592195853:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 3 most correlated peak-gene link") +
1679592195858:theme_classic() +
1679592195862:theme(plot.title = element_text(hjust = 0.5)) +
1679592195866:scale_color_manual(values = cols)
1679592196054:p4 <-ggplot(top5.s.both %>% dplyr::filter(id == "4"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679592196063:geom_point(alpha = 0.75, size = 2) +
1679592196070:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 4 most correlated peak-gene link") +
1679592196074:theme_classic() +
1679592196079:theme(plot.title = element_text(hjust = 0.5)) +
1679592196083:scale_color_manual(values = cols)
1679592196237:p5 <-ggplot(top5.s.both %>% dplyr::filter(id == "5"), aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679592196241:geom_point(alpha = 0.75, size = 2) +
1679592196246:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-gene link") +
1679592196250:theme_classic() +
1679592196254:theme(plot.title = element_text(hjust = 0.5)) +
1679592196258:scale_color_manual(values = cols)
1679592196884:ggarrange(p1,p2,p3,p4,p5)
1679592251168:ggplot(top5.s.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679592251175:geom_point(alpha = 0.75, size = 2) +
1679592251184:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "SPEARMAN CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679592251188:theme_classic() +
1679592251193:theme(plot.title = element_text(hjust = 0.5)) +
1679592251197:geom_label_repel(data=top5.s.both[1:5,], aes(label=as.factor(round(peak_gene.r, 4))), size=5)
1679592300733:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = cluster.RNA)) +
1679592300738:geom_point(alpha = 0.75, size = 2) +
1679592300744:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Peak-gene link with highest correlation coefficient") +
1679592300748:theme_classic() +
1679592300752:theme(plot.title = element_text(hjust = 0.5)) +
1679592300756:geom_label_repel(data=top5.p.both[top5.p.both$TF.name == "YY1",], aes(label=as.factor(TF.name), alpha=0.7), size=5, force=1.3, max.overlaps = 30) +
1679592300761:scale_color_manual(values = cols)
1679592314813:ggplot(top5.p.both, aes(x = value.RNA, y = value.ATAC, col = cluster.RNA, label=TF.name)) +
1679592314818:geom_point(alpha = 0.75, size = 2) +
1679592314823:labs(x = "Gene Expression (SCT) log 10", y = "Peak Accessibility", col = "Cluster / Cell Type", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 10 most correlated peak-genes") +
1679592314828:theme_classic() +
1679592314834:theme(plot.title = element_text(hjust = 0.5)) +
1679592314840:geom_text(hjust=0, vjust=0)
1679592317340:ggplot(top5.p.both, aes(x = log10(value.RNA), y = value.ATAC, col = id)) +
1679592317345:geom_point(alpha = 0.75, size = 2) +
1679592317349:labs(x = "Gene Expression (SCT) log10", y = "Peak Accessibility", col = "Id", title = "PEARSON CORRELATION: Peak-Gene links", caption = "Top 5 most correlated peak-genes") +
1679592317353:theme_classic() +
1679592317358:theme(plot.title = element_text(hjust = 0.5)) +
1679592317363:geom_label_repel(data=top5.p.both[1:5,], aes(label=as.factor(round(peak_gene.r, 4))), size=5)
1679649325884:nrow(TF.PEAK.GENE.20)
1679664212859:# load libraries
1679664212897:library(GRaNIE)
1679664212910:library(dplyr)
1679664212919:library(qs)
1679664212928:library(ggplot2)
1679664213151:library(ggpubr)
1679664213314:library(pROC)
1679664213514:library(EnsDb.Hsapiens.v79)
1679664213726:library(UpSetR)
1679664214138:library(data.table)
1679664214693:library(ggrepel)
1679664227874:# Set up path of the cluster resolutions eGRNs
1679664227880:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679664228220:# set vector with the resolutions
1679664228226:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679664228610:# creat data.frame to store each GRN metrics
1679664228616:GRN.metrics <- data.frame(matrix(ncol = 7, nrow = 0))
1679664228907:metrics.names <- c("res", "uniqueTFs", "uniquePEAKs", "uniqueGENEs", "TF.PEAK.links", "PEAK.GENE.links", "TF.PEAK.GENE.links")
1679664229254:colnames(GRN.metrics) <- metrics.names
1679664229647:# iterate over GRNs
1679664229652:for (res in resolutions){
1679664229662:# set up GRN directory
1679664229667:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679664229674:# read GRN object
1679664229680:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679664229689:# vector to store the GRN metrics
1679664229695:metrics <- c(res)
1679664229726:# retrieve metrics from the GRN
1679664229731:GRN.uniqueTFs <- GRN@connections$all.filtered$`0` %>% pull("TF.name") %>% unique() %>% as.data.frame()
1679664229739:GRN.uniqueTFs.len <- GRN.uniqueTFs %>% nrow()
1679664229744:metrics <- c(metrics, GRN.uniqueTFs.len)
1679664229749:GRN.uniquePEAKs <- GRN@connections$all.filtered$`0` %>% pull("peak.ID") %>% unique() %>% as.data.frame()
1679664229754:GRN.uniquePEAKs.len <- GRN.uniquePEAKs %>% nrow()
1679664229761:metrics <- c(metrics, GRN.uniquePEAKs.len)
1679664229766:GRN.uniqueGENEs <- GRN@connections$all.filtered$`0` %>% pull("gene.name") %>% unique() %>% as.data.frame()
1679664229771:GRN.uniqueGENEs.len <- GRN.uniqueGENEs %>% nrow()
1679664229776:metrics <- c(metrics, GRN.uniqueGENEs.len)
1679664229781:GRN.TF_peak.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID")) %>% distinct()
1679664229787:GRN.TF_peak.links.len <- GRN.TF_peak.links %>% nrow()
1679664229792:metrics <- c(metrics, GRN.TF_peak.links.len)
1679664229798:GRN.peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("gene.name", "peak.ID")) %>% distinct()
1679664229804:GRN.peak_gene.links.len <- GRN.peak_gene.links%>% nrow()
1679664229810:metrics <- c(metrics, GRN.peak_gene.links.len)
1679664229817:GRN.TF_peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID", "gene.name")) %>% distinct()
1679664229822:GRN.TF_peak_gene.links.len <- GRN.TF_peak_gene.links %>% nrow()
1679664229827:metrics <- c(metrics, GRN.TF_peak_gene.links.len)
1679664229835:# store the GRN metrics in the dataframe containing all GRNs metrics
1679664229840:names(metrics) <- metrics.names
1679664229844:GRN.metrics <- GRN.metrics %>% rbind(metrics)
1679664229852:# store the TF-PEAK-GENE links in independent dataframes
1679664229857:assign(paste("TF.PEAK.GENE", res, sep = "."), GRN.TF_peak_gene.links)
1679664229863:assign(paste("PEAK.GENE", res, sep = "."), GRN.peak_gene.links)
1679664229868:assign(paste("TF.PEAK", res, sep = "."), GRN.TF_peak.links)
1679664229872:assign(paste("TFs", res, sep = "."), GRN.uniqueTFs)
1679664229877:assign(paste("PEAKs", res, sep = "."), GRN.uniquePEAKs)
1679664229882:assign(paste("GENEs", res, sep = "."), GRN.uniqueGENEs)
1679664229891:# remove GRN object from memory
1679664229896:rm(GRN)
1679664229901:# reset metrics vector
1679664229906:metrics <- c()
1679664229924:}
1679664568242:GRN.dir <- "/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/connections_TFPeak0.2_peakGene0.1.tsv.gz"
1679664587133:GRN <- qread(GRN.dir)
1679664600057:GRN <- read.csv(GRN.dir)
1679664613228:GRN <- read.csv(GRN.dir, row.names = 1)
1679664616623:GRN <- read.csv(GRN.dir)
1679664726097:# creat data.frame to store each GRN metrics
1679664726104:GRN.metrics <- data.frame(matrix(ncol = 7, nrow = 0))
1679664726301:metrics.names <- c("res", "uniqueTFs", "uniquePEAKs", "uniqueGENEs", "TF.PEAK.links", "PEAK.GENE.links", "TF.PEAK.GENE.links")
1679664726497:colnames(GRN.metrics) <- metrics.names
1679664726697:# iterate over GRNs
1679664726704:for (res in resolutions){
1679664726714:# set up GRN directory
1679664726720:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679664726725:# read GRN object
1679664726730:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679664726739:# vector to store the GRN metrics
1679664726745:metrics <- c(res)
1679664726755:# retrieve metrics from the GRN
1679664726760:GRN.uniqueTFs <- GRN@connections$all.filtered$`0` %>% pull("TF.name") %>% unique() %>% as.data.frame()
1679664726765:GRN.uniqueTFs.len <- GRN.uniqueTFs %>% nrow()
1679664726770:metrics <- c(metrics, GRN.uniqueTFs.len)
1679664726776:GRN.uniquePEAKs <- GRN@connections$all.filtered$`0` %>% pull("peak.ID") %>% unique() %>% as.data.frame()
1679664726781:GRN.uniquePEAKs.len <- GRN.uniquePEAKs %>% nrow()
1679664726786:metrics <- c(metrics, GRN.uniquePEAKs.len)
1679664726792:GRN.uniqueGENEs <- GRN@connections$all.filtered$`0` %>% pull("gene.name") %>% unique() %>% as.data.frame()
1679664726801:GRN.uniqueGENEs.len <- GRN.uniqueGENEs %>% nrow()
1679664726806:metrics <- c(metrics, GRN.uniqueGENEs.len)
1679664726812:GRN.TF_peak.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID")) %>% distinct()
1679664726817:GRN.TF_peak.links.len <- GRN.TF_peak.links %>% nrow()
1679664726822:metrics <- c(metrics, GRN.TF_peak.links.len)
1679664726827:GRN.peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("gene.name", "peak.ID")) %>% distinct()
1679664726832:GRN.peak_gene.links.len <- GRN.peak_gene.links%>% nrow()
1679664726838:metrics <- c(metrics, GRN.peak_gene.links.len)
1679664726844:GRN.TF_peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID", "gene.name")) %>% distinct()
1679664726859:GRN.TF_peak_gene.links.len <- GRN.TF_peak_gene.links %>% nrow()
1679664726866:metrics <- c(metrics, GRN.TF_peak_gene.links.len)
1679664726877:# store the GRN metrics in the dataframe containing all GRNs metrics
1679664726883:names(metrics) <- metrics.names
1679664726888:GRN.metrics <- GRN.metrics %>% rbind(metrics)
1679664726898:# store the TF-PEAK-GENE links in independent dataframes
1679664726904:assign(paste("TF.PEAK.GENE", res, sep = "."), GRN.TF_peak_gene.links)
1679664726910:assign(paste("PEAK.GENE", res, sep = "."), GRN.peak_gene.links)
1679664726915:assign(paste("TF.PEAK", res, sep = "."), GRN.TF_peak.links)
1679664726921:assign(paste("TFs", res, sep = "."), GRN.uniqueTFs)
1679664726928:assign(paste("PEAKs", res, sep = "."), GRN.uniquePEAKs)
1679664726934:assign(paste("GENEs", res, sep = "."), GRN.uniqueGENEs)
1679664726943:# remove GRN object from memory
1679664726948:rm(GRN)
1679664726953:# reset metrics vector
1679664726959:metrics <- c()
1679664726965:}
1679664764967:GRN
1679664790693:# PEARSON
1679664790697:# load eGRN
1679664790703:GRN.p <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1679664801042:GRN.p@connections$peak_genes
1679665115730:GRN.p@connections$all.filtered
1679665323091:getGRNConnections(GRN.p, peak.gene)
1679665325393:getGRNConnections(GRN.p, "peak.gene")
1679665330993:getGRNConnections(GRN.p, "peak_genea")
1679665333814:getGRNConnections(GRN.p, "peak_genes")
1679665575307:print(getGRNConnections(GRN.p, "peak_genes"), n = 100)
1679665608301:GRN.p@connections$all.filtered
1679665623307:colnames(GRN.p@connections$all.filtered)
1679665630774:colnames(GRN.p@connections$all.filtered$`0`)
1679665660554:GRN.p@connections$all.filtered$`0`$peak_gene.p_raw
1679665673501:GRN.p@connections$all.filtered$`0`$peak_gene.p_adj
1679665698314:GRN.p@connections$peak_genes$`0`$
1679665702564:GRN.p@connections$peak_genes$`0`
1679665725771:GRN.p@connections$peak_genes$`0` %>% filter(peak_gene.p_raw < 0.05)
1679665735565:GRN.p@connections$peak_genes$`0` %>% as.data.frame() %>% filter(peak_gene.p_raw < 0.05)
1679665750569:GRN.p@connections$peak_genes$`0` %>% dplyr::filter(peak_gene.p_raw < 0.05)
1679668201266:# Set up path of the cluster resolutions eGRNs
1679668201281:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679668201834:# set vector with the resolutions
1679668201848:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679668202314:# creat data.frame to store each GRN metrics
1679668202329:GRN.metrics <- data.frame(matrix(ncol = 7, nrow = 0))
1679668202757:metrics.names <- c("res", "uniqueTFs", "uniquePEAKs", "uniqueGENEs", "TF.PEAK.links", "PEAK.GENE.links", "TF.PEAK.GENE.links")
1679668203100:colnames(GRN.metrics) <- metrics.names
1679668203409:# iterate over GRNs
1679668203423:for (res in resolutions){
1679668203448:# set up GRN directory
1679668203464:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679668203479:# read GRN object
1679668203493:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679668203517:# vector to store the GRN metrics
1679668203531:metrics <- c(res)
1679668203556:# retrieve metrics from the GRN
1679668203569:GRN.uniqueTFs <- GRN@connections$all.filtered$`0` %>% pull("TF.name") %>% unique() %>% as.data.frame()
1679668203583:GRN.uniqueTFs.len <- GRN.uniqueTFs %>% nrow()
1679668203600:metrics <- c(metrics, GRN.uniqueTFs.len)
1679668203610:GRN.uniquePEAKs <- GRN@connections$all.filtered$`0` %>% pull("peak.ID") %>% unique() %>% as.data.frame()
1679668203624:GRN.uniquePEAKs.len <- GRN.uniquePEAKs %>% nrow()
1679668203640:metrics <- c(metrics, GRN.uniquePEAKs.len)
1679668203654:GRN.uniqueGENEs <- GRN@connections$all.filtered$`0` %>% pull("gene.name") %>% unique() %>% as.data.frame()
1679668203669:GRN.uniqueGENEs.len <- GRN.uniqueGENEs %>% nrow()
1679668203684:metrics <- c(metrics, GRN.uniqueGENEs.len)
1679668203699:GRN.TF_peak.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID")) %>% distinct()
1679668203713:GRN.TF_peak.links.len <- GRN.TF_peak.links %>% nrow()
1679668203727:metrics <- c(metrics, GRN.TF_peak.links.len)
1679668203741:GRN.peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("gene.name", "peak.ID")) %>% distinct()
1679668203758:GRN.peak_gene.links.len <- GRN.peak_gene.links%>% nrow()
1679668203774:metrics <- c(metrics, GRN.peak_gene.links.len)
1679668203805:GRN.TF_peak_gene.links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(c("TF.name", "peak.ID", "gene.name")) %>% distinct()
1679668203837:GRN.TF_peak_gene.links.len <- GRN.TF_peak_gene.links %>% nrow()
1679668203886:metrics <- c(metrics, GRN.TF_peak_gene.links.len)
1679668203952:# significant peak-gene links (p < 0.05)
1679668203985:GRN.sig.peak_gene.links <- GRN@connections$peak_genes$`0` %>% dplyr::filter(peak_gene.p_raw < 0.05)
1679668204033:# store the GRN metrics in the dataframe containing all GRNs metrics
1679668204048:names(metrics) <- metrics.names
1679668204064:GRN.metrics <- GRN.metrics %>% rbind(metrics)
1679668204089:# store the TF-PEAK-GENE links in independent dataframes
1679668204101:assign(paste("TF.PEAK.GENE", res, sep = "."), GRN.TF_peak_gene.links)
1679668204121:assign(paste("PEAK.GENE", res, sep = "."), GRN.peak_gene.links)
1679668204135:assign(paste("TF.PEAK", res, sep = "."), GRN.TF_peak.links)
1679668204145:assign(paste("TFs", res, sep = "."), GRN.uniqueTFs)
1679668204159:assign(paste("PEAKs", res, sep = "."), GRN.uniquePEAKs)
1679668204173:assign(paste("GENEs", res, sep = "."), GRN.uniqueGENEs)
1679668204187:assign(paste("SIG.PEAK.GENE", res, sep = "."), GRN.sig.peak_gene.links)
1679668204202:# remove GRN object from memory
1679668204216:rm(GRN)
1679668204231:# reset metrics vector
1679668204247:metrics <- c()
1679668204260:}
1679668230600:# rename the columns because somehow they do not show up
1679668230605:colnames(GRN.metrics) <- metrics.names
1679668230610:GRN.metrics$res <- as.factor(GRN.metrics$res)
1679668230620:colnames(GRN.metrics)
1679668287180:# create binary df with all significant peak-genes links and resolutions as columns
1679668287186:df_list2 <- list(SIG.PEAK.GENE.0.1, SIG.PEAK.GENE.0.25, SIG.PEAK.GENE.0.5, SIG.PEAK.GENE.0.75, SIG.PEAK.GENE.1, SIG.PEAK.GENE.2,
1679668287190:SIG.PEAK.GENE.3, SIG.PEAK.GENE.4, SIG.PEAK.GENE.5, SIG.PEAK.GENE.6, SIG.PEAK.GENE.7, SIG.PEAK.GENE.8, SIG.PEAK.GENE.9,
1679668287195:SIG.PEAK.GENE.10, SIG.PEAK.GENE.12, SIG.PEAK.GENE.14, SIG.PEAK.GENE.16, SIG.PEAK.GENE.18, SIG.PEAK.GENE.20)
1679668289980:peak.gene.links <- data.frame(matrix(ncol = 19, nrow = 0))
1679668290699:colnames(peak.gene.links) <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679668291277:peak.gene.links
1679668291716:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679668292581:names <- c()
1679668295271:i = 1
1679668295971:z = 1
1679668297729:for (df in df_list2){
1679668297734:res <- resolutions[i]
1679668297739:for (j in 1:nrow(df)){
1679668297744:name <- paste(df[j,1], df[j,2], sep = "_")
1679668297750:if (name %in% rownames(peak.gene.links)) {
1679668297755:peak.gene.links[name, i] = 1
1679668297760:} else {
1679668297765:binary <- rep(0, 19)
1679668297770:binary[i] <- 1
1679668297775:names(binary) <- resolutions
1679668297784:peak.gene.links <- rbind(peak.gene.links, binary)
1679668297790:rownames(peak.gene.links)[z] <- name
1679668297795:z = z + 1
1679668297802:}
1679668297808:binary <- c()
1679668297815:name <- ""
1679668297820:}
1679668297825:i = i+1
1679668297830:}
1679668647771:GRN.p@connections$peak_genes
1679668759979:# get pcHiC links
1679668759988:links.dir <- "/g/scb/zaugg/deuner/GRaNIE/validationdata/timecourse_pchic_links.csv"
1679668760530:tc.links <- read.csv(links.dir)
1679668761829:head(tc.links)
1679668771247:# Set up path of the cluster resolutions eGRNs
1679668771254:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679668772049:# set vector with the resolutions
1679668772054:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679668772663:# set colors for ROC curves
1679668772670:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679668772678:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679668772689:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679668772698:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679668773259:# set vecor of auc positioning in y axis
1679668773264:aucy <- seq(10, 110, by = 5)
1679668773798:# iterate over GRNs
1679668773807:j = 0
1679668774322:# boolean for first plot
1679668774328:first = TRUE
1679668774974:# vectors to store TPs and FPs
1679668774980:TP.vec <- c()
1679668775515:FP.vec <- c()
1679668776011:TP.all <- data.frame()
1679668776538:for (res in resolutions){
1679668776544:# set index
1679668776549:j <- j + 1
1679668776559:# set up GRN directory
1679668776564:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679668776568:# read GRN object
1679668776573:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679668776581:# get gene-peak connections from GRN
1679668776586:#GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679668776591:GRN_links <- GRN@connections$peak_genes$`0` %>% dplyr::filter(peak_gene.p_raw < 0.05) %>% as.data.frame() %>% dplyr::select(peak.ID, gene.ENSEMBL, peak_gene.r, peak_gene.p_raw)
1679668776601:# adapt peaks format to tc.links format
1679668776607:form.peak <- rep("", nrow(GRN_links))
1679668776613:for (i in 1:nrow(GRN_links)){
1679668776618:peak <- as.character(GRN_links$peak.ID[i])
1679668776625:split_peak <- strsplit(peak, split = ":")
1679668776630:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679668776640:form.peak[i] <- new_peak
1679668776646:}
1679668776650:GRN_links$id <- seq(1:nrow(GRN_links))
1679668776655:GRN_links$peak.ID <- form.peak
1679668776661:names(GRN_links)[1:2] <- c("peak", "gene")
1679668776669:# Binary classification
1679668776675:# get rows that match in GRN links and HiC links by gene name and peak id
1679668776680:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679668776687:TP$res <- rep(resolutions[j], nrow(TP))
1679668776695:TP.all <- rbind(TP.all, TP)
1679668776700:# set 1 if they are in HiC data and 0 if not
1679668776705:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679668776710:# add column to GRN_links with that information
1679668776715:GRN_links$bc <- bc
1679668776719:# create an confusion matrix
1679668776725:conf.m <- table(bc)
1679668776734:# store GRN links data in a variable
1679668776739:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679668776748:# Compute ROC curve
1679668776754:par(pty = "s")
1679668776765:# print metrics
1679668776771:print("")
1679668776777:print(paste0("Resolution: ", res))
1679668776782:print(paste0("GRN links: ", nrow(GRN_links)))
1679668776788:print(paste0("TP: ", nrow(TP)))
1679668776794:FP <- nrow(GRN_links) - nrow(TP)
1679668776799:print(paste0("FP: ", FP))
1679668776805:print("")
1679668776815:TP.vec <- c(TP.vec, nrow(TP))
1679668776821:FP.vec <- c(FP.vec, FP)
1679668776830:if ((first == TRUE) & (sum(bc) > 0)){
1679668776836:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679668776843:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679668776849:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679668776856:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679668776865:first = FALSE
1679668776873:print(ci.auc(ROC))
1679668776883:}
1679668776891:if ((first == FALSE) & (sum(bc) > 0)){
1679668776897:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679668776903:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679668776909:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679668776915:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679668776922:print(ci.auc(ROC))
1679668776928:}
1679668776938:}
1679668927208:# boolean for first plot
1679668927213:first = TRUE
1679668929411:# boolean for first plot
1679668929415:first = TRUE
1679668930666:# iterate over GRNs
1679668930683:j = 0
1679668930869:# boolean for first plot
1679668930875:first = TRUE
1679668931099:# vectors to store TPs and FPs
1679668931106:TP.vec <- c()
1679668931277:FP.vec <- c()
1679668931458:TP.all <- data.frame()
1679668931821:for (res in resolutions){
1679668931827:# set index
1679668931833:j <- j + 1
1679668931849:# set up GRN directory
1679668931854:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679668931859:# read GRN object
1679668931866:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679668931879:# get gene-peak connections from GRN
1679668931886:#GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679668931898:GRN_links <- GRN@connections$peak_genes$`0` %>% dplyr::filter(peak_gene.p_raw < 0.05) %>% as.data.frame() %>% dplyr::select(peak.ID, gene.ENSEMBL, peak_gene.r, peak_gene.p_raw)
1679668931917:# adapt peaks format to tc.links format
1679668931936:form.peak <- rep("", nrow(GRN_links))
1679668931948:for (i in 1:nrow(GRN_links)){
1679668931954:peak <- as.character(GRN_links$peak.ID[i])
1679668931960:split_peak <- strsplit(peak, split = ":")
1679668931967:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679668931974:form.peak[i] <- new_peak
1679668931979:}
1679668931985:GRN_links$id <- seq(1:nrow(GRN_links))
1679668931990:GRN_links$peak.ID <- form.peak
1679668931997:names(GRN_links)[1:2] <- c("peak", "gene")
1679668932013:# Binary classification
1679668932018:# get rows that match in GRN links and HiC links by gene name and peak id
1679668932027:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679668932036:TP$res <- rep(resolutions[j], nrow(TP))
1679668932046:TP.all <- rbind(TP.all, TP)
1679668932053:# set 1 if they are in HiC data and 0 if not
1679668932060:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679668932066:# add column to GRN_links with that information
1679668932073:GRN_links$bc <- bc
1679668932078:# create an confusion matrix
1679668932085:conf.m <- table(bc)
1679668932098:# store GRN links data in a variable
1679668932104:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679668932118:# Compute ROC curve
1679668932122:par(pty = "s")
1679668932156:# print metrics
1679668932161:print("")
1679668932166:print(paste0("Resolution: ", res))
1679668932171:print(paste0("GRN links: ", nrow(GRN_links)))
1679668932176:print(paste0("TP: ", nrow(TP)))
1679668932180:FP <- nrow(GRN_links) - nrow(TP)
1679668932185:print(paste0("FP: ", FP))
1679668932190:print("")
1679668932202:TP.vec <- c(TP.vec, nrow(TP))
1679668932209:FP.vec <- c(FP.vec, FP)
1679668932219:if ((first == TRUE) & (sum(bc) > 0)){
1679668932224:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679668932229:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679668932234:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679668932239:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679668932245:first = FALSE
1679668932250:print(ci.auc(ROC))
1679668932256:}
1679668932265:if ((first == FALSE) & (sum(bc) > 0)){
1679668932322:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679668932335:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679668932340:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679668932348:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679668932354:print(ci.auc(ROC))
1679668932362:}
1679668932375:}
1679670980381:# load libraries
1679670980392:library(GRaNIE)
1679670989758:library(dplyr)
1679670989820:library(qs)
1679670989944:library(ggplot2)
1679670989998:library(ggpubr)
1679670990372:library(pROC)
1679670990444:library(EnsDb.Hsapiens.v79)
1679671000868:library(UpSetR)
1679671000937:library(data.table)
1679671001132:library(ggrepel)
1679671001216:#############################################
1679671001221:# ANALYSIS ON DIFFERENT CLUSTER RESOLUTIONS #
1679671001229:#############################################
1679671001239:# Set up path of the cluster resolutions eGRNs
1679671001245:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679671004665:# get pcHiC links
1679671004673:links.dir <- "/g/scb/zaugg/deuner/GRaNIE/validationdata/timecourse_pchic_links.csv"
1679671005722:tc.links <- read.csv(links.dir)
1679671006615:head(tc.links)
1679671384819:# convert gene symbols to ENSEMBL IDs
1679671384824:require('biomaRt')
1679671387560:mart <- useMart('ENSEMBL_MART_ENSEMBL')
1679671388405:mart <- useDataset('hsapiens_gene_ensembl', mart)
1679671391366:annotLookup <- getBM(
1679671391370:mart = mart,
1679671391375:attributes = c(
1679671391380:'hgnc_symbol',
1679671391384:'ensembl_gene_id',
1679671391388:'gene_biotype'),
1679671391392:uniqueRows = TRUE)
1679671421134:head(annotLookup)
1679671607749:head(tc.links)
1679671623387:annotLookup
1679671645483:colnames(annotLookup)[1] <- "gene"
1679671650625:tc.links %>% left_join(annotLookup, by = "gene")
1679671675675:head(annotLookup)
1679671684289:head(tc.links)
1679671688501:head(annotLookup)
1679671699255:nrow(annotLookup)
1679671726730:tc.links %>% inner_join(annotLookup, by = "gene")
1679671742820:tc.links %>% inner_join(annotLookup, by = "gene", multiple = "all")
1679671809539:head(tc.links)
1679671985946:tc.links <- tc.links %>% inner_join(annotLookup, by = "gene", multiple = "all")
1679671987635:# Set up path of the cluster resolutions eGRNs
1679671987658:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679671988786:# set vector with the resolutions
1679671988791:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679671989481:# set colors for ROC curves
1679671989486:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679671989491:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679671989496:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679671989501:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679671994278:# set vecor of auc positioning in y axis
1679671994283:aucy <- seq(10, 110, by = 5)
1679671994734:# iterate over GRNs
1679671994739:j = 0
1679671995422:# boolean for first plot
1679671995427:first = TRUE
1679671995969:# vectors to store TPs and FPs
1679671995974:TP.vec <- c()
1679671996704:FP.vec <- c()
1679671998589:TP.all <- data.frame()
1679672030096:for (res in resolutions){
1679672030102:# set index
1679672030108:j <- j + 1
1679672030117:# set up GRN directory
1679672030123:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679672030128:# read GRN object
1679672030133:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679672030141:# get gene-peak connections from GRN
1679672030147:#GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679672030151:GRN_links <- GRN@connections$peak_genes$`0` %>% dplyr::filter(peak_gene.p_raw < 0.05) %>% as.data.frame() %>% dplyr::select(peak.ID, gene.ENSEMBL, peak_gene.r, peak_gene.p_raw)
1679672030159:# adapt peaks format to tc.links format
1679672030163:form.peak <- rep("", nrow(GRN_links))
1679672030168:for (i in 1:nrow(GRN_links)){
1679672030173:peak <- as.character(GRN_links$peak.ID[i])
1679672030180:split_peak <- strsplit(peak, split = ":")
1679672030184:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679672030190:form.peak[i] <- new_peak
1679672030195:}
1679672030199:GRN_links$id <- seq(1:nrow(GRN_links))
1679672030204:GRN_links$peak.ID <- form.peak
1679672030209:names(GRN_links)[1:2] <- c("peak", "gene")
1679672030217:# Binary classification
1679672030222:# get rows that match in GRN links and HiC links by gene name and peak id
1679672030227:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679672030231:TP$res <- rep(resolutions[j], nrow(TP))
1679672030236:TP.all <- rbind(TP.all, TP)
1679672030241:# set 1 if they are in HiC data and 0 if not
1679672030247:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679672030252:# add column to GRN_links with that information
1679672030257:GRN_links$bc <- bc
1679672030262:# create an confusion matrix
1679672030267:conf.m <- table(bc)
1679672030275:# store GRN links data in a variable
1679672030279:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679672030288:# Compute ROC curve
1679672030293:par(pty = "s")
1679672030302:# print metrics
1679672030307:print("")
1679672030312:print(paste0("Resolution: ", res))
1679672030316:print(paste0("GRN links: ", nrow(GRN_links)))
1679672030321:print(paste0("TP: ", nrow(TP)))
1679672030325:FP <- nrow(GRN_links) - nrow(TP)
1679672030331:print(paste0("FP: ", FP))
1679672030337:print("")
1679672030346:TP.vec <- c(TP.vec, nrow(TP))
1679672030351:FP.vec <- c(FP.vec, FP)
1679672030359:if ((first == TRUE) & (sum(bc) > 0)){
1679672030364:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679672030368:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679672030373:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679672030378:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679672030383:first = FALSE
1679672030388:print(ci.auc(ROC))
1679672030394:}
1679672030399:if ((first == FALSE) & (sum(bc) > 0)){
1679672030404:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679672030409:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679672030415:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679672030420:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679672030424:print(ci.auc(ROC))
1679672030429:}
1679672030439:}
1679672136732:tclinks
1679672139799:tc.links
1679672200021:colnames(tc.link)
1679672201560:colnames(tc.links)
1679672261496:# PEARSON
1679672261501:# load eGRN
1679672261506:GRN.p <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype_wnn/output_pseudobulk_celltype_wnn_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1679672269830:GRN.p@connections$peak_genes
1679672278999:colnames(tc.links)[14] <- "gene.ENSEMBL"
1679672281122:head(annotLookup)
1679672281250:head(tc.links)
1679672281455:# Set up path of the cluster resolutions eGRNs
1679672281460:path <- "/g/scb/zaugg/zaugg_shared/data/10xMultiome/Daria/timecourse/GRaNIE/"
1679672281688:# set vector with the resolutions
1679672281693:resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))
1679672281885:# set colors for ROC curves
1679672281889:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679672281894:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679672281899:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679672281903:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679672282072:# set vecor of auc positioning in y axis
1679672282077:aucy <- seq(10, 110, by = 5)
1679672282490:# iterate over GRNs
1679672282494:j = 0
1679672282725:# boolean for first plot
1679672282729:first = TRUE
1679672282897:# vectors to store TPs and FPs
1679672282902:TP.vec <- c()
1679672283249:FP.vec <- c()
1679672283445:TP.all <- data.frame()
1679672283769:for (res in resolutions){
1679672283777:# set index
1679672283787:j <- j + 1
1679672283801:# set up GRN directory
1679672283810:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679672283819:# read GRN object
1679672283828:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679672283844:# get gene-peak connections from GRN
1679672283853:#GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679672283863:GRN_links <- GRN@connections$peak_genes$`0` %>% dplyr::filter(peak_gene.p_raw < 0.05) %>% as.data.frame() %>% dplyr::select(peak.ID, gene.ENSEMBL, peak_gene.r, peak_gene.p_raw)
1679672283876:# adapt peaks format to tc.links format
1679672283884:form.peak <- rep("", nrow(GRN_links))
1679672283892:for (i in 1:nrow(GRN_links)){
1679672283899:peak <- as.character(GRN_links$peak.ID[i])
1679672283907:split_peak <- strsplit(peak, split = ":")
1679672283914:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679672283923:form.peak[i] <- new_peak
1679672283932:}
1679672283940:GRN_links$id <- seq(1:nrow(GRN_links))
1679672283947:GRN_links$peak.ID <- form.peak
1679672283954:names(GRN_links)[1:2] <- c("peak", "gene")
1679672283968:# Binary classification
1679672283976:# get rows that match in GRN links and HiC links by gene name and peak id
1679672283985:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene"), multiple = "all")
1679672283993:TP$res <- rep(resolutions[j], nrow(TP))
1679672284000:TP.all <- rbind(TP.all, TP)
1679672284008:# set 1 if they are in HiC data and 0 if not
1679672284016:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679672284024:# add column to GRN_links with that information
1679672284032:GRN_links$bc <- bc
1679672284040:# create an confusion matrix
1679672284048:conf.m <- table(bc)
1679672284062:# store GRN links data in a variable
1679672284070:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679672284083:# Compute ROC curve
1679672284092:par(pty = "s")
1679672284106:# print metrics
1679672284115:print("")
1679672284135:print(paste0("Resolution: ", res))
1679672284144:print(paste0("GRN links: ", nrow(GRN_links)))
1679672284153:print(paste0("TP: ", nrow(TP)))
1679672284162:FP <- nrow(GRN_links) - nrow(TP)
1679672284171:print(paste0("FP: ", FP))
1679672284180:print("")
1679672284196:TP.vec <- c(TP.vec, nrow(TP))
1679672284204:FP.vec <- c(FP.vec, FP)
1679672284220:if ((first == TRUE) & (sum(bc) > 0)){
1679672284229:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679672284237:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679672284246:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679672284254:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679672284262:first = FALSE
1679672284269:print(ci.auc(ROC))
1679672284278:}
1679672284286:if ((first == FALSE) & (sum(bc) > 0)){
1679672284295:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679672284303:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679672284312:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679672284319:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679672284327:print(ci.auc(ROC))
1679672284336:}
1679672284351:}
1679672458604:# set colors for ROC curves
1679672458608:colors <- c("darkred","deeppink4" , "deeppink", "pink","violet",
1679672458612:"purple", "darkmagenta",  "darkblue", "blue", "darkcyan",
1679672458617:"lightblue", "turquoise", "lightgreen", "green", "darkolivegreen1",
1679672458622:"yellow", "darkgoldenrod2",  "chocolate", "red")
1679672459028:# set vecor of auc positioning in y axis
1679672459034:aucy <- seq(10, 110, by = 5)
1679672459234:# iterate over GRNs
1679672459239:j = 0
1679672459418:# boolean for first plot
1679672459422:first = TRUE
1679672459685:# vectors to store TPs and FPs
1679672459689:TP.vec <- c()
1679672459945:FP.vec <- c()
1679672460228:TP.all <- data.frame()
1679672461041:for (res in resolutions){
1679672461046:# set index
1679672461051:j <- j + 1
1679672461058:# set up GRN directory
1679672461069:GRN_dir <- paste0(path, "output_pseudobulk_clusterRes", res, "_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/")
1679672461075:# read GRN object
1679672461079:GRN <- qread(paste0(GRN_dir, "GRN.qs"))
1679672461087:# get gene-peak connections from GRN
1679672461091:#GRN_links <- GRN@connections$all.filtered$`0` %>% as.data.frame() %>% dplyr::select(peak.ID, gene.name, peak_gene.r, peak_gene.p_raw)
1679672461095:GRN_links <- GRN@connections$peak_genes$`0` %>% dplyr::filter(peak_gene.p_raw < 0.05) %>% as.data.frame() %>% dplyr::select(peak.ID, gene.ENSEMBL, peak_gene.r, peak_gene.p_raw)
1679672461102:# adapt peaks format to tc.links format
1679672461107:form.peak <- rep("", nrow(GRN_links))
1679672461111:for (i in 1:nrow(GRN_links)){
1679672461115:peak <- as.character(GRN_links$peak.ID[i])
1679672461120:split_peak <- strsplit(peak, split = ":")
1679672461124:new_peak <- paste(split_peak[[1]][1], split_peak[[1]][2], sep = "-")
1679672461128:form.peak[i] <- new_peak
1679672461132:}
1679672461137:GRN_links$id <- seq(1:nrow(GRN_links))
1679672461141:GRN_links$peak.ID <- form.peak
1679672461145:names(GRN_links)[1:2] <- c("peak", "gene.ENSEMBL")
1679672461152:# Binary classification
1679672461157:# get rows that match in GRN links and HiC links by gene name and peak id
1679672461161:TP <- inner_join(GRN_links, tc.links, by = c("peak", "gene.ENSEMBL"), multiple = "all")
1679672461165:TP$res <- rep(resolutions[j], nrow(TP))
1679672461169:TP.all <- rbind(TP.all, TP)
1679672461174:# set 1 if they are in HiC data and 0 if not
1679672461178:bc <- ifelse(GRN_links$id %in% TP$id, yes = 1, no = 0)
1679672461182:# add column to GRN_links with that information
1679672461187:GRN_links$bc <- bc
1679672461191:# create an confusion matrix
1679672461195:conf.m <- table(bc)
1679672461202:# store GRN links data in a variable
1679672461207:assign(paste("GRN_links", res, sep = "."), GRN_links)
1679672461214:# Compute ROC curve
1679672461218:par(pty = "s")
1679672461232:# print metrics
1679672461237:print("")
1679672461241:print(paste0("Resolution: ", res))
1679672461246:print(paste0("GRN links: ", nrow(GRN_links)))
1679672461250:print(paste0("TP: ", nrow(TP)))
1679672461254:FP <- nrow(GRN_links) - nrow(TP)
1679672461259:print(paste0("FP: ", FP))
1679672461264:print("")
1679672461271:TP.vec <- c(TP.vec, nrow(TP))
1679672461276:FP.vec <- c(FP.vec, FP)
1679672461283:if ((first == TRUE) & (sum(bc) > 0)){
1679672461287:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679672461291:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679672461295:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = FALSE, print.auc.x = 115, print.auc.y = aucy[j])
1679672461300:legend("bottomright",  legend = resolutions, col = colors, ncol = 2)
1679672461304:first = FALSE
1679672461308:print(ci.auc(ROC))
1679672461313:}
1679672461317:if ((first == FALSE) & (sum(bc) > 0)){
1679672461321:ROC <- roc(GRN_links$bc, GRN_links$peak_gene.r, plot = TRUE, legacy.axes = TRUE, percent = TRUE,
1679672461325:xlab="False Positive Percentage | 1 - Specificity", ylab="True Positive Percentage | Sensitivity",
1679672461330:col = colors[j], lwd=2, print.auc = TRUE, main = "ROC", add = TRUE, print.auc.x = 115, print.auc.y = aucy[j])
1679672461334:legend("bottomright", legend = resolutions, col = colors, lwd = 4, ncol = 2)
1679672461338:print(ci.auc(ROC))
1679672461343:}
1679672461350:}
1679673039512:# barplots of TP vs FP
1679673039516:TPFP.df <- data.frame(TPFP = c(TP.vec, FP.vec), cat = c(rep("TP", 19), rep("FP", 19)), res = c(resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2)), resolutions <- c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))))
1679673040511:ggplot(TPFP.df, aes(x = as.factor(res), y = TPFP, fill = cat)) +
1679673040516:geom_bar(position = "dodge", stat = "identity") +
1679673040520:theme_classic() +
1679673040524:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679673049403:# compute ratio of TPs vs FPs
1679673049668:TPFP.vec <- TP.vec/FP.vec
1679673051358:ratio.df <- data.frame(res = resolutions, ratio = TPFP.vec)
1679673053396:ggplot(ratio.df, aes(x = as.factor(res), y = ratio)) +
1679673053646:geom_bar(stat = "identity", fill = "#993300", color = "black") +
1679673053943:theme_classic() +
1679673054262:labs(x = "Resolutions", y = "TP / FP", title = "TP and FP ratio per resolution") +
1679673054541:theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
1679673064921:# Check if the TPs are shared
1679673065237:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene", "res"))
1679673094203:# Check if the TPs are shared
1679673094494:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene.ENSEMBL", "res"))
1679673095022:# count occurrence of each link
1679673095286:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene.ENSEMBL", "res")) %>% group_by(peak, gene) %>% count
1679673096904:# create a column for the pasted peak-gene info
1679673097139:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679673110723:# Check if the TPs are shared
1679673110967:TP.peak.gene <- TP.all %>% dplyr::select(c("peak", "gene.ENSEMBL", "res"))
1679673112044:# count occurrence of each link
1679673112355:TP.peak.gene.counts <- TP.peak.gene %>% dplyr::select(c("peak", "gene.ENSEMBL", "res")) %>% group_by(peak, gene.ENSEMBL) %>% count
1679673115832:# create a column for the pasted peak-gene info
1679673115988:TP.peak.gene$link <- paste(TP.peak.gene$peak, TP.peak.gene$gene, sep = "_")
1679673116762:# join counts info to the dataframe
1679673116778:TP.peak.gene <- inner_join(TP.peak.gene, TP.peak.gene.counts, by = c("peak", "gene.ENSEMBL"))
1679673118420:# check whether the link is shared or not
1679673118445:TP.peak.gene$shared <- ifelse(TP.peak.gene$n > 1, TRUE, FALSE)
1679673120689:# plot count of shared links vs non-shared links
1679673120704:p1 <- ggplot(TP.peak.gene %>% distinct(peak, gene, .keep_all = TRUE), aes(shared, fill = shared)) +
1679673120725:geom_bar(stat = "count") +
1679673120747:theme_classic() +
1679673120765:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679673120783:labs(title = "Are the links shared? (unique links)") +
1679673120802:geom_text(stat='count', aes(label=..count..), vjust=-1) +
1679673120819:theme(legend.position = "none")
1679673137243:# plot count of shared links vs non-shared links
1679673137248:p1 <- ggplot(TP.peak.gene %>% distinct(peak, gene.ENSEMBL, .keep_all = TRUE), aes(shared, fill = shared)) +
1679673137253:geom_bar(stat = "count") +
1679673137258:theme_classic() +
1679673137263:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679673137268:labs(title = "Are the links shared? (unique links)") +
1679673137274:geom_text(stat='count', aes(label=..count..), vjust=-1) +
1679673137278:theme(legend.position = "none")
1679673138318:p2 <- ggplot(TP.peak.gene, aes(shared, fill = shared)) +
1679673138325:geom_bar(stat = "count") +
1679673138330:theme_classic() +
1679673138338:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679673138348:labs(title = "Are the links shared? (all links)") +
1679673138357:geom_text(stat='count', aes(label=..count..), vjust=-1)
1679673139470:p1 + p2
1679673166451:# plot duplicated vs unique links per cluster resolution
1679673166456:ggplot(TP.peak.gene, aes(as.factor(res), fill = shared)) +
1679673166461:geom_bar(stat = "count", position = "dodge") +
1679673166479:theme_classic() +
1679673166488:scale_fill_manual(values = c("#E3B448", "#3A6B35")) +
1679673166493:labs(title = "Are the links shared?", x = "Cluster Resolutions")
1679673178461:# plot most frequent links across resolutions
1679673178466:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene, sep = "_")
1679673188305:# plot most frequent links across resolutions
1679673188310:TP.peak.gene.counts$link <- paste(TP.peak.gene.counts$peak, TP.peak.gene.counts$gene.ENSEMBL, sep = "_")
1679673189387:TP.peak.gene.counts$shared <- ifelse(TP.peak.gene.counts$n > 1, TRUE, FALSE)
1679673197303:ggplot(TP.peak.gene.counts %>% arrange(desc(n)) %>% head(10), aes(x = link, y = n, fill = link)) +
1679673197308:geom_bar(stat = "identity") +
1679673197312:theme_bw() +
1679673197317:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") +
1679673197322:scale_fill_viridis_d() +
1679673197327:labs(y = "count", title = "Most frequent links across resolutions", caption = "Top 10 Most Frequent Links")
1679673206495:# plot only duplicated links and their corresponding cluster resolutions
1679673206500:library(RColorBrewer)
1679673207530:palette3_info <- brewer.pal.info[brewer.pal.info$category == "qual", ]  # Extract color info
1679673208385:palette3_all <- unlist(mapply(brewer.pal,                     # Create vector with all colors
1679673208390:palette3_info$maxcolors,
1679673208395:rownames(palette3_info)))
1679673208840:palette3_all
1679673209408:palette3 <- sample(palette3_all, 16)                    # Sample colors
1679673209834:palette3
1679673210285:ggplot(TP.peak.gene %>% dplyr::filter(shared == TRUE) , aes(x = link, fill = as.factor(res))) +
1679673210289:geom_bar(stat = "count") +
1679673210293:theme_bw() +
1679673210297:theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
1679673210302:labs(y = "count", title = "To which eGRNs do the shared links belong?", fill = "Resolutions", caption = "35 Different Links") +
1679673210308:scale_fill_manual(values = palette3)
1679673371077:for (deg.th in 1:14){
1679673371082:# get highly represented links across resolutions
1679673371086:high.rep.pg.links <-  all.links[rowSums(all.links[,1:ncol(all.links)]) > deg.th,]
1679673371094:# overview of dataframes
1679673371099:## links from different cluster resolutions
1679673371104:head(merged.all.links) # all links merged
1679673371108:head(high.rep.pg.links)  # links - binary table indicating in which cluster resolution are inferred
1679673371113:## pcHiC links
1679673371118:head(TP.all) # links of timecourse dataset found in pcHi-C interactions , chr1, start1, and start2 are the peak coordinates
1679673371127:# create vector for each high degree link to indicate if this link is found in the pchic links or not
1679673371131:high.rep.links.pcHiC <- high.rep.pg.links
1679673371136:pcHiC <- rep(0, nrow(high.rep.links.pcHiC))
1679673371141:high.rep.links.pcHiC$pcHiC <- pcHiC
1679673371155:# format TP.all peak-gene links
1679673371161:pchic.links <- c()
1679673371169:for (i in 1:nrow(TP.all)){
1679673371176:split.link <- strsplit(TP.all[i, "peak"], split = "-")
1679673371180:pchic.link <- paste(split.link[[1]][1], split.link[[1]][2], sep = ":")
1679673371188:pchic.link <- paste(pchic.link, split.link[[1]][3], sep = "-")
1679673371193:pchic.link <- paste(pchic.link, TP.all[i, "gene"], sep = ";")
1679673371200:pchic.links <- c(pchic.links, pchic.link)
1679673371208:}
1679673371212:pchic.links
1679673371221:# find links that are in pchic data
1679673371225:links.in.pchic <- c()
1679673371229:for (i in 1:nrow(high.rep.pg.links)){
1679673371234:split.link <- strsplit(rownames(high.rep.pg.links)[i], split = "_")
1679673371239:rep.link <- paste(split.link[[1]][2], split.link[[1]][3], sep = ";")
1679673371244:if (rep.link %in% pchic.links) {
1679673371249:high.rep.links.pcHiC[i, "pcHiC"] = 1
1679673371254:links.in.pchic <- c(links.in.pchic, rep.link)
1679673371259:}
1679673371262:}
1679673371271:print(links.in.pchic)
1679673371290:p <- ggplot(high.rep.links.pcHiC, aes(pcHiC, fill = as.factor(pcHiC))) +
1679673371296:geom_bar(stat = "count") +
1679673371300:labs(caption = paste("Degree Threshold:", deg.th), title = "High degree links mapping with pcHi-C links", fill = "pcHi-C") +
1679673371305:theme_bw() +
1679673371309:annotate("text", x = 1, y = max(table(high.rep.links.pcHiC$pcHiC))/2, label = as.character(length(links.in.pchic)), size = 7) +
1679673371314:annotate("text", x = 0, y = max(table(high.rep.links.pcHiC$pcHiC))/2, label = as.character(nrow(high.rep.links.pcHiC)-length(links.in.pchic)), size = 7) +
1679673371319:scale_fill_manual(values = c("#E3B448", "#3A6B35"))
1679673371327:assign(paste0("p", deg.th), p)
1679673371331:}
1679914040473:# load libraries
1679914040479:library(GRaNIE)
1679914050357:library(dplyr)
1679914050419:library(qs)
1679914050599:library(ggplot2)
1679914050649:library(ggpubr)
1679914051030:library(pROC)
1679914051142:library(EnsDb.Hsapiens.v79)
1679914059988:library(UpSetR)
1679914060089:library(data.table)
1679914060370:library(ggrepel)
1679992304436:# load libraries
1679992304442:library(dplyr)
1679992304651:library(qs)
1679992304886:library(Seurat)
1679992316766:library(ggplot2)
1679996478464:library(dplyr)
1679996478473:library(Seurat)
1679996478478:library(qs)
1679996478483:library(GenomicRanges)
1679996478489:library(tidyr)
1679996481623:# define dataset
1679996481657:dataset <- "timecourse"
1679996483083:celltype <- "neuron"
1680000470538:# load links files
1680000470548:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2")
1680000484975:celltype <- "NPC"
1680000495699:# merge them
1680000495704:View(pp.links)
1680000513503:# load links files
1680000513508:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\s")
1680000523745:# load links files
1680000523749:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\d")
1680000529091:# load links files
1680000529095:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= " ")
1680000536473:# merge them
1680000536477:View(pp.links)
1680000546918:# load links files
1680000546923:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680000554893:# merge them
1680000554897:View(pp.links)
1680000565788:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680000664858:# merge them
1680000664862:links <- rbind(pp.links, po.links)
1680000673945:links
1680000691314:View(po.links)
1680001569985:# define dataset
1680001569991:dataset <- "timecourse"
1680001572558:celltype <- "NPC"
1680001575466:# pull the promoter coordinates for the genes in the dataset (either timecourse or combined)
1680001575470:## take the TSS and extend 2kb upstream if strand +, downstream if strand -
1680001575475:# load the respective dataset seurat object to get the gene names present in the dataset
1680001575481:s.obj <- qread(paste0("/g/scb/zaugg/deuner/GRaNIE/tmp/", dataset, ".pp.seuratObject.qs"))
1680001589548:DefaultAssay(s.obj) <- "RNA"
1680001592927:ds.gene.names <- rownames(s.obj)
1680001595796:# get gene strand and position details from gtf file
1680001595802:gtf.file = "/g/scb/zaugg/marttine/RNA_ATAC_integration/annotation/gencode.v41.chr_patch_hapl_scaff.annotation.gtf.gz"
1680001596934:gtf <- rtracklayer::import(gtf.file)
1680001661784:gtf = as.data.frame(gtf)
1680001663259:# subset genes from tgf file that are present in the dataset in bed format
1680001663265:ds.genes.ann <- gtf %>% dplyr::filter((gene_name %in% gene.names) & (type == "gene")) %>% dplyr::select(seqnames, start, end, strand, gene_name, gene_id)
1680001680211:# subset genes from tgf file that are present in the dataset in bed format
1680001680218:ds.genes.ann <- gtf %>% dplyr::filter((gene_name %in% ds.gene.names) & (type == "gene")) %>% dplyr::select(seqnames, start, end, strand, gene_name, gene_id)
1680001682222:colnames(ds.genes.ann)[1] <- "chr"
1680001683860:ds.genes.ann
1680001689552:# get the promoter regions from each gene
1680001689559:prom.cords <- ds.genes.ann
1680001690290:prom.cords$start <- ifelse(prom.cords$strand == "+", genes.ann$start-2000, genes.ann$end)
1680001736990:prom.cords$start <- ifelse(prom.cords$strand == "+", ds.genes.ann$start-2000, ds.genes.ann$end)
1680001737637:prom.cords$end <- ifelse(prom.cords$strand == "+", ds.genes.ann$start, ds.genes.ann$end+2000)
1680001738514:prom.cords
1680001783407:prom.cords
1680001789466:head(prom.cords)
1680001824228:# format links in bed file format
1680001824232:head(links)
1680002795927:head(prom.cords)
1680002814710:head(links)
1680002879193:# format links in bed file format
1680002879197:# treat frag1 as baits (promoter regions)
1680002879202:baits <- links %>% separate(frag1, c("chr", "start", "end"), "[.]") %>% select(c("chr", "start", "end"))
1680003178638:# format links in bed file format
1680003178642:# treat frag1 as baits (promoter regions)
1680003178647:baits <- links %>% separate(frag1, c("chr", "start", "end"), "[.]")
1680003686488:head(baits)
1680003710360:baits <- dplyr::select(c("chr", "start", "end"))
1680003733982:baits <- baits %>% dplyr::select(c("chr", "start", "end"))
1680003735892:head(baits)
1680003746029:# keep promoter regions from links that intersect with promoter coordinates
1680003746033:# use findOverlaps method from GenomicRanges
1680003746037:qry <-  makeGRangesFromDataFrame(prom.cords, keep.extra.columns = TRUE)
1680003747502:ref <-  makeGRangesFromDataFrame(baits)
1680003791575:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1680003793624:ovlp
1680003820176:ovlp.indx <- ovlp@to
1680003822069:# subset baits overlapping timecourse gene promoters
1680003822073:ds.baits <-  baits[ovlp.indx,]
1680003825582:head(ds.baits)
1680003855645:ovlp.indx <- unique(ovlp@to)
1680003858407:# subset baits overlapping timecourse gene promoters
1680003858411:ds.baits <-  baits[ovlp.indx,]
1680003859527:head(ds.baits)
1680003865916:ovlp.indx
1680003886417:# subset baits overlapping timecourse gene promoters
1680003886422:ds.baits <-  baits[ovlp.indx,]
1680003887523:head(ds.baits)
1680003897934:# keep promoter regions from links that intersect with promoter coordinates
1680003897939:# use findOverlaps method from GenomicRanges
1680003897943:qry <-  makeGRangesFromDataFrame(prom.cords, keep.extra.columns = TRUE)
1680003898672:ref <-  makeGRangesFromDataFrame(baits)
1680003915071:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1680003945501:ovlp
1680003965749:ovlp.indx <- ovlp@to
1680003967425:ovlp.indx
1680003999551:ovlp
1680004014571:qry
1680004021380:ovlp
1680004054240:prom.cords[7,]
1680004055114:baits[1,]
1680004099739:ovlp.indx <- unique(ovlp@to)
1680004100981:ovlp.indx
1680004106307:# subset baits overlapping timecourse gene promoters
1680004106311:ds.baits <-  baits[ovlp.indx,]
1680004107711:head(ds.baits)
1680004124836:head(baits)
1680004147524:ovlp.indx
1680004170042:# keep the gene names to which the baits map to
1680004170047:ds.baits <- ds.baits %>% cbind(gene = prom.cords$gene_name[ovlp@from])
1680004185371:ovlp.indx <- ovlp@to
1680004186435:# subset baits overlapping timecourse gene promoters
1680004186440:ds.baits <-  baits[ovlp.indx,]
1680004188608:head(ds.baits)
1680004190019:# keep the gene names to which the baits map to
1680004190023:ds.baits <- ds.baits %>% cbind(gene = prom.cords$gene_name[ovlp@from])
1680004191205:ds.baits
1680004245669:head(links)
1680004263108:head(ds.baits)
1680004284006:# subset baits overlapping timecourse gene promoters
1680004284011:ds.baits <-  baits[ovlp.indx,]
1680004296217:head(ds.baits)
1680004303969:# keep the gene names to which the baits map to
1680004303974:ds.baits <- ds.baits %>% cbind(gene = prom.cords$gene_name[ovlp@from])
1680004323336:ds.baits
1680004344545:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680004344549:# get links from baits found in timecourse data
1680004344553:ds.baits_ehcs <- ds.baits %>% right_join(links, by = c("chr", "start", "end"), multiple = "all")
1680004394015:# format links in bed file format
1680004394019:# treat frag1 as baits (promoter regions)
1680004394023:links <- links %>% separate(frag1, c("chr", "start", "end"), "[.]")
1680004656663:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680004656667:# get links from baits found in timecourse data
1680004656672:ds.baits_ehcs <- ds.baits %>% right_join(links, by = c("chr", "start", "end"), multiple = "all")
1680005007821:gc()
1680005204642:# load libraries
1680005204646:library(dplyr)
1680005204651:library(Seurat)
1680005204656:library(qs)
1680005204662:library(GenomicRanges)
1680005204668:library(tidyr)
1680005204677:# define dataset
1680005204684:dataset <- "timecourse"
1680005208338:celltype <- "NPC"
1680005209057:# load links files
1680005209063:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680005212836:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680005584890:# merge them
1680005584895:links <- rbind(pp.links, po.links)
1680005590688:# pull the promoter coordinates for the genes in the dataset (either timecourse or combined)
1680005590693:## take the TSS and extend 2kb upstream if strand +, downstream if strand -
1680005590698:# load the respective dataset seurat object to get the gene names present in the dataset
1680005590703:s.obj <- qread(paste0("/g/scb/zaugg/deuner/GRaNIE/tmp/", dataset, ".pp.seuratObject.qs"))
1680005595501:DefaultAssay(s.obj) <- "RNA"
1680005596388:ds.gene.names <- rownames(s.obj)
1680005597681:# get gene strand and position details from gtf file
1680005597685:gtf.file = "/g/scb/zaugg/marttine/RNA_ATAC_integration/annotation/gencode.v41.chr_patch_hapl_scaff.annotation.gtf.gz"
1680005598108:gtf <- rtracklayer::import(gtf.file)
1680005775508:gtf = as.data.frame(gtf)
1680005778090:# subset genes from tgf file that are present in the dataset in bed format
1680005778095:ds.genes.ann <- gtf %>%
1680005778101:dplyr::filter((gene_name %in% ds.gene.names) & (type == "gene")) %>%
1680005778106:dplyr::select(seqnames, start, end, strand, gene_name, gene_id)
1680005780826:colnames(ds.genes.ann)[1] <- "chr"
1680005781504:# get the promoter regions from each gene
1680005781508:prom.cords <- ds.genes.ann
1680005782013:prom.cords$start <- ifelse(prom.cords$strand == "+", ds.genes.ann$start-2000, ds.genes.ann$end)
1680005782900:prom.cords$end <- ifelse(prom.cords$strand == "+", ds.genes.ann$start, ds.genes.ann$end+2000)
1680005783417:head(prom.cords)
1680005786613:# format links in bed file format
1680005786617:# treat frag1 as baits (promoter regions)
1680005786621:baits <- links %>% separate(frag1, c("chr", "start", "end"), "[.]")
1680006088097:gc()
1680006103607:baits <- baits %>% dplyr::select(c("chr", "start", "end"))
1680006108283:# keep promoter regions from links that intersect with promoter coordinates
1680006108287:# use findOverlaps method from GenomicRanges
1680006108291:qry <-  makeGRangesFromDataFrame(prom.cords, keep.extra.columns = TRUE)
1680006109040:ref <-  makeGRangesFromDataFrame(baits)
1680006123349:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1680006126077:ovlp
1680006126606:ovlp.indx <- ovlp@to
1680006129179:# subset baits overlapping timecourse gene promoters
1680006129185:ds.baits <-  baits[ovlp.indx,]
1680006133911:head(ds.baits)
1680006140873:# keep the gene names to which the baits map to
1680006140878:ds.baits <- ds.baits %>% cbind(gene = prom.cords$gene_name[ovlp@from])
1680006142150:ds.baits
1680006149743:# format baits in dataset so they match the links format
1680006149748:ds.baits <- ds.baits %>% unite(frag1 = c("chr", "start", "end"), sep = ".")
1680006165811:head(ds.baits)
1680006176546:# format baits in dataset so they match the links format
1680006176551:ds.baits <- ds.baits %>% unite(frag1 = c(1:3), sep = ".")
1680006191345:# format baits in dataset so they match the links format
1680006191349:ds.baits <- ds.baits %>% unite(c(1:3), sep = ".")
1680006208227:# format baits in dataset so they match the links format
1680006208231:ds.baits <- ds.baits %>% unite(c(1:3), sep = "[.]")
1680006218765:head(links)
1680006457745:# format baits in dataset so they match the links format
1680006457749:ds.baits <- ds.baits %>% unite(c(1:3), sep = ".")
1680006567720:# format baits in dataset so they match the links format
1680006567724:ds.baits <- ds.baits %>% unite(c(1:3), sep = "\\.")
1680006575024:rlang::last_error()
1680006581756:rlang::last_trace()
1680006641748:# format baits in dataset so they match the links format
1680006641752:ds.baits <- ds.baits %>% unite("frag1", 1:3, sep = ".")
1680006647837:head(ds.baits)
1680006665957:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680006665961:# get links from baits found in timecourse data
1680006665965:ds.baits_ehcs <- ds.baits %>% right_join(links, by = c("chr", "start", "end"), multiple = "all")
1680006677266:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680006677271:# get links from baits found in timecourse data
1680006677275:ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1", multiple = "all")
1680006711088:gc()
1680006738629:rm(baits)
1680006746144:gc()
1680006752780:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680006752785:# get links from baits found in timecourse data
1680006752789:ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1", multiple = "all")
1680006802954:gc()
1680006852093:rm(gtf)
1680006855844:gc()
1680006862077:# format baits in dataset so they match the links format
1680006862083:ds.baits <- ds.baits %>% unite("frag1", 1:3, sep = ".")
1680006868279:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680006868283:# get links from baits found in timecourse data
1680006868288:ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1", multiple = "all")
1680007163218:gc()
1680007180891:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680007180896:# get links from baits found in timecourse data
1680007180904:ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1", multiple = "all")
1680007398672:rn(pp.links)
1680007402372:rm(pp.links)
1680007406392:rm(po.links)
1680007417821:rm(s.obj)
1680007421021:gc()
1680007426050:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680007426055:# get links from baits found in timecourse data
1680007426059:ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1", multiple = "all")
1680007544713:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680007544717:# get links from baits found in timecourse data
1680007544721:ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1", multiple = "all")
1680007608326:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680007608331:# get links from baits found in timecourse data
1680007608338:ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1")
1680007669261:rm(qry)
1680007671174:rm(ref)
1680007685753:rm(ds.genes.ann)
1680007692820:rm(ovlp)
1680007701369:rm(prom.cords)
1680007705232:gc()
1680007712819:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680007712823:# get links from baits found in timecourse data
1680007712827:ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1", multiple = "all")
1680008626000:gc()
1680009165378:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680009165383:# get links from baits found in timecourse data
1680009165389:#ds.baits_ehcs <- ds.baits %>% right_join(links, by = "frag1", multiple = "all")
1680009165394:ds.baits_ehcs <- subset(links, frag1 %in% ds.baits$frag1)
1680009170794:ds.baits_ehcs
1680009217545:# filter for these enhancers that are present in my peakset
1680009217549:## (expand peak +/- 1kb and check for any overlap with pchic enhancers)
1680009217554:ehcs <- data.frame(chr = ds.baits_ehcs$chr.1, start = ds.baits_ehcs$start.1, end = ds.baits_ehcs$end.1)
1680009219410:ehcs
1680009224691:# get peaks present in timecourse data
1680009224695:DefaultAssay(s.obj) <- "ATAC"
1680009232058:# pull the promoter coordinates for the genes in the dataset (either timecourse or combined)
1680009232064:## take the TSS and extend 2kb upstream if strand +, downstream if strand -
1680009232069:# load the respective dataset seurat object to get the gene names present in the dataset
1680009232073:s.obj <- qread(paste0("/g/scb/zaugg/deuner/GRaNIE/tmp/", dataset, ".pp.seuratObject.qs"))
1680009239946:# filter for these enhancers that are present in my peakset
1680009239951:## (expand peak +/- 1kb and check for any overlap with pchic enhancers)
1680009239956:ehcs <- data.frame(chr = ds.baits_ehcs$chr.1, start = ds.baits_ehcs$start.1, end = ds.baits_ehcs$end.1)
1680009241029:# get peaks present in timecourse data
1680009241034:DefaultAssay(s.obj) <- "ATAC"
1680009242087:peaks.vect <- rownames(s.obj)
1680009245037:peaks <- data.frame(do.call(rbind, strsplit(peaks.vect, split = "-")))
1680009246291:colnames(peaks) <- c("chr", "start", "end")
1680009248506:# expand peaks +-1Kb
1680009248510:peaks.ext <- peaks
1680009249407:peaks.ext$start <- as.numeric(peaks$start) - 1000
1680009250094:peaks.ext$end <- as.numeric(peaks$end) + 1000
1680009250506:peaks.ext$peak <- peaks.vect
1680009277339:ds.baits_ehcs
1680009324421:ds.baits_ehcs <- separate(frag1, c("chr", "start", "end"), "[.]")
1680009329757:ds.baits_ehcs
1680009340665:ds.baits_ehcs <- separate("frag1", c("chr", "start", "end"), "[.]")
1680009353409:ds.baits_ehcs <- ds.baits_ehcs %>% separate(frag1, c("chr", "start", "end"), "[.]")
1680009451698:ds.baits_ehcs
1680009462853:# filter for these enhancers that are present in my peakset
1680009462858:## (expand peak +/- 1kb and check for any overlap with pchic enhancers)
1680009462862:ehcs <- data.frame(chr = ds.baits_ehcs$chr.1, start = ds.baits_ehcs$start.1, end = ds.baits_ehcs$end.1)
1680009469686:# filter for these enhancers that are present in my peakset
1680009469691:## (expand peak +/- 1kb and check for any overlap with pchic enhancers)
1680009469696:ehcs <- data.frame(chr = ds.baits_ehcs$chr, start = ds.baits_ehcs$start, end = ds.baits_ehcs$end)
1680009470944:# get peaks present in timecourse data
1680009470949:DefaultAssay(s.obj) <- "ATAC"
1680009471322:peaks.vect <- rownames(s.obj)
1680009480618:peaks <- data.frame(do.call(rbind, strsplit(peaks.vect, split = "-")))
1680009483244:colnames(peaks) <- c("chr", "start", "end")
1680009484710:# expand peaks +-1Kb
1680009484714:peaks.ext <- peaks
1680009485621:peaks.ext$start <- as.numeric(peaks$start) - 1000
1680009486105:peaks.ext$end <- as.numeric(peaks$end) + 1000
1680009487027:peaks.ext$peak <- peaks.vect
1680009488369:peaks.ext
1680009601317:# find overlap between the dataset and HiC enhancers
1680009601322:qry.peaks <-  makeGRangesFromDataFrame(ehcs)
1680009606832:qry.peaks
1680009614163:ref.peaks <-  makeGRangesFromDataFrame(peaks.ext, keep.extra.columns = TRUE)
1680009615685:ref.peaks
1680009619936:ovlp.peaks <- findOverlaps(qry.peaks, ref.peaks) # returns indexes of intersecting regions
1680009624762:ovlp.peaks.indx <- ovlp.peaks@from
1680009625919:peak.names <- peaks.vect[ovlp.peaks@to]
1680009627850:ds.baits_ds.ehcs <- ds.baits_ehcs[ovlp.peaks.indx,]
1680009645512:ds.baits_ds.ehcs <- ds.baits_tc.ehcs %>% cbind(peak = peak.names)
1680009651866:ds.baits_ds.ehcs <- ds.baits_ds.ehcs %>% cbind(peak = peak.names)
1680009654764:View(ds.baits_ds.ehcs)
1680009764466:ovlp.peaks
1680009822746:ds.baits
1680009884396:head(ds.baits_ds.ehcs)
1680009890175:head(ds.baits_ehcs)
1680009893646:head(ds.baits)
1680009997035:ds.baits_ehcs <- ds.baits_ehcs %>% cbind(gene = ds.baits$gene)
1680010146121:head(ds.baits)
1680010165096:ds.baits
1680010199320:baits
1680010302968:gc()
1680010379471:# load libraries
1680010379476:library(dplyr)
1680010379515:library(Seurat)
1680010389019:library(qs)
1680010389045:library(GenomicRanges)
1680010390405:library(tidyr)
1680010390448:# define dataset
1680010390454:dataset <- "timecourse"
1680010400125:celltype <- "NPC"
1680010400841:# load links files
1680010400846:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680010406171:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680010477350:# merge them
1680010477355:links <- rbind(pp.links, po.links)
1680010490437:# pull the promoter coordinates for the genes in the dataset (either timecourse or combined)
1680010490442:## take the TSS and extend 2kb upstream if strand +, downstream if strand -
1680010490447:# load the respective dataset seurat object to get the gene names present in the dataset
1680010490452:s.obj <- qread(paste0("/g/scb/zaugg/deuner/GRaNIE/tmp/", dataset, ".pp.seuratObject.qs"))
1680010512140:DefaultAssay(s.obj) <- "RNA"
1680010513329:ds.gene.names <- rownames(s.obj)
1680010514069:# get gene strand and position details from gtf file
1680010514075:gtf.file = "/g/scb/zaugg/marttine/RNA_ATAC_integration/annotation/gencode.v41.chr_patch_hapl_scaff.annotation.gtf.gz"
1680010514518:gtf <- rtracklayer::import(gtf.file)
1680010586561:gtf = as.data.frame(gtf)
1680010599581:# subset genes from tgf file that are present in the dataset in bed format
1680010599587:ds.genes.ann <- gtf %>%
1680010599593:dplyr::filter((gene_name %in% ds.gene.names) & (type == "gene")) %>%
1680010599598:dplyr::select(seqnames, start, end, strand, gene_name, gene_id)
1680010603377:colnames(ds.genes.ann)[1] <- "chr"
1680010604328:# get the promoter regions from each gene
1680010604334:prom.cords <- ds.genes.ann
1680010605021:prom.cords$start <- ifelse(prom.cords$strand == "+", ds.genes.ann$start-2000, ds.genes.ann$end)
1680010605737:prom.cords$end <- ifelse(prom.cords$strand == "+", ds.genes.ann$start, ds.genes.ann$end+2000)
1680010606202:head(prom.cords)
1680010606925:# format links in bed file format
1680010606930:# treat frag1 as baits (promoter regions)
1680010606935:baits <- links %>% separate(frag1, c("chr", "start", "end"), "[.]")
1680010840790:baits <- baits %>% dplyr::select(c("chr", "start", "end", "frag2"))
1680010843301:# keep promoter regions from links that intersect with promoter coordinates
1680010843305:# use findOverlaps method from GenomicRanges
1680010843310:qry <-  makeGRangesFromDataFrame(prom.cords, keep.extra.columns = TRUE)
1680010845501:ref <-  makeGRangesFromDataFrame(baits)
1680010866718:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1680010869138:ovlp
1680010872553:ovlp.indx <- ovlp@to
1680010873718:# subset baits overlapping timecourse gene promoters
1680010873722:ds.baits <-  baits[ovlp.indx,]
1680010875986:head(ds.baits)
1680010883489:# keep the gene names to which the baits map to
1680010883494:ds.baits <- ds.baits %>% cbind(gene = prom.cords$gene_name[ovlp@from])
1680010886578:head(ds.baits)
1680010948793:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680010948798:# get links from baits found in timecourse data
1680010948802:ds.baits_ehcs <- subset(links, frag1 %in% ds.baits$frag1)
1680010950737:ds.baits_ehcs
1680010961245:links
1680010975430:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680010975435:# get links from baits found in timecourse data
1680010975440:ds.baits_ehcs <- subset(links, frag1 %in% ds.baits$frag1)
1680010980478:ds.baits$frag1
1680010988795:head(ds.baits)
1680010991393:# format baits in dataset so they match the links format
1680010991398:ds.baits <- ds.baits %>% unite("frag1", 1:3, sep = ".")
1680010994675:head(ds.baits)
1680011023975:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680011023979:# get links from baits found in timecourse data
1680011023984:ds.baits_ehcs <- subset(links, frag1 %in% ds.baits$frag1)
1680011024985:ds.baits_ehcs
1680011034641:ds.baits_ehcs <- ds.baits_ehcs %>% cbind(gene = ds.baits$gene)
1680011092161:head(ds.baits)
1680011124399:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680011124403:# get links from baits found in timecourse data
1680011124408:ds.baits_ehcs <- ds.baits #frag2 represent the enhancers
1680011127843:ds.baits_ehcs <- ds.baits_ehcs %>% separate(frag2, c("chr", "start", "end"), "[.]")
1680011194563:ds.baits_ehcs
1680011205553:# filter for these enhancers that are present in my peakset
1680011205557:## (expand peak +/- 1kb and check for any overlap with pchic enhancers)
1680011205561:ehcs <- data.frame(chr = ds.baits_ehcs$chr, start = ds.baits_ehcs$start, end = ds.baits_ehcs$end)
1680011206712:ehcs
1680011209635:# get peaks present in timecourse data
1680011209640:DefaultAssay(s.obj) <- "ATAC"
1680011211735:peaks.vect <- rownames(s.obj)
1680011215599:peaks <- data.frame(do.call(rbind, strsplit(peaks.vect, split = "-")))
1680011217670:colnames(peaks) <- c("chr", "start", "end")
1680011220263:peaks
1680011223812:# expand peaks +-1Kb
1680011223816:peaks.ext <- peaks
1680011224444:peaks.ext$start <- as.numeric(peaks$start) - 1000
1680011225077:peaks.ext$end <- as.numeric(peaks$end) + 1000
1680011225574:peaks.ext$peak <- peaks.vect
1680011240633:# find overlap between the dataset and HiC enhancers
1680011240638:qry.peaks <-  makeGRangesFromDataFrame(ehcs)
1680011248797:ref.peaks <-  makeGRangesFromDataFrame(peaks.ext, keep.extra.columns = TRUE)
1680011249766:ovlp.peaks <- findOverlaps(qry.peaks, ref.peaks) # returns indexes of intersecting regions
1680011251451:ovlp.peaks.indx <- ovlp.peaks@from
1680011262852:ds.baits_ds.ehcs <- ds.baits_ehcs[ovlp.peaks.indx,]
1680011271108:peak.names <- peaks.vect[ovlp.peaks@to]
1680011272442:ds.baits_ds.ehcs <- ds.baits_ds.ehcs %>% cbind(peak = peak.names)
1680011275341:View(ds.baits_ds.ehcs)
1680011351444:# save links into a csv file
1680011351448:# IMPORTANT: 2 mandatory columns: peak and gene
1680011351453:write.csv(ds.baits_ds.ehcs, paste0("/g/scb/zaugg/deuner/GRaNIE/validationdata/", dataset, "_", celltype, "_pchic_links.csv"))
1680011368915:# define dataset
1680011368920:dataset <- "timecourse"
1680011369465:celltype <- "neuron"
1680011371273:# pull the promoter coordinates for the genes in the dataset (either timecourse or combined)
1680011371277:## take the TSS and extend 2kb upstream if strand +, downstream if strand -
1680011371282:# load the respective dataset seurat object to get the gene names present in the dataset
1680011371287:s.obj <- qread(paste0("/g/scb/zaugg/deuner/GRaNIE/tmp/", dataset, ".pp.seuratObject.qs"))
1680011382255:DefaultAssay(s.obj) <- "RNA"
1680011596805:gc()
1680011632089:# load libraries
1680011632093:library(dplyr)
1680011632287:library(Seurat)
1680011633020:library(qs)
1680011633141:library(GenomicRanges)
1680011633304:library(tidyr)
1680011633786:# define dataset
1680011633791:dataset <- "combined"
1680011634498:celltype <- "neuron"
1680011635918:# pull the promoter coordinates for the genes in the dataset (either timecourse or combined)
1680011635923:## take the TSS and extend 2kb upstream if strand +, downstream if strand -
1680011635927:# load the respective dataset seurat object to get the gene names present in the dataset
1680011635931:s.obj <- qread(paste0("/g/scb/zaugg/deuner/GRaNIE/tmp/", dataset, ".pp.seuratObject.qs"))
1680011653338:DefaultAssay(s.obj) <- "RNA"
1680011653463:ds.gene.names <- rownames(s.obj)
1680011667778:# get gene strand and position details from gtf file
1680011667783:gtf.file = "/g/scb/zaugg/marttine/RNA_ATAC_integration/annotation/gencode.v41.chr_patch_hapl_scaff.annotation.gtf.gz"
1680011668598:gtf <- rtracklayer::import(gtf.file)
1680011740107:gtf = as.data.frame(gtf)
1680011762408:# subset genes from tgf file that are present in the dataset in bed format
1680011762415:ds.genes.ann <- gtf %>% dplyr::filter((gene_name %in% ds.gene.names) & (type == "gene")) %>% dplyr::select(seqnames, start, end, strand, gene_name, gene_id)
1680011763708:colnames(ds.genes.ann)[1] <- "chr"
1680011764568:# get the promoter regions from each gene
1680011764573:prom.cords <- ds.genes.ann
1680011765308:prom.cords$start <- ifelse(prom.cords$strand == "+", ds.genes.ann$start-2000, ds.genes.ann$end)
1680011765942:prom.cords$end <- ifelse(prom.cords$strand == "+", ds.genes.ann$start, ds.genes.ann$end+2000)
1680011766483:prom.cords
1680011767138:# keep baits that intersect with promoter coordinates
1680011767145:baits.file <- "/g/scb/zaugg/marttine/RNA_ATAC_integration/CRISPR/GRN/baits.csv"
1680011767962:baits <- read.csv(baits.file, row.names = 1)
1680011770814:# use findOverlaps method from GenomicRanges
1680011770819:qry <-  makeGRangesFromDataFrame(prom.cords, keep.extra.columns = TRUE)
1680011771650:ref <-  makeGRangesFromDataFrame(baits)
1680011772584:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1680011773376:ovlp
1680011774702:ovlp.indx <- ovlp@to
1680011776250:# subset baits overlapping timecourse gene promoters
1680011776254:ds.baits <-  baits[ovlp.indx,]
1680011776813:head(ds.baits)
1680011780579:# keep the gene names to which the baits map to
1680011780584:ds.baits <- ds.baits %>% cbind(gene = prom.cords$gene_name[ovlp@from])
1680011786426:ds.baits
1680011789111:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680011789115:links.file <- "/g/scb/zaugg/marttine/RNA_ATAC_integration/CRISPR/GRN/pchic.i3Neuron.Song2019.hg38.csv"
1680011790888:links <- read.csv(links.file, sep = " ")
1680011798549:# get links from baits found in timecourse data
1680011798553:ds.baits_ehcs <- ds.baits %>% right_join(links, by = c("chr", "start", "end"), multiple = "all")
1680011799540:# filter for these enhancers that are present in my peakset
1680011799544:## (expand peak +/- 1kb and check for any overlap with pchic enhancers)
1680011799549:ehcs <- data.frame(chr = ds.baits_ehcs$chr.1, start = ds.baits_ehcs$start.1, end = ds.baits_ehcs$end.1)
1680011800692:# get peaks present in timecourse data
1680011800696:DefaultAssay(s.obj) <- "ATAC"
1680011801842:peaks.vect <- rownames(s.obj)
1680011802287:peaks <- data.frame(do.call(rbind, strsplit(peaks.vect, split = "-")))
1680011804243:colnames(peaks) <- c("chr", "start", "end")
1680011806027:# expand peaks +-1Kb
1680011806032:peaks.ext <- peaks
1680011806923:peaks.ext$start <- as.numeric(peaks$start) - 1000
1680011807449:peaks.ext$end <- as.numeric(peaks$end) + 1000
1680011808275:peaks.ext$peak <- peaks.vect
1680011808971:# find overlap between the dataset and HiC enhancers
1680011808975:qry.peaks <-  makeGRangesFromDataFrame(ehcs)
1680011810571:ref.peaks <-  makeGRangesFromDataFrame(peaks.ext, keep.extra.columns = TRUE)
1680011811380:ovlp.peaks <- findOverlaps(qry.peaks, ref.peaks) # returns indexes of intersecting regions
1680011812392:ovlp.peaks.indx <- ovlp.peaks@from
1680011813592:peak.names <- peaks.vect[ovlp.peaks@to]
1680011814521:ds.baits_ds.ehcs <- ds.baits_ehcs[ovlp.peaks.indx,]
1680011815280:ds.baits_ds.ehcs <- ds.baits_tc.ehcs %>% cbind(peak = peak.names)
1680011823279:ds.baits_ds.ehcs <- ds.baits_ds.ehcs %>% cbind(peak = peak.names)
1680011824868:View(ds.baits_ds.ehcs)
1680011835115:# save links into a csv file
1680011835120:write.csv(ds.baits_ds.ehcs, paste0("/g/scb/zaugg/deuner/GRaNIE/validationdata/", dataset, "_", celltype, "_pchic_links.csv"))
1680012010889:gc()
1680012017106:# load libraries
1680012017112:library(dplyr)
1680012017117:library(Seurat)
1680012017121:library(qs)
1680012017126:library(GenomicRanges)
1680012017131:library(tidyr)
1680012017139:# define dataset
1680012017144:dataset <- "combined"
1680012019852:celltype <- "NPC"
1680012022441:# load links files
1680012022446:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680012026108:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680012082264:# merge them
1680012082268:links <- rbind(pp.links, po.links)
1680012089608:# pull the promoter coordinates for the genes in the dataset (either timecourse or combined)
1680012089613:## take the TSS and extend 2kb upstream if strand +, downstream if strand -
1680012089617:# load the respective dataset seurat object to get the gene names present in the dataset
1680012089621:s.obj <- qread(paste0("/g/scb/zaugg/deuner/GRaNIE/tmp/", dataset, ".pp.seuratObject.qs"))
1680012118955:DefaultAssay(s.obj) <- "RNA"
1680012119848:ds.gene.names <- rownames(s.obj)
1680012122928:# get gene strand and position details from gtf file
1680012122932:gtf.file = "/g/scb/zaugg/marttine/RNA_ATAC_integration/annotation/gencode.v41.chr_patch_hapl_scaff.annotation.gtf.gz"
1680012123602:gtf <- rtracklayer::import(gtf.file)
1680012184808:gtf = as.data.frame(gtf)
1680012186295:# subset genes from tgf file that are present in the dataset in bed format
1680012186299:ds.genes.ann <- gtf %>%
1680012186305:dplyr::filter((gene_name %in% ds.gene.names) & (type == "gene")) %>%
1680012186309:dplyr::select(seqnames, start, end, strand, gene_name, gene_id)
1680012187683:colnames(ds.genes.ann)[1] <- "chr"
1680012188894:# get the promoter regions from each gene
1680012188898:prom.cords <- ds.genes.ann
1680012189749:prom.cords$start <- ifelse(prom.cords$strand == "+", ds.genes.ann$start-2000, ds.genes.ann$end)
1680012190182:prom.cords$end <- ifelse(prom.cords$strand == "+", ds.genes.ann$start, ds.genes.ann$end+2000)
1680012190871:head(prom.cords)
1680012193026:# format links in bed file format
1680012193030:# treat frag1 as baits (promoter regions)
1680012193034:baits <- links %>% separate(frag1, c("chr", "start", "end"), "[.]")
1680012430376:baits <- baits %>% dplyr::select(c("chr", "start", "end", "frag2"))
1680012439424:# keep promoter regions from links that intersect with promoter coordinates
1680012439434:# use findOverlaps method from GenomicRanges
1680012439441:qry <-  makeGRangesFromDataFrame(prom.cords, keep.extra.columns = TRUE)
1680012440115:ref <-  makeGRangesFromDataFrame(baits)
1680012453175:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1680012458434:ovlp
1680012461367:ovlp.indx <- ovlp@to
1680012462449:# subset baits overlapping timecourse gene promoters
1680012462454:ds.baits <-  baits[ovlp.indx,]
1680012465080:head(ds.baits)
1680012471074:# keep the gene names to which the baits map to
1680012471078:ds.baits <- ds.baits %>% cbind(gene = prom.cords$gene_name[ovlp@from])
1680012472945:head(ds.baits)
1680012477753:# format baits in dataset so they match the links format
1680012477758:ds.baits <- ds.baits %>% unite("frag1", 1:3, sep = ".")
1680012479946:head(ds.baits)
1680012481768:# look at all regions linked to these baits from links file, they essentially represent enhancers
1680012482053:# get links from baits found in timecourse data
1680012482323:ds.baits_ehcs <- ds.baits #frag2 represent the enhancers
1680012485009:ds.baits_ehcs <- ds.baits_ehcs %>% separate(frag2, c("chr", "start", "end"), "[.]")
1680012604311:# filter for these enhancers that are present in my peakset
1680012604316:## (expand peak +/- 1kb and check for any overlap with pchic enhancers)
1680012604321:ehcs <- data.frame(chr = ds.baits_ehcs$chr, start = ds.baits_ehcs$start, end = ds.baits_ehcs$end)
1680012606380:ehcs
1680012607643:# get peaks present in timecourse data
1680012607648:DefaultAssay(s.obj) <- "ATAC"
1680012608170:peaks.vect <- rownames(s.obj)
1680012608751:peaks <- data.frame(do.call(rbind, strsplit(peaks.vect, split = "-")))
1680012610462:colnames(peaks) <- c("chr", "start", "end")
1680012612003:# expand peaks +-1Kb
1680012612009:peaks.ext <- peaks
1680012613046:peaks.ext$start <- as.numeric(peaks$start) - 1000
1680012613970:peaks.ext$end <- as.numeric(peaks$end) + 1000
1680012614560:peaks.ext$peak <- peaks.vect
1680012615277:# find overlap between the dataset and HiC enhancers
1680012615282:qry.peaks <-  makeGRangesFromDataFrame(ehcs)
1680012619776:ref.peaks <-  makeGRangesFromDataFrame(peaks.ext, keep.extra.columns = TRUE)
1680012621915:ovlp.peaks <- findOverlaps(qry.peaks, ref.peaks) # returns indexes of intersecting regions
1680012623230:ovlp.peaks.indx <- ovlp.peaks@from
1680012623989:peak.names <- peaks.vect[ovlp.peaks@to]
1680012625299:ds.baits_ds.ehcs <- ds.baits_ehcs[ovlp.peaks.indx,]
1680012630815:ds.baits_ds.ehcs <- ds.baits_ds.ehcs %>% cbind(peak = peak.names)
1680012632336:View(ds.baits_ds.ehcs)
1680012671988:# save links into a csv file
1680012671996:# IMPORTANT: 2 mandatory columns: peak and gene
1680012672002:write.csv(ds.baits_ds.ehcs, paste0("/g/scb/zaugg/deuner/GRaNIE/validationdata/", dataset, "_", celltype, "_pchic_links.csv"))
1680013029083:# load libraries
1680013029087:library(dplyr)
1680013092719:gc()
1680013109290:# load libraries
1680013109294:library(dplyr)
1680013109299:library(tidyr)
1680013109304:library(Seurat)
1680013109308:library(qs)
1680013109313:library(GenomicRanges)
1680013109318:library(stringr)
1680013112471:# set path to ChiP-seq data
1680013112476:path <- "/g/scb2/zaugg/deuner/ChipSeqData/"
1680013730129:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680013730134:library(liftOver)
1680013791722:install.packages("liftOver")
1680013839984:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680013839989:library(rtracklayer)
1680013893749:chain <- import.chain("hg19ToHg38.over.chain")
1680013932545:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain.gz")
1680014007465:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680014055057:# define dataset
1680014055062:dataset <- "timecourse"
1680014056145:# load libraries
1680014056150:library(dplyr)
1680014056289:library(Seurat)
1680014056448:library(qs)
1680014056565:library(GenomicRanges)
1680014056698:library(tidyr)
1680014060848:celltype <- "NPC"
1680014061090:# load links files
1680014061095:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680014065004:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680014285087:# merge them
1680014285091:links <- rbind(pp.links, po.links)
1680014298504:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680014298508:library(rtracklayer)
1680014299353:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680014300093:links <- liftOver(links, chain)
1680014334772:links <- makeGRangesFromDataFrame(links, keep.extra.columns = TRUE)
1680014482235:links <- links %>% separate(frag1, c("chr.1", "start.1", "end.1"), "[.]") %>%
1680014482239:separate(frag2, c("chr.2", "start.2", "end.2"), "[.]")
1680014777543:library(stringr)
1680014889490:links1 <- links[c("chr.1", "start.1", "end.1")] <- str_split_fixed(links$frag1, ".", 3)
1680014906846:gc()
1680014918452:# load libraries
1680014918458:library(dplyr)
1680014918466:library(Seurat)
1680014918472:library(qs)
1680014918476:library(GenomicRanges)
1680014918481:library(tidyr)
1680014918486:library(stringr)
1680014918494:# define dataset
1680014918498:dataset <- "timecourse"
1680014921189:celltype <- "NPC"
1680014923650:# load links files
1680014923655:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680014927145:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680014987896:# merge them
1680014987901:links <- rbind(pp.links, po.links)
1680014990843:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680014990847:library(rtracklayer)
1680014991246:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680014992581:links1 <- links[c("chr.1", "start.1", "end.1")] <- str_split_fixed(links$frag1, ".", 3)
1680015007872:links2 <- links[c("chr.2", "start.2", "end.2")] <- str_split_fixed(links$frag2, ".", 3)
1680015043684:links2 <- links[c("chr.2", "start.2", "end.2")] <- str_split_fixed(links$frag2, ".", 3)
1680015062940:heaD(links1)
1680015065973:head(links1)
1680015085869:links1 <- links[c("chr.1", "start.1", "end.1")] <- str_split_fixed(links$frag1, "[.]", 3)
1680015117450:head(links1)
1680015179905:links1 <- str_split_fixed(links$frag1, "[.]", 3)
1680015192954:head(links1)
1680015230791:links1 <- links
1680015232320:links2 <- links
1680015283425:links1[c("chr.1", "start.1", "end.1")] <- str_split_fixed(links$frag1, "[.]", 3)
1680015297402:head(links1)
1680015313764:# merge them
1680015313769:links <- rbind(pp.links, po.links)
1680015325561:links1 <- links
1680015326569:links2 <- links
1680015327434:links1[c("chr.1", "start.1", "end.1")] <- str_split_fixed(links$frag1, "[.]", 3)
1680015341314:links2[c("chr.2", "start.2", "end.2")] <- str_split_fixed(links$frag2, "[.]", 3)
1680015358025:head(links1)
1680015372608:head(links2)
1680015376956:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE)
1680015410313:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = "start.1", end.field = "start.2")
1680015424928:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = start.1, end.field = start.2)
1680015439449:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = "start.1", end.field = "start.2")
1680015459462:links1 <- links
1680015459934:links2 <- links
1680015461474:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680015473987:links2[c("chr", "start", "end")] <- str_split_fixed(links$frag2, "[.]", 3)
1680015489030:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = "start.1", end.field = "start.2")
1680015495078:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE)
1680015513416:links2 <- makeGRangesFromDataFrame(links2, keep.extra.columns = TRUE)
1680015533227:head(links1)
1680015553035:links1 <- liftOver(links1, chain)
1680015575808:links2 <- liftOver(links2, chain)
1680015593186:head(links1)
1680015605204:links1
1680015656895:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680015656899:library(rtracklayer)
1680015659736:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680015665028:links1 <- liftOver(links1, chain)
1680015757108:links1 <- links
1680015757493:links2 <- links
1680015758140:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680015770079:links2[c("chr", "start", "end")] <- str_split_fixed(links$frag2, "[.]", 3)
1680015787099:links1 <- makeGRangesListFromDataFrame(links1, keep.extra.columns = TRUE)
1680015837836:links2 <- makeGRangesListFromDataFrame(links2, keep.extra.columns = TRUE)
1680015854573:head(links1)
1680015881283:links1 <- liftOver(links1, chain)
1680015900072:links2 <- liftOver(links2, chain)
1680015999451:as.data.frame(links1)
1680016211739:links1 <- liftOver(links1, chain) %>%
1680016211744:as.data.frame() %>%
1680016211750:rename(c(seqnames, start, end) = c(chr.1, start.1, end.1)) %>%
1680016262020:links1 <- links1  %>%
1680016262025:as.data.frame() %>%
1680016262031:rename(c(seqnames, start, end) = c(chr.1, start.1, end.1)) %>%
1680016441191:links1 <- links1  %>%
1680016441196:as.data.frame() %>%
1680016441201:rename(seqnames = chr.1, start = start.1, end = end.1) %>%
1680016441207:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680016503699:links1 <- links1  %>%
1680016503703:as.data.frame() %>%
1680016503708:rename(chr.1 = seqnames, start.1 = start, end.1 = end) %>%
1680016503713:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680016530635:?rename
1680016606139:links1 <- links1  %>%
1680016606144:as.data.frame() %>%
1680016606148:rename(chr.1 = "seqnames", start.1 = "start", end.1 = "end") %>%
1680016606152:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680016630693:links1 <- links1  %>%
1680016630698:as.data.frame() %>%
1680016630702:rename(seqnames = "chr.1", start.1 = "start", end.1 = "end") %>%
1680016630707:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680016644410:links1 <- links1  %>%
1680016644415:as.data.frame() %>%
1680016644419:rename(seqnames = "chr.1", start = "start.1", end = "end.1") %>%
1680016644424:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680016646886:head(links1)
1680016671116:links2 <- links2  %>%
1680016671120:as.data.frame() %>%
1680016671125:rename(seqnames = "chr.2", start = "start.2", end = "end.2") %>%
1680016671130:dplyr::select(c("chr.2", "start.2", "end.2", "frag1", "frag2"))
1680016672943:head(links2)
1680016761487:links <- inner_join(links1, links2, by = c("frag1", "frag2"))
1680016785865:links <- inner_join(links1, links2, by = c("frag1", "frag2"), multiple = all)
1680016790828:links <- inner_join(links1, links2, by = c("frag1", "frag2"), multiple = "all")
1680016801115:head(links)
1680016814595:length(links)
1680016818868:nrow(links)
1680016822201:nrow(links1)
1680016825658:nrow(links2)
1680016908860:# merge them
1680016908865:links <- rbind(pp.links, po.links)
1680016919806:nrow(links)
1680017313563:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680017329308:# merge them
1680017329312:links <- rbind(pp.links, po.links)
1680017333202:links1 <- links
1680017340161:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680017354686:nrow(links) == nrow(links1)
1680017362485:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE)
1680017375702:nrow(links1)
1680017381414:length(links1)
1680017388017:nrow(links) == length(links1)
1680017397251:links1 <- liftOver(links1, chain)
1680017422693:nrow(links) == length(links1)
1680017426189:links1 <- links1  %>%
1680017426193:as.data.frame() %>%
1680017426197:rename(seqnames = "chr.1", start = "start.1", end = "end.1") %>%
1680017426201:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680017430371:nrow(links) == length(links1)
1680017448386:nrow(links) == nrow(links1)
1680017456474:nrow(links)
1680017457832:nrow(links1)
1680017651015:# merge them
1680017651021:links <- rbind(pp.links, po.links)
1680017652674:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680017652679:library(rtracklayer)
1680017653020:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680017653869:links1 <- links
1680017654384:links2 <- links
1680017655223:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680017665951:links2[c("chr", "start", "end")] <- str_split_fixed(links$frag2, "[.]", 3)
1680017691342:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE)
1680017706809:links2 <- makeGRangesFromDataFrame(links2, keep.extra.columns = TRUE)
1680017722692:links1 <- liftOver(links1, chain)
1680017737800:links1 <- links1  %>%
1680017737805:annoGR2DF() %>%
1680017737809:rename(seqnames = "chr.1", start = "start.1", end = "end.1") %>%
1680017737813:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680017875660:links1
1680018213774:links1 <- links1  %>%
1680018213780:as.data.frame() %>%
1680018213784:rename(seqnames = "chr.1", start = "start.1", end = "end.1") %>%
1680018213789:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680018225953:View(links1)
1680018245184:setdiff(links, links1)
1680078534477:# load libraries
1680078534482:library(dplyr)
1680078534528:library(Seurat)
1680078544335:library(qs)
1680078544372:library(GenomicRanges)
1680078544668:library(tidyr)
1680078544703:library(stringr)
1680078544742:# define dataset
1680078544746:dataset <- "timecourse"
1680078544750:celltype <- "NPC"
1680078979313:# load links files
1680078979317:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680078984585:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680079068421:# merge them
1680079068430:links <- rbind(pp.links, po.links)
1680079342799:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680079371065:links1 <- str_split_fixed(links$frag1, "[.]", 3)
1680079544010:head(links1)
1680080271984:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680080271988:library(rtracklayer)
1680080272927:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680080278618:links1, links2 <- links
1680080513524:links1 <- links %>% mutate(chr = strsplit(frag1, "[.]", 3)[[1]]) %>%
1680080513529:mutate(start = strsplit(frag1, "[.]", 3)[[2]]) %>%
1680080513535:mutate(end = strsplit(frag1, "[.]", 3)[[3]])
1680080529619:links1
1680080566432:links1 <- links %>% mutate(chr = strsplit(frag1, "[.]", 3)[[1]][1]) %>%
1680080566459:mutate(start = strsplit(frag1, "[.]", 3)[[1]][2]) %>%
1680080566495:mutate(end = strsplit(frag1, "[.]", 3)[[1]][3])
1680080585562:links1
1680080618468:strsplit("mutate(chr = strsplit(frag1, "[.]", 3)[[1]])")
1680080654146:strsplit("chr1.943049.965801", "[.]")
1680080658322:strsplit("chr1.943049.965801", "[.]")[1]
1680080662057:strsplit("chr1.943049.965801", "[.]")[1][1]
1680080667428:strsplit("chr1.943049.965801", "[.]")[[1]][1]
1680080681010:links1 <- links %>% mutate(chr = strsplit(frag1, "[.]")[[1]][1]) %>%
1680080681014:mutate(start = strsplit(frag1, "[.]")[[1]][2]) %>%
1680080681018:mutate(end = strsplit(frag1, "[.]")[[1]][3])
1680080747421:links1
1680080798655:links1 <- links %>% mutate(chr = strsplit(frag1, "[.]")[[]][1]) %>%
1680080798663:mutate(start = strsplit(frag1, "[.]")[[]][2]) %>%
1680080798670:mutate(end = strsplit(frag1, "[.]")[[]][3])
1680080896513:links1
1680080991000:links1 <- links %>% mutate(chr = strsplit(frag1, "[.]")) %>% map_chr(., 1) %>%
1680080991005:mutate(start = strsplit(frag1, "[.]")) %>% map_chr(., 2) %>%
1680080991011:mutate(end = strsplit(frag1, "[.]")) %>% map_chr(., 3)
1680081003764:library(purr)
1680081010539:library(purrr)
1680081015410:links1 <- links %>% mutate(chr = strsplit(frag1, "[.]")) %>% map_chr(., 1) %>%
1680081015415:mutate(start = strsplit(frag1, "[.]")) %>% map_chr(., 2) %>%
1680081015419:mutate(end = strsplit(frag1, "[.]")) %>% map_chr(., 3)
1680081067550:?map_chr
1680081118682:links1 <- links %>% mutate(chr = strsplit(frag1, "[.]")) %>% map_chr(1) %>%
1680081118688:mutate(start = strsplit(frag1, "[.]")) %>% map_chr(2) %>%
1680081118693:mutate(end = strsplit(frag1, "[.]")) %>% map_chr(3)
1680081183159:links1 <- links %>% mutate(chr = strsplit(frag1, "[.]") %>% map_chr(1)) %>%
1680081183164:mutate(start = strsplit(frag1, "[.]") %>% map_chr(2)) %>%
1680081183168:mutate(end = strsplit(frag1, "[.]") %>% map_chr(3))
1680081748616:links1 <- links
1680081749397:links2 <- links
1680081751961:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680081783396:links2[c("chr", "start", "end")] <- str_split_fixed(links$frag2, "[.]", 3)
1680081811728:head(links1)
1680081895650:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = min(links2$start), end.field = max(links2$end))  %>%
1680081895655:liftOver(chain) %>%
1680081895661:as.data.frame %>%
1680081895665:rename(seqnames = "chr.1", start = "start.1", end = "end.1") %>%
1680081895670:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680081941494:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = min(links2$start), end.field = max(links2$end))  %>%
1680081941499:liftOver(chain) %>%
1680081941503:as.data.frame() %>%
1680081941507:rename(seqnames = "chr.1", start = "start.1", end = "end.1") %>%
1680081941511:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680081956640:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = min(links2$start), end.field = max(links2$end))
1680081972469:links1
1680081984912:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE)
1680082006600:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = min(start), end.field = max(end))
1680082019009:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = min(start), end.field = max(end))
1680082082994:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = min(start)-1, end.field = max(end)+1)
1680082098015:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = min(links2$start)-1, end.field = max(end)+1)
1680082112410:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE, start.field = (min(links2$start)-1), end.field = max(end)+1)
1680082797635:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE) %>%
1680082797640:liftOver(chain) %>%
1680082797645:as.data.frame() %>%
1680082797650:rename(seqnames = "chr.1", start = "start.1", end = "end.1") %>%
1680082797655:dplyr::select(c("chr.1", "start.1", "end.1", "frag1", "frag2"))
1680082838179:links2 <- makeGRangesFromDataFrame(links2, keep.extra.columns = TRUE) %>%
1680082838191:liftOver(chain) %>%
1680082838204:as.data.frame() %>%
1680082838222:rename(seqnames = "chr.2", start = "start.2", end = "end.2") %>%
1680082838234:dplyr::select(c("chr.2", "start.2", "end.2", "frag1", "frag2"))
1680082870064:nrow(links1)
1680082873878:nrow(links2)
1680083477601:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680083631711:library(dplyr)
1680083631771:library(Seurat)
1680083641294:library(qs)
1680083641336:library(GenomicRanges)
1680083641662:library(tidyr)
1680083641698:library(stringr)
1680083641732:library(purrr)
1680083641769:# define dataset
1680083641773:dataset <- "timecourse"
1680083641777:celltype <- "NPC"
1680083641782:# load links files
1680083641786:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680083647408:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680083730490:# merge them
1680083730494:links <- rbind(pp.links, po.links)
1680083742917:# merge them
1680083742921:links <- rbind(pp.links, po.links)
1680083745171:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680083745379:links1 <- links
1680083748730:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680083748734:library(rtracklayer)
1680083749800:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680083750928:links1 <- links
1680083755010:links1.r <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE) %>%
1680083755015:liftOver(chain)
1680083767952:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680083787298:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE) %>%
1680083787303:liftOver(chain)
1680083836615:links1 <- makeGRangesFromDataFrame(links1, keep.extra.columns = TRUE) %>%
1680083836619:liftOver(chain)
1680083850150:length(links1) #
1680083853070:links1.df <- as.data.frame(links1)
1680083855127:links1.df$row <- as.integer(IRanges(1L, width=lengths(links1)))
1680083880898:links1.df$row <- as.integer(IRanges(1L, width=lengths(links1)))
1680086328416:links1
1680086485034:links1[1]
1680086500342:links1[1]@unlistData
1680086512087:class(links1[1]@unlistData)
1680086588659:ranges(links1)
1680086610253:ranges(links1)[[1]]
1680086616852:ranges(links1)[[1]][1]
1680086619758:ranges(links1)[[1]][1]
1680086626188:ranges(links1)[[1]][[1]]
1680086632773:ranges(links1)[[1]][1]
1680086716742:library(liftover)
1680086730610:liftover()
1680088016192:links1 <- links
1680088018164:links1[c("chr", "start", "end")] <- str_split_fixed(links$frag1, "[.]", 3)
1680088169374:links1 <- GRanges(seqnames = links1$chr, start = links1$start, end = links1$end)
1680088237444:links1$chr
1680088242056:links1$start
1680088247374:links1$end
1680088266583:links1 <- GRanges(seqnames = links1$chr, start = links1$start, end = links1$end)
1680088363956:links1 <- GRanges(seqnames = links1$chr, start = as.numeric(links1$start), end = as.numeric(links1$end))
1680088531387:links1 <- GRanges(ranges = links1$frag1)
1680088739904:links1$frag1
1680088903885:# change format of frag1 and frag2 columns to chr:start-end
1680088903890:links$frag1 <- str_replace("[.]", ":", links$frag1) # replaces the first match
1680089777870:# load libraries
1680089777874:library(dplyr)
1680089777921:library(Seurat)
1680089786837:library(qs)
1680089786861:library(GenomicRanges)
1680089790606:library(tidyr)
1680089790648:library(stringr)
1680089790686:library(purrr)
1680089790736:# define dataset
1680089790740:dataset <- "timecourse"
1680089791358:celltype <- "NPC"
1680089792669:# load links files
1680089792673:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680089801136:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680089884029:# merge them
1680089884033:links <- rbind(pp.links, po.links)
1680089917250:# change format of frag1 and frag2 columns to chr:start-end
1680089917254:links$frag1 <- gsub(links$frag1, "[.]", ":") # replaces the first match
1680089948774:# change format of frag1 and frag2 columns to chr:start-end
1680089948787:links$frag1 <- gsub("[.]", ":", links$frag1) # replaces the first match
1680089954008:links$frag1
1680089985145:# change format of frag1 and frag2 columns to chr:start-end
1680089985150:gsub("[.]", "[:]", links$frag2) # replaces the first match
1680090010861:# change format of frag1 and frag2 columns to chr:start-end
1680090010865:gsub("[.]", ":", links$frag2) # replaces the first match
1680090100627:# change format of frag1 and frag2 columns to chr:start-end
1680090100632:links$frag2 <- sub("[.]", ":", links$frag2) # replaces the first match
1680090114667:sub("[.]", "-", links$frag2)
1680090156060:# load links files
1680090156066:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680090161246:# merge them
1680090161255:links <- rbind(pp.links, po.links)
1680090172293:# change format of frag1 and frag2 columns to chr:start-end
1680090172305:links$frag1 <- sub("[.]", ":", links$frag1) # replaces the first match
1680090177730:links$frag1 <- sub("[.]", "-", links$frag1)
1680090186740:links$frag2 <- sub("[.]", ":", links$frag2) # replaces the first match
1680090195463:links$frag2 <- sub("[.]", "-", links$frag2)
1680090236405:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680090236410:library(rtracklayer)
1680090246833:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680090255584:links1 <- GRanges(ranges = links1$frag1)
1680090259864:links1 <- GRanges(ranges = links$frag1)
1680090304525:links$frag1
1680090308595:links$frag2
1680090472477:# create individual columns for chr, start, end
1680090472483:links[c("chr.1", "start.1", "end.1")] <- str_split_fixed(links$frag1, "[.]", 3)
1680090489050:links[c("chr.2", "start.2", "end.2")] <- str_split_fixed(links$frag2, "[.]", 3)
1680090518216:# merge them
1680090518221:links <- rbind(pp.links, po.links)
1680090524868:# create individual columns for chr, start, end
1680090524873:links[c("chr.1", "start.1", "end.1")] <- str_split_fixed(links$frag1, "[.]", 3)
1680090540891:links[c("chr.2", "start.2", "end.2")] <- str_split_fixed(links$frag2, "[.]", 3)
1680090573975:head(links1)
1680090577695:head(links)
1680090584771:# change format of frag1 and frag2 columns to chr:start-end
1680090584775:links$frag1 <- sub("[.]", ":", links$frag1) # replaces the first match
1680090593336:links$frag1 <- sub("[.]", "-", links$frag1)
1680090602594:links$frag2 <- sub("[.]", ":", links$frag2) # replaces the first match
1680090611294:links$frag2 <- sub("[.]", "-", links$frag2)
1680090624787:head(links)
1680090819567:# create ranges column
1680090819572:links$ranges1 <-
1680090819577:str_split_fixed(links$frag1, ":", 2)
1680090831416:# create ranges column
1680090831423:#links$ranges1 <-
1680090831428:str_split_fixed(links$frag1, ":", 2)
1680090985165:# create ranges column
1680090985170:#links$ranges1 <-
1680090985175:str_split_fixed(links$frag1, ":", 2) %>% map(2)
1680091074156:# create ranges column
1680091074161:#links$ranges1 <-
1680091074167:strsplit(links$frag1, ":", 2) %>% map(2)
1680091144801:# create ranges column
1680091144805:links$ranges1 <- strsplit(links$frag1, ":", 2) %>% map(2)
1680091219206:links$ranges2 <- strsplit(links$frag2, ":", 2) %>% map(2)
1680091266416:head(links)
1680091292129:# create GRanges objects
1680091292134:links1 <- GRanges(seqnames = links$chr.1, ranges = links$ranges1)
1680091309149:# create GRanges objects
1680091309154:links1 <- GRanges(ranges = links$ranges1)
1680091315718:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680091315723:library(rtracklayer)
1680091317779:# create GRanges objects
1680091317783:links1 <- GRanges(seqnames = links$chr.1, ranges = links$ranges1)
1680091350930:head(links)
1680091365288:# create GRanges objects
1680091365293:links1 <- GRanges(seqnames = links$chr.1, ranges = links$ranges1)
1680091410604:# create GRanges objects
1680091410608:links1 <- GRanges(seqnames = links$chr.1, ranges = as.numeric(links$ranges1))
1680091777238:# create GRanges objects
1680091777245:links1 <- makeGRangesFromDataFrame(links, seqnames.field = chr.1, start.field = start.1, end.field = end.1)
1680091798617:head(links)
1680091814485:# create GRanges objects
1680091814492:links1 <- makeGRangesFromDataFrame(links, seqnames.field = "chr.1", start.field = "start.1", end.field = "end.1")
1680091833363:links1
1680091861107:links2 <- GRanges(links, seqnames.field = "chr.2", start.field = "start.2", end.field = "end.2")
1680091872264:links2 <- makeGRangesFromDataFrame(links, seqnames.field = "chr.2", start.field = "start.2", end.field = "end.2")
1680091964410:# create GRanges objects,
1680091964414:links1 <- makeGRangesFromDataFrame(links, seqnames.field = "chr.1", start.field = "start.1", end.field = "end.1", seqinfo = "frag1")
1680092014675:liftOver(links1, chain)
1680092054938:links1
1680092073707:?liftOver
1680092126179:# adapt coordinates
1680092126183:l1 <- liftOver(links1, chain) %>% as.data.frame()
1680092152449:l1
1680092169274:nrow(l1)
1680092209419:nrow(links1)
1680092214081:length(links1)
1680092354333:unlist(l1)
1680092530194:class(l1)
1680092537709:# adapt coordinates
1680092537714:l1 <- liftOver(links1, chain)
1680092588821:class(l1)
1680092606567:ull1 <- unlist(l1)
1680092611406:ull1
1680092633999:nrow(links)
1680093162443:View(links)
1680093582435:# save coordinates in separated files to convert them using liftOver webpage
1680093582440:write.csv(links$frag1, "/g/scb/zaugg/deuner/valdata/prom_cords.csv")
1680093605911:write.csv(links$frag2, "/g/scb/zaugg/deuner/valdata/link_cords.csv")
1680093700414:# save coordinates in separated files to convert them using liftOver webpage
1680093700420:write.csv(links$frag1, "/g/scb/zaugg/deuner/valdata/prom_cords.csv", row.names=FALSE
1680093708752:# save coordinates in separated files to convert them using liftOver webpage
1680093708757:write.csv(links$frag1, "/g/scb/zaugg/deuner/valdata/prom_cords.csv", row.names=FALSE)
1680093734499:write.csv(links$frag2, "/g/scb/zaugg/deuner/valdata/link_cords.csv", row.names=FALSE)
1680094297626:head(links1)
1680094322356:# create GRanges objects,
1680094322361:links1 <- makeGRangesFromDataFrame(links, seqnames.field = "chr.1", start.field = "start.1", end.field = "end.1", keep.extra.columns = TRUE)
1680094342635:links2 <- makeGRangesFromDataFrame(links, seqnames.field = "chr.2", start.field = "start.2", end.field = "end.2", keep.extra.columns = TRUE)
1680094390125:links1
1680094522254:# load libraries
1680094522266:library(dplyr)
1680094522327:library(Seurat)
1680094534545:library(qs)
1680094534607:library(GenomicRanges)
1680094535103:library(tidyr)
1680094535174:library(stringr)
1680094535240:library(purrr)
1680094535321:# define dataset
1680094535337:dataset <- "timecourse"
1680094572148:celltype <- "NPC"
1680094573687:# load links files
1680094573692:pp.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.pp.all.txt.bz2", sep= "\t")
1680094579360:po.links <- read.csv("/g/scb/zaugg/deuner/valdata/pcHi-C/NPC/GSE86189_npc.po.all.txt.bz2", sep = "\t")
1680094665342:# merge them
1680094665347:links <- rbind(pp.links, po.links)
1680094672236:# create individual columns for chr, start, end
1680094672242:links[c("chr.1", "start.1", "end.1")] <- str_split_fixed(links$frag1, "[.]", 3)
1680094698880:links[c("chr.2", "start.2", "end.2")] <- str_split_fixed(links$frag2, "[.]", 3)
1680094718286:head(links)
1680094723552:# change format of frag1 and frag2 columns to chr:start-end
1680094723557:links$frag1 <- sub("[.]", ":", links$frag1) # replaces the first match
1680094782264:links$frag1 <- sub("[.]", "-", links$frag1)
1680094796830:links$frag2 <- sub("[.]", ":", links$frag2) # replaces the first match
1680094804443:links$frag2 <- sub("[.]", "-", links$frag2)
1680094814425:head(links)
1680094817745:# pcHiC read data was mapped to human genome hg19 so we need to adapt the hg19 annotations to hg38 reference genome
1680094817756:library(rtracklayer)
1680094818312:chain <- import.chain("/g/scb/zaugg/deuner/valdata/hg19ToHg38.over.chain")
1680094821536:# create ranges column
1680094821545:links$ranges1 <- strsplit(links$frag1, ":", 2) %>% map(2)
1680094877179:links$ranges2 <- strsplit(links$frag2, ":", 2) %>% map(2)
1680094959141:head(links)
1680094963342:# create GRanges objects,
1680094963350:links1 <- makeGRangesFromDataFrame(links, seqnames.field = "chr.1", start.field = "start.1", end.field = "end.1", keep.extra.columns = TRUE)
1680094998431:links2 <- makeGRangesFromDataFrame(links, seqnames.field = "chr.2", start.field = "start.2", end.field = "end.2", keep.extra.columns = TRUE)
1680095044344:# adapt coordinates
1680095044348:l1 <- liftOver(links1, chain)
1680095121403:length(l1)
1680095130461:l1 <- unlist(l1)
1680095135939:length(l1)
1680095165268:head(l1)
1680095183559:length(unique(l1))
1680095194849:ll1 <- dataframe(l1)
1680095199875:ll1 <- data.frame(l1)
1680095203142:ll1
1680095215650:length(ll1)
1680095219402:nrow(ll1)
1680095236637:length(unique(ll1))
1680095776260:ll1 %>% distinct()
1680095852872:ll1 %>% distinct() %>% nrow() == nrow(ll1)
1680095869143:l1
1680096216290:# adapt coordinates
1680096216294:l1 <- liftOver(links1, chain) #11016843
1680096378302:l1
1680096396548:data.frame(l1)
1680096455290:View(li)
1680096459247:View(l1)
1680096593662:GRanges[100:105]
1680096602961:l1[100:105]
1680096946195:?liftOver
1680097541336:l1 <- unlist(l1) # 12563604
1680097547257:ll1 <- data.frame(l1) #12563604
1680097558619:ll1 %>% distinct()
1680097579898:length(ll1 %>% distinct())
1680097592034:nrow(ll1 %>% distinct())
1680097612394:View(ll1)
1680100476924:# load libraries
1680100476930:library(dplyr)
1680100476984:library(tidyr)
1680100477047:library(Seurat)
1680100486769:library(qs)
1680100486795:library(GenomicRanges)
1680100487061:library(stringr)
1680100487096:# define dataset
1680100487101:dataset <- "timeocourse"
1680100487106:# set path to ChiP-seq data
1680100487110:path <- "/g/scb2/zaugg/deuner/ChipSeqData/"
1680100572992:# cell types for which I have Chip-Seq data
1680100572998:celltypes <- c("cortical-interneuron", "dopaminergic-neuron", "hiPSC", "neural-progenitor", "neuron", "neuron-progenitor", "NPC")
1680100575202:# dataframe where all the filtered chip-seq data will be stored
1680100575206:chip <- data.frame(matrix(ncol = 5, nrow = 0))
1680100576792:colnames(chip) <- c("V1", "V2")
1680100583534:# get gene names (hence TF names) present in timecourse dataset
1680100583538:timecourse.s <- qread("/g/scb/zaugg/deuner/GRaNIE/tmp/timecourse.pp.seuratObject.qs")
1680100699969:DefaultAssay(timecourse.s) <- "RNA"
1680100700990:tc.gene.names <- rownames(timecourse.s)
1680100716581:# iterate over bed files and filter for TFs present in the timecourse dataset
1680100716587:for (celltype in celltypes){
1680100716591:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1680100716595:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names) %>% dplyr::select(c("V1", "V2"))
1680100716601:bed <- bed %>% mutate(V3 = rep(celltype, nrow(bed)))
1680100716608:print(celltype)
1680100716612:chip <- rbind(chip, bed)
1680100716617:}
1680100777772:# split first column and add appropriate column names
1680100777778:chip <- chip %>% separate(V1, c("chr", "chromStart", "chromEnd", "exp"), "\t")
1680169632913:# Load libraries
1680169632925:library(Seurat)
1680169632933:library(qs)
1680169632939:library(sctransform)
1680169632997:library(ggplot2)
1680169633041:library(BiocParallel)
1680169633323:library(scDblFinder)
1680169647490:library(dplyr)
1680169647495:library(monocle3)
1680169654864:library(harmony)
1680169655149:library(Signac)
1680169706772:# Read object
1680169706776:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680169713715:# Set up working directory
1680169713720:work.dir <- "/g/scb/zaugg/deuner/GRaNIE/"
1680169720700:# Read object
1680169720706:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680169779111:DefaultAssay(comb.s) <- "ATAC"
1680169786028:comb.s@assays$ATAC@data
1680169788890:# Visualize QC metrics as a violin plot
1680169788895:Idents(comb.s) <- comb.s@meta.data$orig.ident
1680169790024:VlnPlot(comb.s, features = c("nFeature_ATAC", "nCount_ATAC", "percent.mt", "percent.ribo"), ncol = 2)
1680169837791:# Visualize some more metrics
1680169837796:plot1 <- FeatureScatter(comb.s, feature1 = "nCount_ATAC", feature2 = "percent.mt") + geom_hline(yintercept=15, linetype="dashed", color = "darkred")
1680169840490:plot2 <- FeatureScatter(comb.s, feature1 = "nCount_ATAC", feature2 = "nFeature_ATAC") + geom_hline(yintercept=11500, linetype="dashed", color = "darkred")
1680169842455:plot1 + plot2
1680169861019:## Normalisation and Dimensionality Reduction
1680169861025:comb.s@assays$ATAC@data <- comb.s@assays$ATAC@counts # remove prenormalized data
1680169864389:comb.s <- RunTFIDF(comb.s)
1680169912797:comb.s <- FindTopFeatures(comb.s, min.cutoff = 10)
1680169920255:comb.s <- RunSVD(comb.s)
1680170244671:comb.s
1680170246847:## Non-linear dimensionality reduction (UMAP)
1680170246852:# We exclude the first dimension as this is typically correlated with sequencing depth
1680170246856:DepthCor(comb.s)
1680170257065:# Visualize ATAC space
1680170257070:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:20, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn", assay = "ATAC")
1680170369298:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1680170370262:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1680170373454:p1 + p2
1680170384146:p3 <- DimPlot(comb.s, reduction = "umap", group.by = "orig.ident", label = TRUE) +  ggtitle("RNA")
1680170388382:p4 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1680170389253:p3 + p4
1680170440549:comb.s <- FindMultiModalNeighbors(comb.s, reduction.list = list("pca", "lsi"), dims.list = list(1:18, 2:20))
1680170571140:comb.s <- RunUMAP(comb.s, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
1680170647777:comb.s <- FindClusters(comb.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE) #SLM algorithm
1680170700591:# Show UMAPs for RNA, ATAC and WNN
1680170700596:p1 <- DimPlot(comb.s, reduction = "umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("RNA")
1680170702191:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("ATAC")
1680170702937:p3 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680170704090:p1 + p2 + p3 & NoLegend() & theme(plot.title = element_text(hjust = 0.5))
1680170729666:DimPlot(comb.s, reduction = "wnn.umap", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN") +
1680170729671:DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.8", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680170812796:p1 <- DimPlot(comb.s, reduction = "umap", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("RNA")
1680170813212:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("ATAC")
1680170813417:p3 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680170813622:p1 + p2 + p3 & NoLegend() & theme(plot.title = element_text(hjust = 0.5))
1680170832109:# Clustering with WNN
1680170832118:comb.s <- FindClusters(comb.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE, res = c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))) #SLM algorithm
1680171185833:p1 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.5", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680171188054:p2 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN - RNA Cell Annotation")
1680171190744:p1 | p2
1680171206736:# Adapting Cell annotation performed with RNA clusters to WNN clusters
1680171206741:ann.equival <- c("NPC-1", #0
1680171206747:"diff-1", #1
1680171206752:"NPC-2", #2
1680171206758:"neuron-1", #3
1680171206764:"neuron-2", #4
1680171206769:"NPC-3", #5
1680171206775:"NPC-4", #6
1680171206780:"diff-2", #7
1680171206786:"hiPSC-1", #8
1680171206791:"NPC-5", #9
1680171206796:"neuron-3", #10
1680171206802:"neuron-4", #11
1680171206808:"NPC-6", #12
1680171206813:"diff-neuron", #13
1680171206819:"neuron-5", #14
1680171206824:"hiPSC-2",  #15
1680171206830:"neuron-6",  #16
1680171206835:"microglia-1",  #17
1680171206840:"neuron-7",  #18
1680171206845:"microglia-2",  #19
1680171206851:"neuron-8",  #20
1680171206856:"neuron-9",  #21
1680171206862:"neuron-10"  #22
1680171206867:)
1680171211529:Idents(comb.s)
1680171219449:Idents(comb.s) <- "wsnn_res.0.5"
1680171220743:Idents(comb.s) <- "wsnn_res.0.5"
1680171221988:Idents(comb.s)
1680171287195:names(ann.equival) <- levels(comb.s)
1680171290789:comb.s <- RenameIdents(comb.s, ann.equival)
1680171293832:comb.s[["celltype_wnn"]] <- Idents(comb.s)
1680171302650:# Save seurat object
1680171302655:qsave(comb.s, paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680171377591:gc()
1680171397744:# Save seurat object
1680171397750:qsave(comb.s, paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680172124437:# Load libraries
1680172124443:library(Seurat)
1680172133709:library(qs)
1680172133741:library(sctransform)
1680172133776:library(ggplot2)
1680172133809:library(BiocParallel)
1680172133849:library(scDblFinder)
1680172139590:library(dplyr)
1680172139633:library(monocle3)
1680172149009:library(harmony)
1680172149263:library(Signac)
1680172149816:# Set up working directory
1680172149820:work.dir <- "/g/scb/zaugg/deuner/GRaNIE/"
1680172425658:# Read object
1680172425663:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680172446661:# Read object
1680172446666:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680172478497:# Load merged Seurat Object
1680172478502:combined.path <- "/g/scb/zaugg/deuner/SCENIC+/inputdata/"
1680172479526:comb.s <- qread(paste0(combined.path, "multiome.combined.seuratObject.qs"))
1680172540783:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680172554582:comb.s
1680172560264:# Set RNA data as default assay
1680172560269:DefaultAssay(comb.s) <- "RNA"
1680172562459:# Compute % of mitochondrial genes for each cell
1680172562464:comb.s[["percent.mt"]] <- PercentageFeatureSet(comb.s, pattern = "^MT-")
1680172565227:comb.s[["percent.ribo"]] <- PercentageFeatureSet(comb.s, pattern = "^RP[SL]")
1680172567209:# Visualize QC metrics as a violin plot
1680172567214:Idents(comb.s) <- comb.s@meta.data$orig.ident
1680172569286:VlnPlot(comb.s, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"), ncol = 2)
1680172575728:# Visualize some more metrics
1680172575733:plot1 <- FeatureScatter(comb.s, feature1 = "nCount_RNA", feature2 = "percent.mt") + geom_hline(yintercept=15, linetype="dashed", color = "darkred")
1680172581306:plot2 <- FeatureScatter(comb.s, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") + geom_hline(yintercept=11500, linetype="dashed", color = "darkred")
1680172583673:plot3 <- FeatureScatter(comb.s, feature1 = "nCount_RNA", feature2 = "percent.ribo") + geom_hline(yintercept=15, linetype="dashed", color = "darkred")
1680172586506:plot1 + plot2 + plot3
1680172603430:# Filter out low quality cells
1680172603436:comb.s <- subset(comb.s, subset = nFeature_RNA > 500 & nFeature_RNA < 11500 & percent.mt < 15)
1680172641372:# Run doublet finder
1680172641376:# https://github.com/plger/scDblFinder
1680172641381:comb.s <- scDblFinder(as.SingleCellExperiment(comb.s))
1680172933613:gc()
1680172958730:# Load libraries
1680172958738:library(Seurat)
1680172959493:library(qs)
1680172959632:library(sctransform)
1680172959808:library(ggplot2)
1680172960699:library(BiocParallel)
1680172964772:library(scDblFinder)
1680172964942:library(dplyr)
1680172965329:library(monocle3)
1680172965749:library(harmony)
1680172965927:library(Signac)
1680172967098:# Set up working directory
1680172967103:work.dir <- "/g/scb/zaugg/deuner/GRaNIE/"
1680172969260:# Load merged Seurat Object
1680172969265:combined.path <- "/g/scb/zaugg/deuner/SCENIC+/inputdata/"
1680172970144:comb.s <- qread(paste0(combined.path, "multiome.combined.seuratObject.qs"))
1680173004340:comb.s
1680173009886:# Set RNA data as default assay
1680173009891:DefaultAssay(comb.s) <- "RNA"
1680173012049:# Compute % of mitochondrial genes for each cell
1680173012054:comb.s[["percent.mt"]] <- PercentageFeatureSet(comb.s, pattern = "^MT-")
1680173012798:comb.s[["percent.ribo"]] <- PercentageFeatureSet(comb.s, pattern = "^RP[SL]")
1680173016094:# Visualize QC metrics as a violin plot
1680173016099:Idents(comb.s) <- comb.s@meta.data$orig.ident
1680173019592:# Filter out low quality cells
1680173019598:comb.s <- subset(comb.s, subset = nFeature_RNA > 500 & nFeature_RNA < 11500 & percent.mt < 15)
1680173067890:# Run doublet finder
1680173067895:# https://github.com/plger/scDblFinder
1680173067900:comb.s <- scDblFinder(as.SingleCellExperiment(comb.s), samples = TRUE)
1680173126009:as.SingleCellExperiment(comb.s)
1680173205057:# Run doublet finder
1680173205062:# https://github.com/plger/scDblFinder
1680173205067:comb.s <- scDblFinder(as.SingleCellExperiment(comb.s), samples = c("timecourse, NPC, Neuron, cocultured28"))
1680173258184:# Run doublet finder
1680173258189:# https://github.com/plger/scDblFinder
1680173258193:sc <- as.SingleCellExperiment(comb.s)
1680173299976:sc@colData
1680173346185:sc@colData$samples <- sc@colData$orig.ident
1680173353309:comb.s <- scDblFinder(as.SingleCellExperiment(comb.s), samples = c("timecourse, NPC, Neuron, cocultured28"))
1680173362468:comb.s <- scDblFinder(sc, samples = c("timecourse, NPC, Neuron, cocultured28"))
1680173375514:sc@colData
1680173438696:comb.s <- scDblFinder(as.SingleCellExperiment(comb.s), samples = "orig.ident")
1680173817057:comb.s <- as.Seurat(comb.s)
1680173844380:DefaultAssay(comb.s) <- "RNA"
1680173845365:# filter out doublets
1680173845375:comb.s <- comb.s %>% subset(scDblFinder.class == "singlet")
1680173919069:# Normalization - SCTransform regressing out mt and ribo variables
1680173919074:mt.genes <-  grep(pattern = "^MT-", x = rownames(x = comb.s), value = TRUE)
1680173920865:ribo.genes <-  grep(pattern = "^RP[SL]", x = rownames(x = comb.s), value = TRUE)
1680173921824:comb.s <- SCTransform(object=comb.s, method = "glmGamPoi", return.only.var.genes = FALSE, conserve.memory = TRUE, vars.to.regress = c("percent.mt", "percent.ribo"))
1680174370607:# Find highly variable genes
1680174370619:comb.s <- FindVariableFeatures(comb.s, selection.method = "vst", nfeatures = 2000)
1680174401218:# Identify the 10 most highly variable genes
1680174401229:top10 <- head(VariableFeatures(comb.s), 10)
1680174407856:# plot variable features
1680174407864:plot <- VariableFeaturePlot(comb.s)
1680174408950:plot <- LabelPoints(plot = plot, points = top10, repel = TRUE)
1680174412583:plot
1680174423114:# Linear dimensionality reduction (PCA)
1680174423121:comb.s <- RunPCA(comb.s, features = VariableFeatures(object = comb.s))
1680174434756:# Examine and visualize PCA results a few different ways
1680174434764:print(comb.s[["pca"]], dims = 1:5, nfeatures = 5)
1680174435998:VizDimLoadings(comb.s, dims = 1:2, reduction = "pca")
1680174439069:# Plot PCA
1680174439076:Idents(comb.s) <- comb.s@meta.data$ident
1680174442394:DimPlot(comb.s, reduction = "pca")
1680174462112:# Visualize possible batch effects
1680174462119:FeaturePlot(comb.s, reduction = "pca", features = c("nCount_RNA", "nFeature_RNA", "percent.mt", "percent.ribo"))
1680174484737:# Visualize PCs
1680174484742:DimHeatmap(comb.s, dims = 1:15, cells = 500, balanced = TRUE)
1680174487936:# Elbow plot
1680174487940:ElbowPlot(comb.s, ndims = 40)
1680174495249:# Determine percent of variation associated with each PC
1680174495253:pct <- comb.s[["pca"]]@stdev / sum(comb.s[["pca"]]@stdev) * 100
1680174496991:# Calculate cumulative percents for each PC
1680174497001:cumu <- cumsum(pct)
1680174497709:# Determine which PC exhibits cumulative percent greater than 90% and % variation associated with the PC as less than 5
1680174497713:co1 <- which(cumu > 90 & pct < 5)[1]
1680174498663:co1 #41
1680174500016:# Determine the difference between variation of PC and subsequent PC
1680174500020:co2 <- sort(which((pct[1:length(pct) - 1] - pct[2:length(pct)]) > 0.1), decreasing = T)[1] + 1
1680174500743:# last point where change of % of variation is more than 0.1%.
1680174500748:co2 #18
1680174501736:# Minimum of the two calculation
1680174501740:pcs <- min(co1, co2)
1680174502498:pcs #18
1680174504496:# Cluster cells
1680174504500:comb.s <- FindNeighbors(comb.s, dims = 1:18)
1680174517708:comb.s <- FindClusters(comb.s, resolution = 0.5)
1680174527575:comb.s[["res.0.5"]] <- Idents(comb.s)
1680174534313:# UMAP
1680174534320:#comb.s <- RunUMAP(comb.s, dims = 1:18, umap.method = "umap-learn")
1680174534325:comb.s<- RunUMAP(comb.s, umap.method = "umap-learn", dims = 1:18, min.dist = 0.5, spread = 1, negative.sample.rate = 5,
1680174534330:n.epochs = NULL, n.components = 2, learning.rate = 1)
1680174611752:DimPlot(comb.s, reduction = "umap")
1680174621743:DimPlot(comb.s, reduction = "umap", group.by = "orig.ident")
1680174642816:# Save object
1680174642821:qsave(comb.s, paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680174680695:rm(sc)
1680174685096:gc()
1680174689727:# visualize technical variables
1680174689732:FeaturePlot(comb.s, reduction = "umap", features = c("nCount_RNA", "nFeature_RNA", "percent.mt", "percent.ribo"))
1680174715788:# Define basic cell type clusters
1680174715796:basic.cluster.ids <- c("NPC-1", #0
1680174715805:"NPC-2", #1
1680174715814:"neuron-1", #2
1680174715823:"NPC-3", #3
1680174715832:"neuron-2", #4
1680174715843:"diff-1", #5
1680174715853:"neuron-3", #6
1680174715863:"hiPSC-1", #7
1680174715874:"diff-2", #8
1680174715885:"neuron-4", #9
1680174715897:"microglia", #10
1680174715909:"diff-neuron", #11
1680174715921:"hiPSC-12", #12
1680174715934:"neuron-5" #13
1680174715949:)
1680174717978:# Add new cell annotation to the Seurat Object
1680174717983:names(basic.cluster.ids) <- levels(comb.s)
1680174727417:# Read object
1680174727422:comb.s <- qread(paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680174743474:Idents(c0mb.s)
1680174745898:Idents(comb.s)
1680174765770:DimPlot(comb.s, reduction = "umap", label = TRUE)
1680174824975:## From cell type to cluster annotation
1680174824980:# hiPSC markers
1680174824985:hiPSC.markers <- unique(c("5T4", "ABCG2", "B18R", "CBX2", "CD9", "CD30", "TNFRSF8", "CD117", "CDX2",
1680174824990:"CHD1", "DNMT3B", "DPPA2", "DPPA4", "DPPA5", "ESG1", "EPCAM", "TROP1", "NR3B2",
1680174824995:"ERVMER34", "ESGP", "FBXO15", "FGF4", "FGF5", "FOXD3", "GCNF", "NR6A1", "GDF3",
1680174825001:"POU5F1", "OCT4", "409B2", "B7", "HOIK1", "KUCG2", "WIBJ2", "WTC", "KLF4, NANOG"))
1680174827034:FeaturePlot(comb.s, reduction = "umap", features = hiPSC.markers) + labs(caption = "hiPSC markers")
1680174872058:# NPC markers
1680174872063:NPC.markers <- unique(c("HES5", "GFAP", "NES", "VIM", "SOX2", "BLBP", "PAX6", "Nestin, ABCG2", "FGFR1"))
1680174872766:FeaturePlot(comb.s, reduction = "umap", features = NPC.markers) + labs(caption = "NPC markers")
1680174910674:# mature neurons markers
1680174910678:mat.neuron.markers <- unique(c("NeuN", "MAP2", "PSD95", "NEFM", "NEFH", "SYP", "SLC17A6", "VGLUT2", "RBFOX3", "SAP90", "DLG4"))
1680174911271:FeaturePlot(comb.s, reduction = "umap", features = mat.neuron.markers) + labs(caption = "mature neurons markers")
1680174943190:# immature neurons markers
1680174943195:immat.neuron.markers <- unique(c("DCX", "TBR1", "PSANCAM", "Ascl1", "ASCL1", "DCX", "TUBB3", "NeuroD1", "NEUROD1",
1680174943202:"TBR1", "STMN1","NGN2"))
1680174944670:FeaturePlot(comb.s, reduction = "umap", features = immat.neuron.markers) + labs(caption = "immature neurons markers")
1680174957101:# general neuronal markers
1680174957106:neuron.markers <- unique(c("NEUN", "MAP2", "PSD95", "vGLUT2", "NMDAR2B", "GAP43", "GAT1", "GAD65", "GAD67", "GIRK2",
1680174957110:"NURR1", "LMX1B", "FOXA2"))
1680174958146:FeaturePlot(comb.s, reduction = "umap", features = neuron.markers) + labs(caption = "neuronal markers")
1680174977020:# microglia markers
1680174977025:microglia.markers <- unique(c("TMEM119", "CD11B", "CD45", "IBA1", "F80", "CD68", "CD40",  "CD11B", "P2RY12", "CD14", "CD80",
1680174977030:"CD115", "CX3CR1", "F4", "F40", "FCER1G", "TMEM119", "CD11b", "CD45", "Iba1", "CX3CR1", "F4",
1680174977034:"F80", "CD68", "CD40"))
1680174981143:FeaturePlot(comb.s, reduction = "umap", features = microglia.markers) + labs(caption = "microglia markers")
1680174996218:# differentiating cells markers
1680174996222:diff.markers <- unique(c("AADC", "DAT", "LMX1B", "MAP2", "SOX2", "SOX1", "MAP2A", "MAP2B", "TUJ1", "GFAP", "GABA", "GAD65",
1680174996227:"TH", "CHAT"))
1680174996807:FeaturePlot(comb.s, reduction = "umap", features = diff.markers) + labs(caption = "differentiating cells markers")
1680175032991:DimPlot(comb.s, reduction = "umap", label = TRUE) + DimPlot(comb.s, reduction = "umap", group.by = "orig.ident")
1680175296266:## From cell type to cluster annotation
1680175296271:# hiPSC markers
1680175296277:hiPSC.markers <- unique(c("5T4", "ABCG2", "B18R", "CBX2", "CD9", "CD30", "TNFRSF8", "CD117", "CDX2",
1680175296282:"CHD1", "DNMT3B", "DPPA2", "DPPA4", "DPPA5", "ESG1", "EPCAM", "TROP1", "NR3B2",
1680175296288:"ERVMER34", "ESGP", "FBXO15", "FGF4", "FGF5", "FOXD3", "GCNF", "NR6A1", "GDF3",
1680175296293:"POU5F1", "OCT4", "409B2", "B7", "HOIK1", "KUCG2", "WIBJ2", "WTC", "KLF4, NANOG"))
1680175296909:FeaturePlot(comb.s, reduction = "umap", features = hiPSC.markers) + labs(caption = "hiPSC markers")
1680175335715:# NPC markers
1680175335719:NPC.markers <- unique(c("HES5", "GFAP", "NES", "VIM", "SOX2", "BLBP", "PAX6", "Nestin, ABCG2", "FGFR1"))
1680175335855:FeaturePlot(comb.s, reduction = "umap", features = NPC.markers) + labs(caption = "NPC markers")
1680175358383:DimPlot(comb.s, reduction = "umap", label = TRUE) + DimPlot(comb.s, reduction = "umap", group.by = "orig.ident")
1680175446535:# mature neurons markers
1680175446539:mat.neuron.markers <- unique(c("NeuN", "MAP2", "PSD95", "NEFM", "NEFH", "SYP", "SLC17A6", "VGLUT2", "RBFOX3", "SAP90", "DLG4"))
1680175446794:FeaturePlot(comb.s, reduction = "umap", features = mat.neuron.markers) + labs(caption = "mature neurons markers")
1680175471543:# immature neurons markers
1680175471548:immat.neuron.markers <- unique(c("DCX", "TBR1", "PSANCAM", "Ascl1", "ASCL1", "DCX", "TUBB3", "NeuroD1", "NEUROD1",
1680175471552:"TBR1", "STMN1","NGN2"))
1680175473176:FeaturePlot(comb.s, reduction = "umap", features = immat.neuron.markers) + labs(caption = "immature neurons markers")
1680175495971:DimPlot(comb.s, reduction = "umap", label = TRUE) + DimPlot(comb.s, reduction = "umap", group.by = "orig.ident")
1680175602465:# Define basic cell type clusters
1680175602470:basic.cluster.ids <- c("NPC-1", #0
1680175602474:"NPC-2", #1
1680175602478:"neuron-1", #2
1680175602482:"NPC-3", #3
1680175602486:"NPC5", #4
1680175602491:"neuron-2", #5
1680175602495:"neuron-3", #6
1680175602500:"diff-NPC", #7
1680175602504:"hiPSC-1", #8
1680175602508:"diff", #9
1680175602512:"neuron-NPC-like", #10
1680175602516:"microglia", #11
1680175602521:"diff-neuron", #12
1680175602525:"hiPSC-2", #13
1680175602529:"neuron-4", #14
1680175602534:"neuron-5" #15
1680175602538:)
1680175604612:Idents(comb.s)
1680175612730:# Add new cell annotation to the Seurat Object
1680175612734:names(basic.cluster.ids) <- levels(comb.s)
1680175615218:comb.s <- RenameIdents(comb.s, basic.cluster.ids)
1680175617307:DimPlot(comb.s, reduction = "umap", label = TRUE, pt.size = 0.5, group.by = "celltype")
1680175637306:comb.s <- comb.s %>% AddMetaData(metadata = Idents(comb.s), col.name = "celltype")
1680175638672:DimPlot(comb.s, reduction = "umap", label = TRUE, pt.size = 0.5, group.by = "celltype")
1680175742326:# Define basic cell type clusters
1680175742330:basic.cluster.ids <- c("NPC-1", #0
1680175742335:"NPC-2", #1
1680175742339:"neuron-1", #2
1680175742343:"NPC-3", #3
1680175742347:"NPC-5", #4
1680175742351:"neuron-2", #5
1680175742355:"neuron-3", #6
1680175742359:"diff-NPC", #7
1680175742363:"hiPSC-1", #8
1680175742368:"diff", #9
1680175742372:"neuron-NPC-like", #10
1680175742376:"microglia", #11
1680175742380:"diff-neuron", #12
1680175742384:"hiPSC-2", #13
1680175742388:"neuron-4", #14
1680175742393:"neuron-5" #15
1680175742397:)
1680175744296:# Add new cell annotation to the Seurat Object
1680175744300:names(basic.cluster.ids) <- levels(comb.s)
1680175745194:comb.s <- RenameIdents(comb.s, basic.cluster.ids)
1680175746075:comb.s <- comb.s %>% AddMetaData(metadata = Idents(comb.s), col.name = "celltype")
1680175747595:DimPlot(comb.s, reduction = "umap", label = TRUE, pt.size = 0.5, group.by = "celltype")
1680175775087:DimPlot(comb.s, reduction = "umap", label = TRUE, pt.size = 0.5, group.by = "orig.ident")
1680175830972:DimPlot(comb.s, reduction = "umap", label = TRUE, pt.size = 0.5, group.by = "res_0.5")
1680175837944:DimPlot(comb.s, reduction = "umap", label = TRUE, pt.size = 0.5, group.by = "res.0.5")
1680175855535:# Save object
1680175855873:qsave(comb.s, paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680175900262:# Extract data from seurat object
1680175900462:gene_annotation <- as.data.frame(rownames(comb.s@reductions[["pca"]]@feature.loadings),
1680175900685:row.names = rownames(comb.s@reductions[["pca"]]@feature.loadings))
1680175902622:colnames(gene_annotation) <- "gene_short_name"
1680175928635:cell_metadata <- as.data.frame(comb.s@assays[["SCT"]]@counts@Dimnames[[2]],
1680175928654:row.names = comb.s@assays[["SCT"]]@counts@Dimnames[[2]])
1680175930599:colnames(cell_metadata) <- "barcode"
1680175931751:New_matrix <- comb.s@assays[["SCT"]]@counts
1680175932384:New_matrix <- New_matrix[rownames(comb.s@reductions[["pca"]]@feature.loadings), ]
1680175933404:expression_matrix <- New_matrix
1680175935329:# create cell data object
1680175935333:cds_from_seurat <- new_cell_data_set(expression_matrix,
1680175935338:cell_metadata = cell_metadata,
1680175935342:gene_metadata = gene_annotation)
1680175936790:# Add cluster information
1680175936795:recreate.partition <- c(rep(1, length(cds_from_seurat@colData@rownames)))
1680175937436:names(recreate.partition) <- cds_from_seurat@colData@rownames
1680175939068:recreate.partition <- as.factor(recreate.partition)
1680175939735:cds_from_seurat@clusters@listData[["UMAP"]][["partitions"]] <- recreate.partition
1680175940419:list_cluster <- comb.s@active.ident
1680175940988:names(list_cluster) <- comb.s@assays[["SCT"]]@data@Dimnames[[2]]
1680175941648:cds_from_seurat@clusters@listData[["UMAP"]][["clusters"]] <- list_cluster
1680175942189:cds_from_seurat@clusters@listData[["UMAP"]][["louvain_res"]] <- "NA"
1680175942726:cds_from_seurat@int_colData@listData$reducedDims@listData[["UMAP"]] <-comb.s@reductions[["umap"]]@cell.embeddings
1680175943583:# create trajectory inference graph
1680175943588:cds_from_seurat <- learn_graph(cds_from_seurat, use_partition = F)
1680176070947:# visualize tranjectory analysis
1680176070951:plot_cells(cds_from_seurat,
1680176070956:color_cells_by = "cluster",
1680176070960:label_groups_by_cluster=TRUE,
1680176070964:label_leaves=FALSE,
1680176070969:label_branch_points=TRUE,
1680176070973:graph_label_size=4)+
1680176070977:ggtitle("Combined - Trajectory Analysis") +
1680176070981:theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
1680176127954:# compute pseudotime
1680176127959:cds_from_seurat <- order_cells(cds_from_seurat, reduction_method = "UMAP", root_cells = colnames(cds_from_seurat[,clusters(cds_from_seurat) == "hiPSC-1"]))
1680176132616:# visualize pseudotime
1680176132621:plot_cells(cds_from_seurat,
1680176132626:color_cells_by = "pseudotime",
1680176132632:label_cell_groups=FALSE,
1680176132636:label_leaves=FALSE,
1680176132642:label_branch_points=FALSE,
1680176132647:show_trajectory_graph=FALSE,
1680176132651:graph_label_size=1.5) +
1680176132656:ggtitle("Combined - Pseudotime") +
1680176132662:theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
1680176206655:cds_from_seurat$monocle3_pseudotime <- pseudotime(cds_from_seurat)
1680176207519:cds_from_seurat$seurat_clusters <- comb.s@meta.data$seurat_clusters
1680176208225:data.pseudo <-as.data.frame(colData(cds_from_seurat))
1680176209050:ggplot(data.pseudo, aes(monocle3_pseudotime, reorder(seurat_clusters, monocle3_pseudotime, median), fill = seurat_clusters)) +
1680176209054:geom_boxplot() +
1680176209058:ylab("ordered clusters by pseudotime")
1680176227059:# find genes that change as function of pseudotime
1680176227064:genes <- graph_test(cds_from_seurat, neighbor_graph = "principal_graph", cores = 4)
1680176301663:genes %>%
1680176301669:arrange(q_value) %>%
1680176301676:filter(status == "OK") %>%
1680176301682:head()
1680176308852:gene.names <- genes %>%
1680176308857:arrange(q_value) %>%
1680176308861:filter(status == "OK") %>%
1680176308865:head() %>%
1680176308870:rownames()
1680176309727:FeaturePlot(comb.s, features = gene.names)
1680176349056:# visualize pseudotime in seurat
1680176349061:comb.s$pseudotime <- pseudotime(cds_from_seurat)
1680176350055:FeaturePlot(comb.s, features = "pseudotime", label = TRUE)
1680176363067:# save the seurat object
1680176363076:Idents(comb.s) <- comb.s[["celltype"]]
1680176364235:qsave(comb.s, paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680176401146:DefaultAssay(comb.s) <- "ATAC"
1680176402136:comb.s@assays$ATAC@data
1680176407130:# Visualize QC metrics as a violin plot
1680176407134:Idents(comb.s) <- comb.s@meta.data$orig.ident
1680176411017:## Normalisation and Dimensionality Reduction
1680176411021:comb.s@assays$ATAC@data <- comb.s@assays$ATAC@counts # remove prenormalized data
1680176411624:comb.s <- RunTFIDF(comb.s)
1680176448236:comb.s <- FindTopFeatures(comb.s, min.cutoff = 10)
1680176456592:comb.s <- RunSVD(comb.s)
1680176698450:comb.s
1680176711589:## Non-linear dimensionality reduction (UMAP)
1680176711594:# We exclude the first dimension as this is typically correlated with sequencing depth
1680176711598:DepthCor(comb.s)
1680176713089:# Visualize ATAC space
1680176713094:comb.s <- RunUMAP(comb.s, reduction = "lsi", dims = 2:20, reduction.name = "umap.atac", reduction.key = "atacUMAP_", umap.method = "umap-learn", assay = "ATAC")
1680176750860:p1 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE) +  ggtitle("ATAC")
1680176758073:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1680176758858:p1 + p2
1680176790376:p3 <- DimPlot(comb.s, reduction = "umap", group.by = "orig.ident", label = TRUE) +  ggtitle("RNA")
1680176791457:p4 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "orig.ident", label = FALSE)  + ggtitle("ATAC")
1680176792175:p3 + p4
1680176809491:comb.s <- FindMultiModalNeighbors(comb.s, reduction.list = list("pca", "lsi"), dims.list = list(1:18, 2:20))
1680176901612:comb.s <- RunUMAP(comb.s, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
1680176928386:comb.s <- FindClusters(comb.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE) #SLM algorithm
1680176958064:# Show UMAPs for RNA, ATAC and WNN
1680176958068:p1 <- DimPlot(comb.s, reduction = "umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("RNA")
1680176959128:p2 <- DimPlot(comb.s, reduction = "umap.atac", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("ATAC")
1680176960092:p3 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680176961660:p1 + p2 + p3 & NoLegend() & theme(plot.title = element_text(hjust = 0.5))
1680176990899:DimPlot(comb.s, reduction = "wnn.umap", group.by = "orig.ident", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN") +
1680176990904:DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.8", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680177012316:# Clustering with WNN
1680177012321:comb.s <- FindClusters(comb.s, graph.name = "wsnn", algorithm = 3, verbose = FALSE, res = c(0.1, seq(0.25, 1, 0.25), seq(2,10,1), seq(12,20,2))) #SLM algorithm
1680177668498:p1 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.5", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680177668709:p2 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN - RNA Cell Annotation")
1680177668908:p1 | p2
1680178133179:# Adapting Cell annotation performed with RNA clusters to WNN clusters
1680178133184:ann.equival <- c("NPC-1", #0
1680178133189:"NPC-2", #1
1680178133195:"diff-NPC", #2
1680178133200:"neuron-2", #3
1680178133207:"NPC-3", #4
1680178133214:"neuron-3", #5
1680178133221:"NPC-4", #6
1680178133229:"diff", #7
1680178133235:"neuron-NPC-like", #8
1680178133240:"hiPSC-1", #9
1680178133245:"NPC-5", #10
1680178133252:"neuron-1", #11
1680178133260:"NPC-6", #12
1680178133265:"neuron-5", #13
1680178133270:"neuron-6", #14
1680178133275:"hiPSC-2",  #15
1680178133281:"diff-neuron",  #16
1680178133286:"microglia-1",  #17
1680178133291:"NPC-7",  #18
1680178133296:"microlgia-2",  #19
1680178133301:"neuron-7",  #20
1680178133306:"neuron-4",  #21
1680178133311:"neuron-8",  #22
1680178133316:"neuron-9",  #23
1680178133322:"undefined",  #24
1680178133327:"NPC-8"  #25
1680178133332:)
1680178134818:Idents(comb.s)
1680178138346:Idents(comb.s) <- "wsnn_res.0.5"
1680178139624:Idents(comb.s)
1680178143416:names(ann.equival) <- levels(comb.s)
1680178145536:comb.s <- RenameIdents(comb.s, ann.equival)
1680178147936:comb.s[["celltype_wnn"]] <- Idents(comb.s)
1680178151693:# Save seurat object
1680178151698:qsave(comb.s, paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680178364075:p1 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.5", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680178364665:p2 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype_wnn", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN - RNA Cell Annotation")
1680178366462:p1 | p2
1680181883498:# Adapting Cell annotation performed with RNA clusters to WNN clusters
1680181883503:ann.equival <- c("NPC-1", #0
1680181883509:"NPC-2", #1
1680181883515:"diff-NPC", #2
1680181883521:"neuron-2", #3
1680181883527:"NPC-3", #4
1680181883532:"neuron-3", #5
1680181883537:"NPC-4", #6
1680181883543:"diff", #7
1680181883549:"neuron-NPC-like", #8
1680181883554:"hiPSC-1", #9
1680181883559:"NPC-5", #10
1680181883565:"neuron-1", #11
1680181883572:"NPC-6", #12
1680181883577:"neuron-5", #13
1680181883582:"neuron-6", #14
1680181883587:"hiPSC-2",  #15
1680181883592:"diff-neuron",  #16
1680181883599:"microglia-1",  #17
1680181883606:"NPC-7",  #18
1680181883612:"microglia-2",  #19
1680181883618:"neuron-7",  #20
1680181883624:"neuron-4",  #21
1680181883630:"neuron-8",  #22
1680181883635:"neuron-9",  #23
1680181883640:"undefined",  #24
1680181883645:"NPC-8"  #25
1680181883651:)
1680181885455:Idents(comb.s)
1680181890620:Idents(comb.s) <- "wsnn_res.0.5"
1680181891807:names(ann.equival) <- levels(comb.s)
1680181892964:comb.s <- RenameIdents(comb.s, ann.equival)
1680181895165:comb.s[["celltype_wnn"]] <- Idents(comb.s)
1680181897586:p1 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "wsnn_res.0.5", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN")
1680181897938:p2 <- DimPlot(comb.s, reduction = "wnn.umap", group.by = "celltype_wnn", label = TRUE, label.size = 2.5, repel = TRUE) + ggtitle("WNN - RNA Cell Annotation")
1680181898260:p1 | p2
1680181928056:# Save seurat object
1680181928060:qsave(comb.s, paste0(work.dir, "tmp/combined.pp.seuratObject.qs"))
1680183243215:gc()
1680256418957:gc()
1680261851286:View(New_matrix)
1680261860097:View(gene_annotation)
1680261868848:gc()
1680263499029:# Load libraries
1680263499036:library(GRaNIE)
1680263504958:library(Seurat)
1680263505033:library(qs)
1680263505070:library(dplyr)
1680263505115:# Set up source of helper functions (spearman correlation)
1680263505120:source("/g/scb/zaugg/deuner/GRaNIE/code/GRaNIE_spearman_helper_functions.R")
1680263513864:# Set up source of helper functions (spearman correlation)
1680263513870:source("/g/scb/zaugg/deuner/GRaNIE/code/GRaNIE_helper_functions.R")
1680263516862:# Set genome assembly version
1680263516866:genomeAssembly = "hg38"
1680263517574:# Set up the main directory
1680263517579:path = "/g/scb/zaugg/deuner/GRaNIE"
1680263520017:# Use Zaugg internal TFBS folder
1680263520021:TFBS_folder = NULL
1680263520444:# Load feature file that gives Ensembl IDs and gene names to translate names to Ensembl IDs.
1680263520449:file_RNA_features = paste0("/g/zaugg/carnold/Projects/GRN_pipeline/misc/singleCell/sharedMetadata/features_RNA_", genomeAssembly, ".tsv.gz")
1680264185115:?commandArgs
1680266655993:# load libraries
1680266655998:library(dplyr)
1680266656144:library(tidyr)
1680266656302:library(Seurat)
1680266656454:library(qs)
1680266656843:library(GenomicRanges)
1680266656993:library(stringr)
1680266659237:# define dataset
1680266659242:dataset <- "timeocourse"
1680266683874:# set path to ChiP-seq data
1680266683881:path <- "/g/scb2/zaugg/deuner/ChipSeqData/"
1680266685189:# cell types for which I have Chip-Seq data
1680266685194:celltypes <- c("cortical-interneuron", "dopaminergic-neuron", "hiPSC", "neural-progenitor", "neuron", "neuron-progenitor", "NPC")
1680266685943:# dataframe where all the filtered chip-seq data will be stored
1680266685948:chip <- data.frame(matrix(ncol = 5, nrow = 0))
1680266686835:colnames(chip) <- c("V1", "V2")
1680266687421:# get gene names (hence TF names) present in timecourse dataset
1680266687426:timecourse.s <- qread("/g/scb/zaugg/deuner/GRaNIE/tmp/timecourse.pp.seuratObject.qs")
1680266699954:DefaultAssay(timecourse.s) <- "RNA"
1680266700727:tc.gene.names <- rownames(timecourse.s)
1680266765689:# iterate over bed files and filter for TFs present in the timecourse dataset
1680266765695:for (celltype in celltypes){
1680266765701:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1680266765707:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names) %>% dplyr::select(c("V1", "V2"))
1680266765714:bed <- bed %>% mutate(V3 = rep(celltype, nrow(bed)))
1680266765718:print(celltype)
1680266765723:chip <- rbind(chip, bed)
1680266765729:}
1680266796421:# split first column and add appropriate column names
1680266796426:chip <- chip %>% separate(V1, c("chr", "chromStart", "chromEnd", "exp"), "\t")
1680266873012:colnames(chip)[5:6] <- c("TF", "celltype")
1680266918813:head(chip)
1680266919569:# save file
1680266919575:write.csv(chip, file = gzfile("/g/scb2/zaugg/deuner/ChipSeqData/filtered_TFs_chipseq_timecourse.csv.gz"))
1680266955901:# filter for peaks found in the timecourse dataset
1680266955907:DefaultAssay(timecourse.s) <- "ATAC"
1680266956808:tc.peaks <- rownames(timecourse.s)
1680266960940:tc.peaks <- as.data.frame(str_split_fixed(tc.peaks, "-", 3))
1680266961944:colnames(tc.peaks) <- c("chr", "chromStart", "chromEnd")
1680266962924:# use findOverlaps method from GenomicRanges
1680266962930:ref <-  makeGRangesFromDataFrame(tc.peaks, keep.extra.columns = TRUE)
1680266964152:qry <-  makeGRangesFromDataFrame(chip)
1680266969495:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1680266971657:head(ovlp)
1680266973288:ovlp.indx <- unique(ovlp@to)
1680266974144:# subset baits overlapping timecourse gene promoters
1680266974149:chip <-  chip[ovlp.indx,]
1680266975121:chip <- chip[,2:ncol(chip)]
1680266976052:head(chip)
1680266979138:# save file
1680266979143:write.csv(chip, file = gzfile("/g/scb2/zaugg/deuner/ChipSeqData/filtered_chipseq_timecourse.csv.gz"))
1680267082866:# define dataset
1680267082872:dataset <- "combined"
1680267083737:# set path to ChiP-seq data
1680267083744:path <- "/g/scb2/zaugg/deuner/ChipSeqData/"
1680267084259:# cell types for which I have Chip-Seq data
1680267084263:celltypes <- c("cortical-interneuron", "dopaminergic-neuron", "hiPSC", "neural-progenitor", "neuron", "neuron-progenitor", "NPC")
1680267085448:# dataframe where all the filtered chip-seq data will be stored
1680267085453:chip <- data.frame(matrix(ncol = 5, nrow = 0))
1680267086223:colnames(chip) <- c("V1", "V2")
1680267086913:# get gene names (hence TF names) present in timecourse dataset
1680267086919:timecourse.s <- qread("/g/scb/zaugg/deuner/GRaNIE/tmp/timecourse.pp.seuratObject.qs")
1680267189694:# get gene names (hence TF names) present in the dataset
1680267189699:s.obj <- qread(paste0("/g/scb/zaugg/deuner/GRaNIE/tmp/", dataset, ".pp.seuratObject.qs"))
1680267221303:DefaultAssay(s.obj) <- "RNA"
1680267222227:tc.gene.names <- rownames(s.obj)
1680267223547:# iterate over bed files and filter for TFs present in the dataset
1680267223553:for (celltype in celltypes){
1680267223559:bed <- read.csv(paste0(path, "remap2022_", celltype, "_all_macs2_hg38_v1_0.bed.gz"), sep = ".", header = FALSE)
1680267223565:bed <- bed %>% dplyr::filter(V2 %in% tc.gene.names) %>% dplyr::select(c("V1", "V2"))
1680267223571:bed <- bed %>% mutate(V3 = rep(celltype, nrow(bed)))
1680267223578:print(celltype)
1680267223585:chip <- rbind(chip, bed)
1680267223592:}
1680267422095:# split first column and add appropriate column names
1680267422116:chip <- chip %>% separate(V1, c("chr", "chromStart", "chromEnd", "exp"), "\t")
1680267550101:colnames(chip)[5:6] <- c("TF", "celltype")
1680267551822:head(chip)
1680267553730:# save file
1680267553735:write.csv(chip, file = gzfile(paste0("/g/scb2/zaugg/deuner/ChipSeqData/filtered_TFs_chipseq_", dataset, ".csv.gz")))
1680267627903:# filter for peaks found in the dataset
1680267627908:DefaultAssay(s.obj) <- "ATAC"
1680267628709:tc.peaks <- rownames(s.obj)
1680267629197:tc.peaks <- as.data.frame(str_split_fixed(tc.peaks, "-", 3))
1680267646711:colnames(tc.peaks) <- c("chr", "chromStart", "chromEnd")
1680267648232:# use findOverlaps method from GenomicRanges
1680267648238:ref <-  makeGRangesFromDataFrame(tc.peaks, keep.extra.columns = TRUE)
1680267648976:qry <-  makeGRangesFromDataFrame(chip)
1680267657959:ovlp <- findOverlaps(qry, ref) # returns indexes of intersecting regions
1680267660618:head(ovlp)
1680267661920:ovlp.indx <- unique(ovlp@to)
1680267663604:# subset baits overlapping dataset gene promoters
1680267663609:chip <-  chip[ovlp.indx,]
1680267664896:chip <- chip[,2:ncol(chip)]
1680267665809:head(chip)
1680267666768:# save file
1680267666774:write.csv(chip, file = gzfile(paste0("/g/scb2/zaugg/deuner/ChipSeqData/filtered_chipseq_", dataset, ".csv.gz")))
1680267887984:?RunTFIDF
1680267930920:library(Signac)
1680450659692:unlink(".RData")
1680450957856:library(Seurat)
1680450968533:library(qs)
1680450968654:library(sctransform)
1680450968682:library(ggplot2)
1680450968714:library(BiocParallel)
1680450968952:library(scDblFinder)
1680450988705:library(dplyr)
1680450988751:# Set up working directory
1680450988755:work.dir <- "/g/scb/zaugg/deuner/GRaNIE/"
1680452333906:load(R.data)
1680452336984:load("R.data")
1680452846992:load("~/.Rhistory")
1680559228633:# load eGRN
1680559228638:GRN1 <- qread("/g/scb/zaugg/deuner/GRaNIE/outputdata/timecourse_celltype/output_pseudobulk_celltype_RNA_limma_quantile_ATAC_DESeq2_sizeFactors/GRN.qs")
1680559228796:GRN1
1680559228958:# build eGRN
1680559228963:GRN1 = build_eGRN_graph(GRN1, forceRerun = TRUE)
